// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/nd/ncStateByNs.def,v 1.9 2002/02/27 01:08:26 masaxmasa Exp $

//----------------------------------------------------------------------
//  Unicast NS w/o SLLA
//	TN(link-local) ==> NUT(link-local)
//	target=NUT(link-local)
//----------------------------------------------------------------------
FEM_icmp6_ns(unicast_ns_tn2nut, _HETHER_tn2nut,
	{
	 _SRC(tnv6());
	 _DST(nutv6());
	 HopLimit=255;
	},
	{
	 TargetAddress=nutv6();
	}
)

//----------------------------------------------------------------------
//  Unicast NS w/ SLLA
//	TN(link-local) ==> NUT(link-local)
//	target=NUT(link-local)
//	w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(unicast_ns_tn2nut_sll, _HETHER_tn2nut,
	{
	 _SRC(tnv6());
	 _DST(nutv6());
	 HopLimit=255;
	},
	{
	 TargetAddress=nutv6();
	 option=_SLLOPT_tn;
	}
)

//----------------------------------------------------------------------
//  Multicast NS w/o SLLA
//	TN(link-local) ==> all-node multicast
//	target=NUT(link-local)
//	w/o SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(multicast_ns_tn2nut, _HETHER_tn2nutsolnode,
	{
	 _SRC(tnv6());
	 _DST(_IPV6_SOLNODE_MCAST(nutv6()));
	 HopLimit=255;
	},
	{
	 TargetAddress=nutv6();
	}
)

//----------------------------------------------------------------------
//  Multicast NS w/ SLLA
//	TN(link-local) ==> all-node multicast
//	target=NUT(link-local)
//	w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(multicast_ns_tn2nut_sll, _HETHER_tn2nutsolnode,
	{
	 _SRC(tnv6());
	 _DST(_IPV6_SOLNODE_MCAST(nutv6()));
	 HopLimit=255;
	},
	{
	 TargetAddress=nutv6();
	 option=_SLLOPT_tn;
	}
)

//----------------------------------------------------------------------
//  unicast NA
//	NUT(link-local) ==> TN(link-local)
//	target=NUT(link-local)
//	r=0, s=1, o=0
//	r=0, s=1, o=0
//----------------------------------------------------------------------
FEM_icmp6_na(unicast_na_nut2tn_rSo, _HETHER_nut2tn,
	{
	 _SRC(nutv6());
	 _DST(tnv6());
	 HopLimit=255;
	},
	{
	 RFlag=0;
	 SFlag=1;
	 OFlag=0;
	 TargetAddress=nutv6();
	}
)

//----------------------------------------------------------------------
FEM_icmp6_na(unicast_na_nut2tn_RSo, _HETHER_nut2tn,
	{
	 _SRC(nutv6());
	 _DST(tnv6());
	 HopLimit=255;
	},
	{
	 RFlag=1;
	 SFlag=1;
	 OFlag=0;
	 TargetAddress=nutv6();
	}
)

//----------------------------------------------------------------------
//  unicast NA w/ TLLA
//	NUT(link-local) ==> TN(link-local)
//	target=NUT(link-local)
//	r=0, s=1, o=1 w/ TLLA
//	r=1, s=1, o=1 w/ TLLA
//----------------------------------------------------------------------
FEM_icmp6_na(unicast_na_nut2tn_rSO_tll, _HETHER_nut2tn,
	{
	 _SRC(nutv6());
	 _DST(tnv6());
	 HopLimit=255;
	},
	{
	 RFlag=0;
	 SFlag=1;
	 OFlag=1;
	 TargetAddress=nutv6();
	 option=_TLLOPT_nut;
	}
)

//----------------------------------------------------------------------
FEM_icmp6_na(unicast_na_nut2tn_RSO_tll, _HETHER_nut2tn,
	{
	 _SRC(nutv6());
	 _DST(tnv6());
	 HopLimit=255;
	},
	{
	 RFlag=1;
	 SFlag=1;
	 OFlag=1;
	 TargetAddress=nutv6();
	 option=_TLLOPT_nut;
	}
)

//----------------------------------------------------------------------
// X ==> NUT

//----------------------------------------------------------------------
//_HETHER_define(hether_x2nut, ether(A0N_MAC_ADDR), nutether())
//_HETHER_define(hether_x2nutsolnode, ether(A0N_MAC_ADDR),
//	_ETHER_SOLNODE_MCAST(nutv6()))
//_SLLOPT_define(sllopt_x, ether(A0N_MAC_ADDR))

_HETHER_define(hether_x2nut, ether(A9N_MAC_ADDR), nutether())
_HETHER_define(hether_x2nutsolnode, ether(A9N_MAC_ADDR),
	_ETHER_SOLNODE_MCAST(nutv6()))
_SLLOPT_define(sllopt_x, ether(A9N_MAC_ADDR))

//----------------------------------------------------------------------
//  Unicast NS w/o SLLA
//	X(link-local) ==> NUT(link-local)
//	target=NUT(link-local)
//----------------------------------------------------------------------
FEM_icmp6_ns(unicast_ns_x2nut, hether_x2nut,
	{
	 _SRC(v6ether(A0N_MAC_ADDR));
	 _DST(nutv6());
	 HopLimit=255;
	},
	{
	 TargetAddress=nutv6();
	}
)

//----------------------------------------------------------------------
//  Unicast NS w/ SLLA
//	X(link-local) ==> NUT(link-local)
//	target=NUT(link-local)
//	w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(unicast_ns_x2nut_sll, hether_x2nut,
	{
	 _SRC(v6ether(A0N_MAC_ADDR));
	 _DST(nutv6());
	 HopLimit=255;
	},
	{
	 TargetAddress=nutv6();
	 option=sllopt_x;
	}
)

//----------------------------------------------------------------------
//  Multicast NS w/ SLLA
//	X(link-local) ==> NUT(solnode[link-local])
//	target=NUT(link-local)
//	w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(multicast_ns_x2nut_sll, hether_x2nutsolnode,
	{
	 _SRC(v6ether(A0N_MAC_ADDR));
	 _DST(_IPV6_SOLNODE_MCAST(nutv6()));
	 HopLimit=255;
	},
	{
	 TargetAddress=nutv6();
	 option=sllopt_x;
	}
)

////----------------------------------------------------------------------
//// NUT ==> X
//
////----------------------------------------------------------------------
//_HETHER_define(hether_nut2x, nutether(), ether(A0N_MAC_ADDR))
//_HETHER_define(hether_nut2xsolnode, nutether(),
//	_ETHER_SOLNODE_MCAST(v6ether(A0N_MAC_ADDR)))
//
////----------------------------------------------------------------------
////  Unicast NS w/o SLLA
////	NUT(link-local) ==> X(link-local)
////	target=X(link-local)
////----------------------------------------------------------------------
//FEM_icmp6_ns(unicast_ns_nut2x, hether_nut2x,
//	{
//	 _SRC(nutv6());
//	 _DST(v6ether(A0N_MAC_ADDR));
//	 HopLimit=255;
//	},
//	{
//	 TargetAddress=v6ether(A0N_MAC_ADDR);
//	}
//)
//
////----------------------------------------------------------------------
////  Unicast NS w/ SLLA
////	NUT(link-local) ==> X(link-local)
////	target=X(link-local)
////	w/ SLLA
////----------------------------------------------------------------------
//FEM_icmp6_ns(unicast_ns_nut2x_sll, hether_nut2x,
//	{
//	 _SRC(nutv6());
//	 _DST(v6ether(A0N_MAC_ADDR));
//	 HopLimit=255;
//	},
//	{
//	 TargetAddress=v6ether(A0N_MAC_ADDR);
//	 option=_SLLOPT_nut;
//	}
//)
//
////----------------------------------------------------------------------
////  Multicast NS w/ SLLA
////	NUT(link-local) ==> X(solnode[link-local])
////	target=X(link-local)
////	w/ SLLA
////----------------------------------------------------------------------
//FEM_icmp6_ns(multicast_ns_nut2x_sll, hether_nut2xsolnode,
//	{
//	 _SRC(nutv6());
//	 _DST(_IPV6_SOLNODE_MCAST(v6ether(A0N_MAC_ADDR)));
//	 HopLimit=255;
//	},
//	{
//	 TargetAddress=v6ether(A0N_MAC_ADDR);
//	 option=_SLLOPT_nut;
//	}
//)
//
////----------------------------------------------------------------------
////  Unicast NA w/o TLLA
////	NUT(link-local) ==> X(link-local)
////	target=NUT(link-local)
////	r=0, s=1, o=0
////	r=1, s=1, o=0
////----------------------------------------------------------------------
//FEM_icmp6_na(unicast_na_nut2x_rSo, hether_nut2x,
//	{
//	 _SRC(nutv6());
//	 _DST(v6ether(A0N_MAC_ADDR));
//	 HopLimit=255;
//	},
//	{
//	 RFlag=0;
//	 SFlag=1;
//	 OFlag=0;
//	 TargetAddress=nutv6();
//	}
//)
//
////----------------------------------------------------------------------
//FEM_icmp6_na(unicast_na_nut2x_RSo, hether_nut2x,
//	{
//	 _SRC(nutv6());
//	 _DST(v6ether(A0N_MAC_ADDR));
//	 HopLimit=255;
//	},
//	{
//	 RFlag=1;
//	 SFlag=1;
//	 OFlag=0;
//	 TargetAddress=nutv6();
//	}
//)
//
////----------------------------------------------------------------------
////  Unicast NS w/ TLLA
////	NUT(link-local) ==> X(link-local)
////	target=NUT(link-local)
////	r=0, s=1, o=1 w/ TLLA
////	r=1, s=1, o=1 w/ TLLA
////----------------------------------------------------------------------
//FEM_icmp6_na(unicast_na_nut2x_rSO_tll, hether_nut2x,
//	{
//	 _SRC(nutv6());
//	 _DST(v6ether(A0N_MAC_ADDR));
//	 HopLimit=255;
//	},
//	{
//	 RFlag=0;
//	 SFlag=1;
//	 OFlag=1;
//	 TargetAddress=nutv6();
//	 option=_TLLOPT_nut;
//	}
//)
//
////----------------------------------------------------------------------
//FEM_icmp6_na(unicast_na_nut2x_RSO_tll, hether_nut2x,
//	{
//	 _SRC(nutv6());
//	 _DST(v6ether(A0N_MAC_ADDR));
//	 HopLimit=255;
//	},
//	{
//	 RFlag=1;
//	 SFlag=1;
//	 OFlag=1;
//	 TargetAddress=nutv6();
//	 option=_TLLOPT_nut;
//	}
//)

//----------------------------------------------------------------------
