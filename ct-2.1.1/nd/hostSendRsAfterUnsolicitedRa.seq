#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/nd/hostSendRsAfterUnsolicitedRa.seq,v 1.23 2003/04/09 07:55:09 akisada Exp $

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
 
use V6evalTool;
use nd;

ndOptions(@ARGV);

# The following generate debugging messages.
$nd::debug=$ndOpt_v|$ndOpt_vv;

# You can specifies debug options to a remote control program.
# If you want to know more detail, please see the following:
# - V6evalTool.pm: perldoc V6evalTool
# - V6evalRemote.pm: perldoc V6evalRemote
$nd::remote_debug="-o1" if $ndOpt_vv;

$IF=Link0;

$ra_interval=3;
$wait_reboot=600;
$wait_dad_rs=120;
$wait_rs = $nd::MAX_RTR_SOLICITATION_DELAY +
    ($nd::RTR_SOLICITATION_INTERVAL * $nd::MAX_RTR_SOLICITATIONS);

@ras=(
      ra_tn2allnode,
      ra_tn2allnode_sll,
      ra_tn2allnode_invalid_src,
      ra_tn2allnode_invalid_hoplimit,
      ra_tn2allnode_invalid_chksum,
      ra_tn2allnode_invalid_icmpcode,
      );

@title_ras=(
	    "RA w/o SLLA",
	    "RA w/ SLLA",
	    "RA, src!=link-local (INVALID)",
	    "RA, hop limit != 255 (INVALID)",
	    "RA, invalid checksum (INVALID)",
	    "RA, icmp code != 0 (INVALID)",
	    );
#
#
#
$type=$V6evalTool::NutDef{Type};
if($type eq router) {
    vLogHTML("This test is for the host only<BR>");
    exit $V6evalTool::exitHostOnly;
}

$type=$V6evalTool::NutDef{Type};
if($type ne host) {
    vLogHTML(ndErrmsg("ERROR: $V6evalTool::NutDef{Type}: ".
		      "Unknown target type<BR>"));
    exit $V6evalTool::exitFail;
}

#
#
#
$idx=0;
$exit_rtn=$V6evalTool::exitPass;
foreach(@ras) {
    vLogHTML("<HR><FONT SIZE=\"+2\">*** $title_ras[$idx] ***</FONT><BR>");
    $title{$idx}="<TD>$title_ras[$idx]</TD><TD>exp:ignored</TD>";
    if(waitRsAfterRa($_) == 0) {
	$title{$idx}.="<TD>result:ignored</TD>";
	$result{$idx}=$V6evalTool::exitPass;
	vLogHTML("<A NAME=\"T$idx\">*** OK ***</A><BR>");
    } else {
	$title{$idx}.="<TD>result:accepted</TD>";
	$exit_rtn=$V6evalTool::exitFail;
	$result{$idx}=$V6evalTool::exitFail;
	vLogHTML("<A NAME=\"T$idx\">".ndErrmsg("*** NG ***")."</A><BR>");
    }
    $idx++;
}
$idx--;

#
#
#
vLogHTML("<FONT SIZE=\"+1\">Termination</FONT><BR>");
clear();

#
#
#
@col=('PTN', 'EXP', 'RESULT');
ndPrintSummaryHTML("*** Test Summary: receiving unsolicited RA vs. ".
                   "sending RS ***", @col,
                   %title, %result, $idx);

#
#
#
vLogHTML("*** EOT ***<BR>");
exit $exit_rtn;

sub waitRsAfterRa($)
{
    my($ra) = @_;
    my($i, $timer, $interval);

#
#
#
    vLogHTML("<FONT SIZE=\"+1\">Initialization</FONT><BR>");
    vLogHTML("Trying to reboot NUT<BR>");
    goto error if ndRebootAsync() != 0;
    vCapture($IF);

#
#
#
    vLogHTML("<FONT SIZE=\"+1\">Test</FONT><BR>");

    $i=0;
    $timer=$wait_reboot;
    $interval=$ra_interval;
    ndInitTimer();

    $pktdesc{rs_unspc2allrouter}='Got RS:rs_unspc2allrouter ';
    $pktdesc{rs_nut2allrouter}='Got RS: rs_nut2allrouter';
    $pktdesc{rs_nut2allrouter_sll}='Got RS: rs_nut2allrouter_sll';
    $pktdesc{dad_ns}='Got a DAD NS, ignored';

#
#
#
    while(1) {
	vLogHTML("Wait for RS ($interval sec.)<BR>");
	%ret=vRecv($IF, $interval, 0, 0,
		   rs_unspc2allrouter,
		   rs_nut2allrouter,
		   rs_nut2allrouter_sll,
		   dad_ns,
		   );

	if($ret{status} == 1) { # timeout
	    last if $i != 0;

	    # not received any RS yet.
	    last if ndExpireTimer($timer) == 0;
	    vLogHTML("Send unsolicited RA<BR>");
	    vSend($IF, $ra);
	    next;
	}
	goto error if $ret{status} != 0;

	if($i == 0) {
	    # got the first NS or RS
	    ndInitTimer();
	    $timer=$wait_dad_rs;
	}

	if($ret{recvFrame} eq dad_ns) {
	    next;
	}

	#
	# rs_unspc2allrouter
	# rs_nut2allrouter
	# rs_nut2allrouter_sll
	#
	$interval = $wait_rs;
	$i++;
    }

#
#
#
    if($i == 0) {
	vLogHTML(ndErrmsg("ERROR: Never got RS<BR>"));
	return(1);
    } elsif($i > $nd::MAX_RTR_SOLICITATIONS) {
	vLogHTML(ndErrmsg("ERROR: Too many RSs ".
			  "(> $nd::MAX_RTR_SOLICITATIONS)<BR>"));
	return(1);
    }
    return(0);

error:
    vLogHTML(vErrmsg(%ret)."<BR>");
    vLogHTML(ndErrmsg("NG<BR>"));
    exit $V6evalTool::exitFail;
}

#
#
#
sub clear()
{
    $pktdesc{ra_tn2allnode_clrrtr}="Clear the Default Router List";
    vSend($IF, ra_tn2allnode_clrrtr);
}

########################################################################
__END__

=head1 NAME

hostSendRsAfterUnsolicitedRa - Verifying NUT send RSs
after receiving unsolicited RAs

=head1 TARGET

Host only

=head1 SYNOPSIS

  hostSendRsAfterUnsolicitedRa.seq [-tooloption ...]
                                    -p hostSendRsAfterUnsolicitedRa.def

=head1 INITIALIZATION

Reboot NUT.

=head1 TEST PROCEDURE

B<hostSendRsAfterUnsolicitedRa> verifies that NUT send RSs
After receiving unsolicited RAs.

=begin html
<PRE>
<BR>
  TN                     NUT
  --------------------------
<BR>
  ==== <A HREF=#JDG1>Unsolicited RA</A> ===>
       valid RA:
           src=TN's link-local
           dst=all-node
           w/ or w/o SLL
       invalid RA:
<BR>
            :
            : A) TN sends unsolicited RAs repeatedly
            :    until receiving an RS.
            : B) TN discards NSs for DAD:
            :    src=unspecified, dst=solicited-node[NUT's link-local]
            :    target=NUT's link-local
            :    w/o SLLA
            :
<BR>
  <=== <A HREF="#JDG2">Judgment #2</A>: RS ====
       src=unspecified or NUT's link-local
       dst=all-router
       w/o or w/ SLLA
<BR>
  <=== <A HREF="#JDG2">Judgment #2</A>: RS ====
       src=unspecified or NUT's link-local
       dst=all-router
       w/o or w/ SLLA
<BR>
  <=== <A HREF="#JDG2">Judgment #2</A>: RS ====
       src=unspecified or NUT's link-local
       dst=all-router
       w/o or w/ SLLA
</PRE>

=end html

=head1 JUDGMENT

=begin html
<PRE>
<A NAME="JDG1">1. Sending RSs</A>
<HR>
6.3.7.  Sending Router Solicitations
<BR>
   Once the host sends a Router Solicitation, and receives a valid
   Router Advertisement with a non-zero Router Lifetime, the host MUST
   desist from sending additional solicitations on that interface, until
   the next time one of the above events occurs.  <B>Moreover, a host
   SHOULD send at least one solicitation in the case where an
   advertisement is received prior to having sent a solicitation.</B>
   Unsolicited Router Advertisements may be incomplete (see Section
   6.2.3); solicited advertisements are expected to contain complete
   information.
<HR>
                 TABLE.1 Received unsolicited RA vs. Send-gin RS
  =============================================================+=========
  Received unsolicited RA by NUT                               | Send RS
  -----------+----------+-------+-------------------+----------+ by the
  Src        | Dst      | SLLA  | Other             | Validity | NUT ?
  ===========+==========+=======+===================+==========+=========
  link-local | all-node | none  |                   | valid    | yes
  -----------+----------+-------+-------------------+----------+---------
  link-local | all-node | exist |                   | valid    | yes
  -----------+----------+-------+-------------------+----------+---------
  *global    | all-node | none  |                   | invalid  | yes
  -----------+----------+-------+-------------------+----------+---------
  link-local | all-node | none  | *hop limit=2      | invalid  | yes
  -----------+----------+-------+-------------------+----------+---------
  link-local | all-node | none  | *invalid checksum | invalid  | yes
  -----------+----------+-------+-------------------+----------+---------
  link-local | all-node | none  | *icmp code=1      | invalid  | yes
  ===========+==========+=======+===================+==========+=========
<BR>
<A NAME="JDG2">2. NUT sends the following RSs.</A>
<BR>
     2.1. The RSs are valid:
          A) src=unspecified, dst=all-router, w/o SLLA
          B) src=NUT's link-local, dst=all-router, w/o SLLA
          C) src=NUT's link-local, dst=all-router, w/ SLLA
<BR>
     2.2. A number of the RSs <= MAX_RTR_SOLICITATIONS(3)
<BR>
     2.3. Intervals between the RSs >= MAX_SOLICITATION_INTERVAL(1 sec.)
</PRE>

=end html

=head1 TERMINATION

  Send RA with RouterLifetime=0 to clear the Default Router List.

=head1 NOTE

  The test invokes the following command:
  - reboot

=head1 SEE ALSO

  perldoc V6evalTool
  perldoc V6evalRemote

=cut
