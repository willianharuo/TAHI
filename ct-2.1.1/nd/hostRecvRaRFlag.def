// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/nd/hostRecvRaRFlag.def,v 1.6 2002/02/27 01:08:25 masaxmasa Exp $

// the packet definitions for nd.pm
#include "nd.def"

// the packet definitions for RAs
#include "ncStateByRa.def"

//----------------------------------------------------------------------
_HETHER_define(hether_x2allnode, ether(A0N_MAC_ADDR),
        v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))
_HETHER_define(hether_x2nut, ether(A0N_MAC_ADDR), nutether())
_HETHER_define(hether_nut2x, nutether(), ether(A0N_MAC_ADDR))
_SLLOPT_define(sllopt_x, ether(A0N_MAC_ADDR))
_TLLOPT_define(tllopt_x, ether(A0N_MAC_ADDR))

//----------------------------------------------------------------------
// multicast RA
//      X(link-local) ==> all-node
//      M=0, O=0
//      lifetime=10 sec
//	ReachableTime=0 msec (not specified)
//	RetransTimer=0 msec (not specified)
//      w/ SLLA
//      w/ prefix
//              l=1, a=1
//              ValidLifetime=2592000
//		PreferredLifetime=604800;
//----------------------------------------------------------------------
FEM_icmp6_ra(ra_x2allnode_sll, hether_x2allnode,
        {
         _SRC(v6ether(A0N_MAC_ADDR));
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=0;
         MFlag=0;
         OFlag=0;
         LifeTime=10;
         ReachableTime=0;
         RetransTimer=0;
         option=sllopt_x;
         option=prefixopt_a;
        }
)

//----------------------------------------------------------------------
Opt_ICMPv6_Prefix prefixopt_a {
//      Type=3;
//      Length=4;
//      PrefixLength=_GLOBAL0_UCAST_PRFXLEN;
        LFlag=1;
        AFlag=1;        
//      Reserved1=ZERO; 
        ValidLifetime=2592000;
        PreferredLifetime=604800;
//      Reserved2=ZERO; 
        Prefix=v6(_GLOBAL0_UCAST_PRFX);
}

//----------------------------------------------------------------------
// multicast RA
//      X(link-local) ==> all-node
//      M=0, O=0
//      lifetime=0 sec
//	ReachableTime=0 msec (not specified)
//	RetransTimer=0 msec (not specified)
//      w/o SLLA
//      w/o prefix
//----------------------------------------------------------------------
FEM_icmp6_ra(ra_x2allnode_clrrtr, hether_x2allnode,
        {
         _SRC(v6ether(A0N_MAC_ADDR));
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=0;
         MFlag=0;
         OFlag=0;
         LifeTime=0;
         ReachableTime=0;
         RetransTimer=0;
        }
)

//----------------------------------------------------------------------
// unicast NA
//	X(link-local) ==> NUT(link-local)
//	R=1, S=1, O=1
//	w/ TLLA
//----------------------------------------------------------------------
FEM_icmp6_na(unicast_na_x2nut_RSO_tll, hether_x2nut,
        {
         _SRC(v6ether(A0N_MAC_ADDR));
         _DST(nutv6());
         HopLimit=255;
        },
        {
         RFlag=1;
         SFlag=1;
         OFlag=1;
         TargetAddress=v6ether(A0N_MAC_ADDR);
         option=tllopt_x;
        }
)

//----------------------------------------------------------------------
// echo-request
//      X(off-link global, but mac:X) ==> NUT(global)
//----------------------------------------------------------------------
FEM_icmp6_echo_request(offlink_echo_request_x2nut, hether_x2nut,
        {
         _SRC(v6merge(_GLOBAL9_UCAST_PRFX, _GLOBAL9_UCAST_PRFXLEN,
                        v6ether(A9N_MAC_ADDR)));
         _DST(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
        },
        {
         payload=offlink_echo_data;
        }
)

//----------------------------------------------------------------------
// echo-reply
//      NUT(global) ==> X(off-link global, but mac: X)
//----------------------------------------------------------------------
FEM_icmp6_echo_reply(offlink_echo_reply_nut2x, hether_nut2x,
        {
         _SRC(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
         _DST(v6merge(_GLOBAL9_UCAST_PRFX, _GLOBAL9_UCAST_PRFXLEN,
                        v6ether(A9N_MAC_ADDR)));
        },
        {
         payload=offlink_echo_data;
        }
)

//----------------------------------------------------------------------
Payload offlink_echo_data {
        data=repeat(0xcc,0x10);
}

//----------------------------------------------------------------------
// echo-request
//      X(off-link global, but mac:TN) ==> NUT(global)
//----------------------------------------------------------------------
FEM_icmp6_echo_request(offlink_echo_request_tn2nut,  _HETHER_tn2nut,
        {
         _SRC(v6merge(_GLOBAL9_UCAST_PRFX, _GLOBAL9_UCAST_PRFXLEN,
                        v6ether(A9N_MAC_ADDR)));
         _DST(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
        },
        {
         payload=offlink_echo_data;
        }
)

//----------------------------------------------------------------------
// echo-reply
//      NUT(global) ==> X(off-link global, but mac: TN)
//----------------------------------------------------------------------
FEM_icmp6_echo_reply(offlink_echo_reply_nut2tn, _HETHER_nut2tn,
        {
         _SRC(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
         _DST(v6merge(_GLOBAL9_UCAST_PRFX, _GLOBAL9_UCAST_PRFXLEN,
                        v6ether(A9N_MAC_ADDR)));
        },
        {
         payload=offlink_echo_data;
        }
)

//----------------------------------------------------------------------
// multicast NS for DAD
//      unspecified ==> solnode[NUT's link-local]
//      target=NUT(global)
//      w/o SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(dad_ns, _HETHER_src2dstsolnode,
        {
         _SRC(v6(_UNSPEC_ADDR));
         _DST(_IPV6_SOLNODE_MCAST(nutv6()));
         HopLimit=255;
        },
        {
         TargetAddress=nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN);
        }
)

//----------------------------------------------------------------------
