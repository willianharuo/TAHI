#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/nd/hostRecvRedirectInvalid.seq,v 1.23 2002/02/27 01:08:26 masaxmasa Exp $

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
 
use V6evalTool;
use nd;
use hostRedirect;

ndOptions(@ARGV);

# The following generate debugging messages.
$nd::debug=$ndOpt_v|$ndOpt_vv;

# You can specifies debug options to a remote control program.
# If you want to know more detail, please see the following:
# - V6evalTool.pm: perldoc V6evalTool
# - V6evalRemote.pm: perldoc V6evalRemote
$nd::remote_debug="-o1" if $ndOpt_vv;

$IF=Link0;
$exit_rtn=$V6evalTool::exitPass;
$idx=0;

$wait_delay=$nd::DELAY_FIRST_PROBE_TIME+1;
$wait_probe=$nd::RETRANS_TIMER * $nd::MAX_UNICAST_SOLICIT;

#
#
#
$type=$V6evalTool::NutDef{Type};
if($type eq router) {
    vLogHTML("This test is for the host only<BR>");
    exit $V6evalTool::exitHostOnly;
}

$type=$V6evalTool::NutDef{Type};
if($type ne host) {
    vLogHTML(ndErrmsg("ERROR: $V6evalTool::NutDef{Type}: ".
		      "Unknown target type<BR>"));
    exit $V6evalTool::exitFail;
}

# sub test definition:
# - sending pattern,
# - SLLA vs cached LLA
# - expected state
# - message
#
$idx_ptn=0;
$idx_lla=1;
$idx_exp=2;
$idx_msg=3;
$idx_inc_ip=4;
$idx_prb_ip=5;
$idx_rpy_ip=6;
$idx_ign_ip=7;
$idx_non_n=8;
$idx_rpy_n=9;
$idx_ign_n=10;
$idx_stl_sr=11;
$idx_ign_sr=12;
@null=();

#
@def_RDredirect_rone2nut_tll_invalid_globalsrc=
    (
     RDredirect_rone2nut_tll_invalid_globalsrc,
     same,
     NONCE,
     'Redirect w/ TLL, src=global (INVALID)',
     \@null, \@null, \@null, \@null,
     \@null, \@null, \@null,
     \@null, \@null
     );

#
@def_RDredirect_rone2nut_tll_invalid_hoplimit=
    (
     RDredirect_rone2nut_tll_invalid_hoplimit,
     same,
     NONCE,
     'Redirect w/ TLL, hop limit!=255 (INVALID)',
     \@null, \@null, \@null, \@null,
     \@null, \@null, \@null,
     \@null, \@null
     );

#
@def_RDredirect_rone2nut_tll_invalid_icmpcode=
    (
     RDredirect_rone2nut_tll_invalid_icmpcode,
     same,
     NONCE,
     'Redirect w/ TLL, icmp code!=0 (INVALID)',
     \@null, \@null, \@null, \@null,
     \@null, \@null, \@null,
     \@null, \@null
     );

#
@def_RDredirect_rone2nut_tll_invalid_chksum=
    (
     RDredirect_rone2nut_tll_invalid_chksum,
     same,
     NONCE,
     'Redirect w/ TLL, checksum!=valid (INVALID)',
     \@null, \@null, \@null, \@null,
     \@null, \@null, \@null,
     \@null, \@null
     );

#
@def_RDredirect_rone2nut_tll_invalid_icmpdst=
    (
     RDredirect_rone2nut_tll_invalid_icmpdst,
     same,
     NONCE,
     'Redirect w/ TLL, icmp dst=multicast (INVALID)',
     \@null, \@null, \@null, \@null,
     \@null, \@null, \@null,
     \@null, \@null
     );

#
@def_RDredirect_rone2nut_tll_invalid_router=
    (
     RDredirect_rone2nut_tll_invalid_router,
     same,
     NONCE,
     'Redirect w/ TLL, src!=valid router (INVALID)',
     \@null, \@null, \@null, \@null,
     \@null, \@null, \@null,
     \@null, \@null
     );

#
#
#
@defs=
    (
     \@def_RDredirect_rone2nut_tll_invalid_globalsrc,
     \@def_RDredirect_rone2nut_tll_invalid_hoplimit,
     \@def_RDredirect_rone2nut_tll_invalid_icmpcode,
     \@def_RDredirect_rone2nut_tll_invalid_chksum,
     \@def_RDredirect_rone2nut_tll_invalid_icmpdst,
     \@def_RDredirect_rone2nut_tll_invalid_router,
     );

#
#
#
vCapture($IF);

#
#
#
$idx=0;
foreach(@defs) {
    $exp=@$_[$idx_exp];
    $msg=@$_[$idx_msg];
    vLogHTML("<HR><FONT SIZE=\"+2\">*** NONCE vs. $msg ***</FONT><BR>");
    $s=checkState($_);
    if($s =~ /$exp/) {
        $result{$idx}=$V6evalTool::exitPass;
        vLogHTML("<A NAME=\"T$idx\">OK: The target was in $s state</A><BR>");
    } else {
        $exit_rtn=$V6evalTool::exitFail;
        $result{$idx}=$exit_rtn;
        vLogHTML("<A NAME=\"T$idx\">".
		 ndErrmsg("NG: The target was in $s state")."</A><BR>");
    }
    $title{$idx}="<TD>$msg</TD><TD>exp:$exp</TD><TD>result:$s</TD>";
    $idx++;
}
$idx--;

#
# 
#
vLogHTML("<HR><FONT SIZE=\"+2\">*** NONCE vs. Redirect w/ TLL, ".
	 "target=global & target!=dst (INVALID)***</FONT><BR>");
$title{++$idx}="<TD>Redirect w/ TLL, ".
    "target=global & target!=dst (INVALID)</TD>";

vLogHTML("<FONT SIZE=\"+1\">Initialization</FONT><BR>");
if(rd2NoNce($IF) == 0) {
    vClear($IF);

    vLogHTML("<FONT SIZE=\"+1\">Test</FONT><BR>");
    $pktdesc{RDredirect_rone2nut_tll_invalid_target}=
	'Send invalid Redirect';
    vSend($IF, RDredirect_rone2nut_tll_invalid_target);
    vSleep(1);

    vLogHTML("Examine the target's state<BR>");
    $pktdesc{RDecho_request_tn2nut_global}=
	'Send echo-request';
    vSend($IF, RDecho_request_tn2nut_global);

    $pktdesc{RDmulticast_ns_nut2tn_global}=
	'Got multicast NS, it was NONCE';
    $pktdesc{RDmulticast_ns_nut2tn_sll_global}=
	'Got multicast NS, it was NONCE';
    $pktdesc{RDecho_reply_nut2tn_global}=
	ndErrmsg('ERROR: Got echo-reply, it was REACHABLE/STALE');
    %ret=vRecv($IF, $wait_delay, 0, 0,
	       RDmulticast_ns_nut2tn_global,
	       RDmulticast_ns_nut2tn_sll_global,
	       RDecho_reply_nut2tn_global,
	       );
    if($ret{status} == 0 &&
       $ret{recvFrame} ne RDecho_reply_nut2tn_global) {
	vRecv($IF, $wait_delay, 0, 0);

	$title{$idx}.="<TD>exp:NONCE</TD><TD>result:NONCE</TD>";
	$result{$idx} = $V6evalTool::exitPass;
	vLogHTML("<A NAME=\"T$idx\">".
		 "OK: The target was NONCE state</A><BR>");
    } else {
	vLogHTML(vErrmsg(%ret)."<BR>");

	$title{$idx}.="<TD>exp:NONCE</TD><TD>result:not NONCE</TD>";
	$exit_rtn=$V6evalTool::exitFail;
	$result{$idx} = $exit_rtn;
	vLogHTML("<A NAME=\"T$idx\">".
		 ndErrmsg("NG: The target was not NONCE state")."</A><BR>");
    }
} else {
    $title{$idx}.="<TD>exp:NONCE</TD><TD>result:ERROR</TD>";
    $exit_rtn=$V6evalTool::exitFail;
    $result{$idx} = $exit_rtn;
    vLogHTML("<A NAME=\"T$idx\">".
	     ndErrmsg("NG: The target was in ERROR state")."</A><BR>");
}

#
#
#
clear();

#
#
#
@col=('PTN', 'EXP', 'RESULT');
ndPrintSummaryHTML("*** Test Summary: NONCE vs. Invalid Redirect ***", @col,
                   %title, %result, $idx);

#
#
#
vLogHTML("*** EOT ***<BR>");
exit $exit_rtn;

error:
    clear();
    vLogHTML(vErrmsg(%ret)."<BR>");
    exit $V6evalTool::exitFail;

#
#
#
sub clear()
{
    vLogHTML("<HR><FONT SIZE=\"+1\">Termination</FONT><BR>");
    rdClear($IF);
}

#
#
#
sub checkState(\@) {
    my($def)=@_;
    my($ptn)=@$def[$idx_ptn];
    my($lla)=@$def[$idx_lla];
    my($exp)=@$def[$idx_exp];
    my($msg)=@$def[$idx_msg];

    my($inc_ip)=@$def[$idx_inc_ip];
    my($prb_ip)=@$def[$idx_prb_ip];
    my($rpy_ip)=@$def[$idx_rpy_ip];
    my($ign_ip)=@$def[$idx_ign_ip];

    my($non_n)=@$def[$idx_non_n];
    my($rpy_n)=@$def[$idx_rpy_n];
    my($ign_n)=@$def[$idx_ign_n];

    my($stl_sr)=@$def[$idx_stl_sr];
    my($ign_sr)=@$def[$idx_ign_sr];

    vLogHTML("<FONT SIZE=\"+1\">Initialization</FONT><BR>");
    goto error if nd2NoNce($IF) != 0;
    vClear($IF);

    vLogHTML("<FONT SIZE=\"+1\">Test</FONT><BR>");
    $pktdesc{$ptn}="Send $msg";
    my(%ret)=vSend($IF, $ptn);
    my($s)=ndStatusNum2Str(ndStatus(
                                    $IF, $ret{sentTime1},
                                    @$inc_ip, @$prb_ip, @$rpy_ip, @$ign_ip,
                                    @$non_n, @$rpy_n, @$ign_n,
                                    @$stl_sr, @$ign_sr,
                                    )
                       );
    return $s;

error:
    return("ERROR");
}


########################################################################
__END__

=head1 NAME

hostRecvRedirectInvalid - Verifying invalid redirects vs neighbor cache entry

=head1 TARGET

Host only

=head1 SYNOPSIS

  hostRecvRedirectInvalid.seq [-tooloption ...] -p hostRecvRedirectInvalid.def

=head1 INITIALIZATION

=begin html
<OL>
  <LI>Clear NC state for TN.
  <LI>Set R1 as the default router, and its state to REACHABLE.
</OL>
<BR>
<PRE>
  TN                 NUT
  ----------------------
<BR>
  State: NONCE (for R1, TN)
<BR>
  ==== unsolicited RA ===>
       src=R1's link-local
       dst=all-node
       M=0, O=0
       RouterLifetime=600
       ReachableTime=0
       RetransTimer=0
       w/ SLLA
       Prefix Option:
           L=1, A=1
           ValidLifetime=2592000
           PreferredLifetime=604800
           Prefix=3ffe:501:ffff:100::/64
<BR>
  State: STALE (for R1), NONCE (for TN)
<BR>
  ==== solicited NA ===>
        src=R1's link-local
        dst=NUT's link-local
        R=1, S=1, O=1
        target=R1's link-local
        TLLA=R1's LLA
<BR>
  State: REACHABLE (for R1), NONCE (for TN)
<BR>
  Wait (3 sec) for DAD NS
</PRE>

=end html

=head1 TEST PROCEDURE

B<hostRecvRedirectInvalid> verifies that no neighbor cache entry is created 
with invalid redirect messages.

=begin html
<PRE>
  TN               NUT
  ----------------------
<BR>
  State: REACHABLE (for R1), NONCE (for TN)
<BR>
  ==== <A HREF="#JDG1">invalid redirect</A> ===>
       ICMP Target=TN's link-local
<BR>
  <A HREF="#JDG1">Judgment</A>: <A HREF="nd.html">Examining NUT's neighbor cache state is NONCE</A>
</PRE>

=end html

=head1 JUDGMENT

=begin html
<PRE>
<A NAME="JDG1"></A>
 1. Invalid redirect messages
<HR>
8.1.  Validation of Redirect Messages
<BR>
   A host MUST silently discard any received Redirect message that does
   not satisfy all of the following validity checks:
<BR>
      - <A NAME="INVALID1"><B>IP Source Address is a link-local address.</A></B>  Routers must use
        their link-local address as the source for Router Advertisement
        and Redirect messages so that hosts can uniquely identify
        routers.
<BR>
      - <A NAME="INVALID2"><B>The IP Hop Limit field has a value of 255,</A></B> i.e., the packet
        could not possibly have been forwarded by a router.
<BR>
      - If the message includes an IP Authentication Header, the message
        authenticates correctly.
<BR>
      - <A NAME="INVALID3"><B>ICMP Checksum is valid.</A></B>
<BR>
      - <A NAME="INVALID4"><B>ICMP Code is 0.</A></B>
<BR>
      - ICMP length (derived from the IP length) is 40 or more octets.
<BR>
      - <A NAME="INVALID5"><B>The IP source address of the Redirect is the same as the current
        first-hop router for the specified ICMP Destination Address.</A></B>
<BR>
      - <A NAME="INVALID6"><B>The ICMP Destination Address field in the redirect message does
        not contain a multicast address.</A></B>
<BR>
      - <A NAME="INVALID7"><B>The ICMP Target Address is either a link-local address (when
        redirected to a router) or the same as the ICMP Destination
        Address (when redirected to the on-link destination).</A></B>
<BR>
      - All included options have a length that is greater than zero.
<HR>
 ================+================+=========+====+========+==========+===============+===========
 IP                                         |ICMP                                    |NC state
 ----------------+----------------+---------+----+--------+----------+---------------+-----+-----
 Src             |Dst             |Hop Limit|Code|Chksum  |Dst       |Target         |Now  |New
 ================+================+=========+====+========+==========+===============+===========
 <A HREF="#INVALID1">*R1's global</A>    |NUT's link-local|255      |0   |valid   |off-link  |TN's link-local|NONCE|NONCE
 ----------------+----------------+---------+----+--------+----------+---------------+-----+----
 R1's link-local |NUT's link-local|<A HREF="#INVALID2">*!=255</A>   |0   |valid   |off-link  |TN's link-local|NONCE|NONCE
 ----------------+----------------+---------+----+--------+----------+---------------+-----+-----
 R1's link-local |NUT's link-local|255      |<A HREF="#INVALID4">*!=0</A>|valid   |off-link  |TN's link-local|NONCE|NONCE
 ----------------+----------------+---------+----+--------+----------+---------------+-----+-----
 R1's link-local |NUT's link-local|255      |0   |<A HREF="#INVALID3">*invalid</A>|off-link  |TN's link-local|NONCE|NONCE
 ----------------+----------------+---------+----+--------+----------+---------------+-----+-----
 R1's link-local |NUT's link-local|255      |0   |valid   |<A HREF="#INVALID6">*multicast</A>|TN's link-local|NONCE|NONCE
 ----------------+----------------+---------+----+--------+----------+---------------+-----+-----
 <A HREF="#INVALID5">*R2's link-local</A>|NUT's link-local|255      |0   |valid   |off-link  |TN's link-local|NONCE|NONCE
 ----------------+----------------+---------+----+--------+----------+---------------+-----+-----
 R1's link-local |NUT's link-local|255      |0   |valid   |<A HREF="#INVALID7">*off-link |*TN's global</A>   |NONCE|NONCE
 ================+================+=========+====+========+==========+===============+===========
</PRE>

=end html

=head1 TERMINATION

  Send RA with RouterLifetime=0 to clear the Default Router List.

=head1 NOTE

  The test does not invoke any remote command.

=head1 SEE ALSO

  perldoc V6evalTool
  perldoc V6evalRemote

=cut
