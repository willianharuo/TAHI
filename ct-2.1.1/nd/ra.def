// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/nd/ra.def,v 1.9 2002/02/27 01:08:28 masaxmasa Exp $

#ifndef _RA_DEF
#define _RA_DEF

//----------------------------------------------------------------------
// multicast RA
//      nut ==> tn
//      m=0, o=0
//      lifetime=any, reachableTime=any, retransTimer=any
//	any option
//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn_any, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=any;
         MFlag=any;
         OFlag=any;
         LifeTime=any;
         ReachableTime=any;
         RetransTimer=any;
	 option=stop;
        }
)

//----------------------------------------------------------------------
// multicast RA
//      nut ==> all-node
//      m=0, o=0
//      lifetime=any, reachableTime=any, retransTimer=any
//	any option
//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_any, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=any;
         MFlag=any;
         OFlag=any;
         LifeTime=any;
         ReachableTime=any;
         RetransTimer=any;
	 option=stop;
        }
)

//----------------------------------------------------------------------
// multicast RA
//      nut ==> all-node
//      m=0, o=0
//      lifetime=default, reachableTime=default, retransTimer=default
//		nooption
//		O{sll, prefix, mtu}
//		C{sll, prefix}, C{prefix, ntu}, C{sll, mtu}
//		C{sll, prefix, mtu}
//
//              l=1, a=1
//              ValidLifetime=default, PreferredLifetime=default
//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_p, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=RAprefixopt;
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode__p, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=oneof(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_sp, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAprefixopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_pm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(RAprefixopt, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_sm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_spm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAprefixopt, RAmtuopt);
//         option=_SLLOPT_nut;
//         option=RAmtuopt;
//         option=RAprefixopt;
        }
)

//----------------------------------------------------------------------
// multicast RA
//      nut ==> tn
//      m=0, o=0
//      lifetime=default, reachableTime=default, retransTimer=default
//		nooption
//		O{sll, prefix, mtu}
//		C{sll, prefix}, C{prefix, ntu}, C{sll, mtu}
//		C{sll, prefix, mtu}
//
//              l=1, a=1
//              ValidLifetime=default, PreferredLifetime=default
//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn_p, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=RAprefixopt;
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn__p, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=oneof(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn_sp, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAprefixopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn_pm, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(RAprefixopt, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn_sm, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2tn_spm, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Default_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAprefixopt, RAmtuopt);
//         option=_SLLOPT_nut;
//         option=RAmtuopt;
//         option=RAprefixopt;
        }
)

//----------------------------------------------------------------------
Opt_ICMPv6_Prefix RAprefixopt {
//      Type=3;
//      Length=4;
//      PrefixLength=_GLOBAL0_UCAST_PRFXLEN;
        LFlag=_Default_AdvOnLinkFlag;
        AFlag=_Default_AdvAutonomousFlag;        
//      Reserved1=ZERO; 
        ValidLifetime=_Default_AdvValidLifetime;
        PreferredLifetime=_Default_AdvPreferredLifetime;
//      Reserved2=ZERO; 
        Prefix=v6(_GLOBAL0_UCAST_PRFX);
}

//----------------------------------------------------------------------

Opt_ICMPv6_MTU RAmtuopt {
        MTU=_Default_AdvLinkMTU;
}

//----------------------------------------------------------------------
// multicast RA
//      X(link-local) ==> all-node
//      m=0, o=0
//      lifetime=min, reachableTime=min, retransTimer=min
//		nooption
//		O{sll, prefix, mtu}
//		C{sll, prefix}, C{prefix, ntu}, C{sll, mtu}
//		C{sll, prefix, mtu}
//
//              l=1, a=1
//              ValidLifetime=default, PreferredLifetime=default
//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_min, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Min_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_min_p, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Min_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=RAprefixopt;
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_min__p, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Min_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=oneof(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_min_sp, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Min_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAprefixopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_min_pm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Min_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(RAprefixopt, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_min_sm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Min_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_min_spm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Min_AdvDefaultLifetime;
         ReachableTime=oneof(_Min_AdvReachableTime, _Default_AdvReachableTime);
         RetransTimer=oneof(_Min_AdvRetransTimer, _Default_AdvRetransTimer);
         option=comb(_SLLOPT_nut, RAprefixopt, RAmtuopt);
        }
)

//----------------------------------------------------------------------
// multicast RA
//      X(link-local) ==> all-node
//      m=0, o=0
//      lifetime=max, reachableTime=max, retransTimer=any
//		nooption
//		O{sll, prefix, mtu}
//		C{sll, prefix}, C{prefix, ntu}, C{sll, mtu}
//		C{sll, prefix, mtu}
//
//              l=1, a=1
//              ValidLifetime=default, PreferredLifetime=default
//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_max, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Max_AdvDefaultLifetime;
         ReachableTime=_Max_AdvReachableTime;
         RetransTimer=any;
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_max_p, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Max_AdvDefaultLifetime;
         ReachableTime=_Max_AdvReachableTime;
         RetransTimer=any;
         option=RAprefixopt;
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_max__p, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Max_AdvDefaultLifetime;
         ReachableTime=_Max_AdvReachableTime;
         RetransTimer=any;
         option=oneof(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_max_sp, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Max_AdvDefaultLifetime;
         ReachableTime=_Max_AdvReachableTime;
         RetransTimer=any;
         option=comb(_SLLOPT_nut, RAprefixopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_max_pm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Max_AdvDefaultLifetime;
         ReachableTime=_Max_AdvReachableTime;
         RetransTimer=any;
         option=comb(RAprefixopt, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_max_sm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Max_AdvDefaultLifetime;
         ReachableTime=_Max_AdvReachableTime;
         RetransTimer=any;
         option=comb(_SLLOPT_nut, RAmtuopt);
        }
)

//----------------------------------------------------------------------
FEM_icmp6_ra(RAra_nut2allnode_max_spm, _HETHER_nut2allnodes,
        {
         _SRC(nutv6());
         _DST(v6(_ALLNODES_MCAST_ADDR));
         HopLimit=255;
        },
        {
         CurHopLimit=_Default_AdvCurHopLimit;
         MFlag=_Default_AdvManagedFlag;
         OFlag=_Default_AdvOtherConfigFlag;
         LifeTime=_Max_AdvDefaultLifetime;
         ReachableTime=_Max_AdvReachableTime;
         RetransTimer=any;
         option=comb(_SLLOPT_nut, RAprefixopt, RAmtuopt);
        }
)

//----------------------------------------------------------------------
// multicast NS
//      NUT(link-local) ==> TN(solicited-node[link-local])
//      target=TN(link-local)
//      w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(RAns_nut2tnsol_sll, _HETHER_nut2tnsolnode,
        {
         _SRC(nutv6());
         _DST(_IPV6_SOLNODE_MCAST(tnv6()));
         HopLimit=255;
        },
        {
         TargetAddress=tnv6();
         option=_SLLOPT_nut;
        }
)

//----------------------------------------------------------------------
// unicast NA
//      TN(link-local) ==> NUT(link-local)
//      target=TN(link-local)
//      r=0, s=1, o=1
//      w/ TLLA
//----------------------------------------------------------------------
FEM_icmp6_na(RAna_tn2nut_tll, _HETHER_tn2nut,
        {
         _SRC(tnv6());
         _DST(nutv6());
         HopLimit=255;
        },
        {
         RFlag=0;
         SFlag=1;
         OFlag=1;
         TargetAddress=tnv6();
         option=_TLLOPT_tn;
        }
)

//----------------------------------------------------------------------
#endif // _RA_DEF //
