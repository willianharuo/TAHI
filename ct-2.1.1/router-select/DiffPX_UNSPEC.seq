#!/usr/bin/perl
#
# Copyright (C) 2003 Yokogawa Electric Corporation, 
# INTAP(Interoperability Technology Association
# for Information Processing, Japan).  All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/router-select/DiffPX_UNSPEC.seq,v 1.6 2003/04/22 04:26:45 akisada Exp $
# $TINY: RA_GA_Success.seq,v 1.14 2002/03/05 17:13:55 miyata Exp $
# 
########################################################################

BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
use V6evalTool;
use ROUTE;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
#$howto_initNUT="none";
#$send = "ok";

#$DAD_GA=$DAD_LCNA::DADTransmitsGA;
#$DAD_GA =~ tr/a-z/A-Z/ ;

checkNUT(host);

#----- test condition
$IF=Link0;                 # network interface
$totalret=0;               # return value
$retval=0;               # return value
$ROUTER_LIFE_TIME=60;
$RT1cnt=0;
$RT2cnt=0;

vCPP("-DPREF=$ROUTE::MED -DROUTER_LT=$ROUTE::ROUTER_LIFE_TIME");

#---------------------------------------
#----- initialize NUT
#---------------------------------------
vLog("*** initialization phase ***");

flushtables($V6evalTool::NutDef{System});

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);
vClear($IF);

#---------------------------------------
#----- LLA PHASE
#----- Wait DAD NS from NUT or timeout
#---------------------------------------
vLog("TN wait DAD NS(DADNS_from_NUT) from NUT for $ROUTE::wait_dadns [sec],");

#%ret=vRecv($IF,$WAIT_DADNS,0,0,DADNS_from_NUT);
#if ($ret{status} != 0){
#    vLog("TN wait DAD NS from NUT for $wait_dadns, but NUT had not transmit DAD NS");
#    seqNG();
#}

vLog("TN received DAD NS from NUT.");



#---------------------------------------
#----- Wait RS from NUT or timeout
#---------------------------------------

#%ret=vRecv($IF,$MORE_WAIT_RS,0,0,RS_from_NUT);
#if ($ret{status} != 0){
#    vLog("TN wait RS from NUT for $MORE_WAIT_RS, but NUT had not transmit RS");
#    seqNG();
#}

vLog("OK! Let's go ahead!");



#---------------------------------------
#----- RA PHASE
#---------------------------------------
#---------------------------------------
#      Router1
#---------------------------------------
vClear($IF);
vSend($IF, ra_RT1_link1_MED_RTINFO_UNSPEC_60); vSleep($ROUTE::RA_DELAY);
vSend($IF, na_tn2nut_sourceLLA_destinationLLA_targetLLA_RT1);

#---------------------------------------
#      Router2
#---------------------------------------
vClear($IF);
vSend($IF, ra_RT2_link2_MED_RTINFO_UNSPEC_60); vSleep($ROUTE::RA_DELAY);
vSend($IF, na_tn2nut_sourceLLA_destinationLLA_targetLLA_RT2);
vSleep($ROUTE::NA_DELAY);



#---------------------------------------
#----- Ping from Host1
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host1_via_RT1, $IF,
	echo_rep_Host1_via_RT1,
	echo_rep_Host1_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host1_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}


#---------------------------------------
#----- Ping from Host2
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host2_via_RT1,$IF,
	echo_rep_Host2_via_RT1,
	echo_rep_Host2_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host2 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host2_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host2 from NUT.");
}


#---------------------------------------
#----- Ping from Host3
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host3_via_RT1,$IF,
	echo_rep_Host3_via_RT1,
	echo_rep_Host3_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host3 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host3_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host3 from NUT.");
}


#---------------------------------------
#----- Ping from Host4
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host4_via_RT1,$IF,
	echo_rep_Host4_via_RT1,
	echo_rep_Host4_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host4 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host4_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host4 from NUT.");
}


#---------------------------------------
#----- Ping from Host5
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host5_via_RT1,$IF,
	echo_rep_Host5_via_RT1,
	echo_rep_Host5_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host5 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host5_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host5 from NUT.");
}


#---------------------------------------
#----- Ping from Host6
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host6_via_RT1,$IF,
	echo_rep_Host6_via_RT1,
	echo_rep_Host6_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host6 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host6_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host6 from NUT.");
}


#---------------------------------------
#----- Ping from Host7
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host7_via_RT1,$IF,
	echo_rep_Host7_via_RT1,
	echo_rep_Host7_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host7 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host7_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host7 from NUT.");
}


#---------------------------------------
#----- Ping from Host8
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host8_via_RT1,$IF,
	echo_rep_Host8_via_RT1,
	echo_rep_Host8_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host8 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host8_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host8 from NUT.");
}


#---------------------------------------
#----- Ping from Host9
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host9_via_RT1,$IF,
	echo_rep_Host9_via_RT1,
	echo_rep_Host9_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host9 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host9_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host9 from NUT.");
}


#---------------------------------------
#----- Ping from Host10
#---------------------------------------
$retval=SendRecvRetFrame(\$Frame,$IF,echo_req_Host10_via_RT1,$IF,
	echo_rep_Host10_via_RT1,
	echo_rep_Host10_via_RT2);

if ($retval != 0){
    vLog("TN did not receive ICMP Echo Reply to Host10 from NUT.");
}else{
    if($Frame eq 'echo_rep_Host10_via_RT1' ) {
        $RT1cnt++;
    }else{
        $RT2cnt++;
    }
    vLog("TN received ICMP Echo Reply to Host10 from NUT.");
}


#---------------------------------
# Judgement
#---------------------------------
if ($RT1cnt > 0 && $RT2cnt > 0){
    vLog("NUT seems to deliver packet in ramdom.");
}else{
    $totalret++;
    vLog("NUT does NOT seem to deliver packet in ramdom.");
    vLog("Default route for above 10 nodes are always same.");
}

if (($RT1cnt + $RT2cnt) == 10){
    vLog("NUT replyed to all PING.");
}else{
    $totalret++;
    vLog("NUT does NOT replyed to all PING.");
}

vLogHTML("<B><FONT size=+1>RT1:RT2=$RT1cnt:$RT2cnt</FONT></B>");


if ($totalret != 0) {
    seqNG();
}else{
    seqOK();
}


##########################################################


#end
########################################################################
__END__

