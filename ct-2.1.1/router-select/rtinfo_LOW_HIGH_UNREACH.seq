#!/usr/bin/perl
#
# Copyright (C) 2003 Yokogawa Electric Corporation, 
# INTAP(Interoperability Technology Association
# for Information Processing, Japan).  All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/router-select/rtinfo_LOW_HIGH_UNREACH.seq,v 1.7 2003/04/22 04:26:46 akisada Exp $
# $TINY: RA_GA_Success.seq,v 1.14 2002/03/05 17:13:55 miyata Exp $
# 
########################################################################

BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
use V6evalTool;
use ROUTE;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
#$howto_initNUT="none";
#$send = "ok";

#$DAD_GA=$DAD_LCNA::DADTransmitsGA;
#$DAD_GA =~ tr/a-z/A-Z/ ;

checkNUT(host);

#----- test condition
$IF=Link0;                 # network interface
$totalret=0;               # return value
$retval=0;               # return value

vCPP("-DPREF=$ROUTE::MED -DROUTER_LT=$ROUTE::ROUTER_LIFE_TIME");

#---------------------------------------
#----- initialize NUT
#---------------------------------------
vLogHTML("*** Initialization phase ***");

flushtables($V6evalTool::NutDef{System});

#----- start Capturing
vLogHTML("*** Testing phase ***");
vCapture($IF);
vClear($IF);

#---------------------------------------
#----- LLA PHASE
#----- Wait DAD NS from NUT or timeout
#---------------------------------------
vLog("TN wait DAD NS(DADNS_from_NUT) from NUT for $ROUTE::wait_dadns [sec],");

#%ret=vRecv($IF,$WAIT_DADNS,0,0,DADNS_from_NUT);
#if ($ret{status} != 0){
#    vLog("TN wait DAD NS from NUT for $wait_dadns, but NUT had not transmit DAD NS");
#    seqNG();
#}

#vLog("TN received DAD NS from NUT.");



#---------------------------------------
#----- Wait RS from NUT or timeout
#---------------------------------------

#%ret=vRecv($IF,$MORE_WAIT_RS,0,0,RS_from_NUT);
#if ($ret{status} != 0){
#    vLog("TN wait RS from NUT for $MORE_WAIT_RS, but NUT had not transmit RS");
#    seqNG();
#}

#vLog("OK! Let's go ahead!");



#---------------------------------------
#----- SEND RA 
#---------------------------------------
vLogHTML("<B><Font size=+1>RTINFO for Link1  LOW vs. HIGH<BR>
Both Router has short Reachable time (20sec) </FONT></B>");
#---------------------------------------
#      Router1
#---------------------------------------
vClear($IF);
vSend($IF, ra_RT1_link1_LOW_RTINFO_LOW_60); vSleep($ROUTE::RA_DELAY);
vSend($IF, na_tn2nut_sourceLLA_destinationLLA_targetLLA_RT1);

#---------------------------------------
#      Router2
#---------------------------------------
vClear($IF);
vSend($IF, ra_RT2_link1_HIGH_RTINFO_HIGH_60); vSleep($ROUTE::RA_DELAY);
vSend($IF, na_tn2nut_sourceLLA_destinationLLA_targetLLA_RT2);
vSleep($ROUTE::NA_DELAY);

$t1 = time();

#---------------------------------------
#----- Ping from Host1
#---------------------------------------
$retval=SendRecv($IF,echo_req_Host1_via_RT1,$IF,echo_rep_Host1_via_RT2);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}


#---------------------------------------
#----- Ping from Host2
#---------------------------------------
$retval=SendRecv($IF,echo_req_Host2_via_RT1,$IF,echo_rep_Host2_via_RT2);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}


#---------------------------------------
#----- Wait to expire Router Life time
#---------------------------------------
vLogHTML("*** Wait to expire Rotuer Lifetime for a while ***");

$t2 = time();

vSleep($t1+$ROUTE::REACHABLE_TIME_SHORT-$t2);

#----- start Capturing
vLogHTML("*** Resume Test ***");


#---------------------------------------
#----- Ping from Host1
#---------------------------------------
$retval=SendRecvRT2unreach($IF,echo_req_Host1_via_RT1,$IF,echo_rep_Host1_via_RT2);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}


vSleep(10);

#---------------------------------------
#----- Ping from Host1
#---------------------------------------
$retval=SendRecvRT2unreach($IF,echo_req_Host1_via_RT1,$IF,echo_rep_Host1_via_RT1);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}

#---------------------------------------
#----- Ping from Host2
#---------------------------------------
$retval=SendRecvRT2unreach($IF,echo_req_Host2_via_RT1,$IF,echo_rep_Host2_via_RT1);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}


#---------------------------------------
#----- initialize NUT
#---------------------------------------
vLogHTML("*** Initialization phase ***");

flushtables($V6evalTool::NutDef{System});

#----- start Capturing
vLogHTML("*** Testing phase ***");


#---------------------------------------
#----- SEND RA ( LOW vs HIGH with Router_Lifetime=0 )
#---------------------------------------
vLogHTML("<B><Font size=+1>RTINFO for Link1  LOW vs. HIGH<BR>
Both Router has short Reachable time (20sec) </FONT></B>");
#---------------------------------------
#      Router1
#---------------------------------------
vClear($IF);
vSend($IF, ra_RT1_link1_HIGH_RTINFO_HIGH_60); vSleep($ROUTE::RA_DELAY);
vSend($IF, na_tn2nut_sourceLLA_destinationLLA_targetLLA_RT1);

#---------------------------------------
#      Router2
#---------------------------------------
vClear($IF);
vSend($IF, ra_RT2_link1_LOW_RTINFO_LOW_60); vSleep($ROUTE::RA_DELAY);
vSend($IF, na_tn2nut_sourceLLA_destinationLLA_targetLLA_RT2);
vSleep($ROUTE::NA_DELAY);

$t1 = time();

#---------------------------------------
#----- Ping from Host1
#---------------------------------------
$retval=SendRecv($IF,echo_req_Host1_via_RT1,$IF,echo_rep_Host1_via_RT1);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}


#---------------------------------------
#----- Ping from Host2
#---------------------------------------
$retval=SendRecv($IF,echo_req_Host2_via_RT1,$IF,echo_rep_Host2_via_RT1);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}


#---------------------------------------
#----- Wait to expire Router Life time
#---------------------------------------
vLogHTML("*** Wait to expire Rotuer Lifetime for $ROUTE::REACHABLE_TIME_SHORT sec ***");

$t2 = time();
vSleep($t1+$ROUTE::REACHABLE_TIME_SHORT-$t2);

#----- start Capturing
vLogHTML("*** Resume Test ***");


#---------------------------------------
#----- Ping from Host1
#---------------------------------------
$retval=SendRecvRT1unreach($IF,echo_req_Host1_via_RT1,$IF,echo_rep_Host1_via_RT1);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}

vSleep(10);

#---------------------------------------
#----- Ping from Host1
#---------------------------------------
$retval=SendRecvRT1unreach($IF,echo_req_Host1_via_RT1,$IF,echo_rep_Host1_via_RT2);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}

#---------------------------------------
#----- Ping from Host2
#---------------------------------------
$retval=SendRecvRT1unreach($IF,echo_req_Host2_via_RT1,$IF,echo_rep_Host2_via_RT2);

if ($retval != 0){
    $totalret++;
    vLog("TN did not receive ICMP Echo Reply to Host1 from NUT.");
}else{
    vLog("TN received ICMP Echo Reply to Host1 from NUT.");
}




if ($totalret != 0) {
    vLog("NUT does not deal with Preference correctly.");
    seqNG();
}else{
    vLog("NUT deals with Preference correctly.");
    seqOK();
}


##########################################################


#end
########################################################################
__END__


=head1 NAME

=begin html
<PRE>
RA w/ Preference=LOW, Route Information Option(Link1:Preference=LOW) vs.
RA w/ Preference=HIGH, Route Information Option(Link1:Preference=HIGH)
Prefered Router get unreachable
</PRE>

=end html

=head1 TARGET

=begin html
<PRE>
Host
</PRE>

=end html

=head1 SYNOPSIS

=begin html
<PRE>
<A HREF="./rtinfo_LOW_HIGH_UNREACH.seq">rtinfo_LOW_HIGH_UNREACH.seq</A> [-tooloption ...] -pkt <A HREF="./RTINFO.def">RTINFO.def</A>
</PRE>
<BLOCKQUOTE>
<PRE>
-tooloption: v6eval tool option
</PRE>
</BLOCKQUOTE>

=end html

=head1 TOPOLOGY

=begin html
<BLOCKQUOTE>
<PRE>
                                     HOST2
                                       |
            ---------------+-----------+--- Link2
                           |
                          RT3        HOST1
                           |           |
            -------+-------+-------+---+--- Link1
                   |               |
                   RT2            RT1
                   |               |
            -------+-------+-------+------- Link0
                           |
                          NUT
</PRE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TABLE BORDER>
<TR>
<TD><TT>Link0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
<TD><TT>Testing link</TT></TD>
</TR>
<TR>
<TD><TT>Link1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:101::/64</TT></TD>
<TD><TT>other link</TT></TD>
</TR>
<TR>
<TD><TT>Link2</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:102::/64</TT></TD>
<TD><TT>other link</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>RT1(Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::a0a0</TT></TD>
<TD ROWSPAN="3"><TT>Alternative router</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a0a0</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a0:a0</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>RT2(Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::a1a1</TT></TD>
<TD ROWSPAN="3"><TT>Alternative router</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a1:a1</TT></TD>
</TR>
<TR>
<TD><TT>HOST1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:101::1</TT></TD>
<TD><TT>Host on Link1</TT></TD>
</TR>
<TR>
<TD><TT>HOST2</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>>3ffe:501:ffff:102::1</TT></TD>
<TD><TT>Host on Link2</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

=head1 INITIALIZATION

=begin html
<BLOCKQUOTE>
<PRE>
Flush Default Router List
Flush Routing Table
Flush Neighbor Cache
Flush Prefix List
</PRE>
</BLOCKQUOTE>

=end html

=head1 TEST PROCEDURE

=begin html
<BLOCKQUOTE>
<PRE>
NUT             RT1             RT2    HOST1  HOST2
 |               |               |       |       |
 ==================(INITIALIZE)===================
 |               |               |       |       |
 |  Link1Pref=LOW|               |       |       |
 |       Pref=LOW|               |       |       |
 |<--------------+               |       |       | RA from RT1
 |               | Link1Pref=HIGH|       |       |
 |               |      Pref=HIGH|       |       |
 |<------------------------------+       |       | RA from RT2
 |               |               |       |       |
 |<--------------#-----------------------+       | Echo Request (via RT1)
 +-------------------------------#------>|       | Echo Reply   (via RT2)(*1)
 |               |               |       |       |
 |<--------------#-------------------------------+ Echo Request (via RT1)
 +-------------------------------#-------------->| Echo Reply   (via RT2)(*2)
 |               |               |       |       |
       (Wait for expiration Reachable time)
 |               |               |       |       |
 |<--------------#-----------------------+       | Echo Request (via RT1)
 +-------------------------------#------>|       | Echo Reply   (via RT2)(*3)
 |               |               |       |       |
 +------------------------------>|       |       | Probe RT2 (NS)
 +------------------------------>|       |       | Probe RT2 (NS)
 +------------------------------>|       |       | Probe RT2 (NS)
 |               |               |       |       |
 |<--------------#-----------------------+       | Echo Request (via RT1)
 +---------------#---------------------->|       | Echo Reply   (via RT1)(*4)
 |               |               |       |       |
 +-------------->|               |       |       | Probe RT1 (NS)
 |<--------------+               |       |       | NA
 |               |               |       |       |
 |<--------------#-------------------------------+ Echo Request (via RT1)
 +---------------#------------------------------>| Echo Reply   (via RT1)(*5)
 |               |               |       |       |
 |               |               |       |       |
 ==================(INITIALIZE)===================
 |               |               |       |       |
 | Link1Pref=HIGH|               |       |       |
 |      Pref=HIGH|               |       |       |
 |<--------------+               |       |       | RA from RT1
 |               |  Link1Pref=LOW|       |       |
 |               |       Pref=LOW|       |       |
 |<------------------------------+       |       | RA from RT2
 |               |               |       |       |
 |<--------------#-----------------------+       | Echo Request (via RT1)
 +---------------#---------------------->|       | Echo Reply   (via RT1)(*6)
 |               |               |       |       |
 |<--------------#-------------------------------+ Echo Request (via RT1)
 +---------------#------------------------------>| Echo Reply   (via RT1)(*7)
 |               |               |       |       |
       (Wait for expiration Reachable time)
 |               |               |       |       |
 |<--------------#-----------------------+       | Echo Request (via RT1)
 +---------------#---------------------->|       | Echo Reply   (via RT1)(*8)
 |               |               |       |       |
 +-------------->|               |       |       | Probe RT1 (NS)
 +-------------->|               |       |       | Probe RT1 (NS)
 +-------------->|               |       |       | Probe RT1 (NS)
 |               |               |       |       |
 |<--------------#-----------------------+       | Echo Request (via RT1)
 +-------------------------------#------>|       | Echo Reply   (via RT2)(*9)
 |               |               |       |       |
 +------------------------------>|       |       | Probe RT2 (NS)
 |<------------------------------+       |       | NA
 |               |               |       |       |
 |<--------------#-------------------------------+ Echo Request (via RT1)
 +-------------------------------#-------------->| Echo Reply   (via RT2)(*10)
 |               |               |       |       |
</PRE>
</BLOCKQUOTE>
<P>
<PRE>
(INITIALIZATION)
1. RT1 Sends RA w/ Preference=LOW, RouteInfoOption(Link1:Preference=LOW)
2. RT2 Sends RA w/ Preference=HIGH, RouteInfoOption(Link1:Preference=HIGH)
3. HOST1 Sends Echo Request
4. NUT Sends Echo Reply to HOST1 via RT2(*1)
5. HOST2 Sends Echo Request
6. NUT Sends Echo Reply to HOST2 via RT2(*2)
(WAIT TO EXPIRE REACHABLE TIME)
7. HOST1 Sends Echo Request
8. NUT Sends Echo Reply to HOST1 via RT2(*3)
9. HOST1 Sends Echo Request
10. NUT Sends Echo Reply to HOST1 via RT1(*4)
11. HOST2 Sends Echo Request
12. NUT Sends Echo Reply to HOST2 via RT1(*5)
(INITIALIZATION)
13. RT1 Sends RA w/ Preference=HIGH, RouteInfoOption(Link1:Preference=HIGH)
14. RT2 Sends RA w/ Preference=LOW, RouteInfoOption(Link1:Preference=LOW)
15. HOST1 Sends Echo Request
16. NUT Sends Echo Reply to HOST1 via RT1(*6)
17. HOST2 Sends Echo Request
18. NUT Sends Echo Reply to HOST2 via RT1(*7)
(WAIT TO EXPIRE REACHABLE TIME)
19. HOST1 Sends Echo Request
20. NUT Sends Echo Reply to HOST1 via RT1(*8)
21. HOST1 Sends Echo Request
22. NUT Sends Echo Reply to HOST1 via RT2(*9)
23. HOST2 Sends Echo Request
24. NUT Sends Echo Reply to HOST2 via RT2(*10)
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
(*1)
    PASS: HOST1 receives Echo Reply via RT2
</PRE>
<PRE>
(*2)
    PASS: HOST2 receives Echo Reply via RT2
</PRE>
<PRE>
(*3)
    PASS: HOST1 receives Echo Reply via RT2
</PRE>
<PRE>
(*4)
    PASS: HOST1 receives Echo Reply via RT1
</PRE>
<PRE>
(*5)
    PASS: HOST2 receives Echo Reply via RT1
</PRE>
<PRE>
(*6)
    PASS: HOST1 receives Echo Reply via RT1
</PRE>
<PRE>
(*7)
    PASS: HOST2 receives Echo Reply via RT1
</PRE>
<PRE>
(*8)
    PASS: HOST1 receives Echo Reply via RT1
</PRE>
<PRE>
(*9)
    PASS: HOST1 receives Echo Reply via RT2
</PRE>
<PRE>
(*10)
    PASS: HOST2 receives Echo Reply via RT2
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
<A HREF="./ROUTE.pm">ROUTE.pm</A>
<A HREF="./RTINFO.def">RTINFO.def</A>
</PRE>

=end html

=cut
