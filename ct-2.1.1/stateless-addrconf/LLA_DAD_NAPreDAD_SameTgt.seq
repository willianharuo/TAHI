#!/usr/bin/perl
#
# Copyright (C) 2002, 2003 Yokogawa Electric Corporation, 
# INTAP(Interoperability Technology Association for Information 
# Processing, Japan), IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
# $TINY: LLA_DAD_NAPreDAD_SameTgt.seq,v 1.6 2002/03/05 03:04:55 masaxmasa Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
use V6evalTool;
use SAA;

#------------------------------------------------------
#----- get sequence arguments
#------------------------------------------------------
$howto_initNUT="none";
$send = "ok";
foreach (@ARGV) {
# How to configure address of NUT?
# sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^addrconf=(\S+)/ && do {$SAA::howto_addrconf=$1; next; };

# How to initialize NUT?
# sample: none, DADSuccess_boot, DADFail_boot
    /^init=(\S+)/     && do {$howto_initNUT=$1; next; };

# "none" if send no pakcet to NUT in state DADPostSendNS
# sample: ok, none
    /^send=(\S+)/     && do {$send=$1; next; };

# sequence debug options
# sample: qR
    /^sd=(\S+)/       && do {$seqdebugopt=$1; next; };
    seqERROR("Unknown sequence option '$_'");
}
#------------------------------------------------------

#----- test condition
$IF=Link0;                 # network interface

$max_retry_count = 10;     # retry if NUT state becomes DADPostSendNS
$max_retry_count = 2 if $SAA::sd =~ /q/;    # quick retry
$send_interval  = 0.5;
	       # 1[sec] time between DAD NS and DAD NS, send to NUT
               #     (RandomDelay is 0-1sec  e.g. default RetransTimer 1000msec)

##########################################################
#----- Check Target Type

$type=$V6evalTool::NutDef{Type};
if($type eq host) {
    vCPP('-DRFLAG=0');
}
if($type eq router) {
    vCPP('-DRFLAG=1');
}


#----- retry loop
$retry_count = 0;

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);


#----- initialize Counter
$loopcnt=0;
$recvdadns=0;

$t0 = time();  #manual address configuration or reboot start time

#----- send DAD NA to Allnode with interval_time for a couple of minits
#----- or wait until receiving a DAD NS from NUT in every interval.
vLog("TN transmits DAD NA($SAA::dadpkt_to_NUT) to Allnode(include NUT) and wait ");
vLog(" for $send_interval [sec],");
vLog(" TN expect not to receive DAD NS or NA($SAA::dadns_from_NUT, $SAA::chkconf_dadna_from_NUT) from NUT for $send_interval [sec],");
vLog(" to force NUT to detect the address duplication before transmitting DAD NS.");
vLog(" Try this process for $SAA::wait_dadns{$SAA::howto_addrconf} [sec].");
#sleep $send_interval;  #random wait 0.0-1.0sec

##########

do {
    if ($loopcnt == 0){
        #----- initialize NUT
        vLog("*** Target initialization phase ***");
	$rret=vRemote("reboot_async.rmt","","timeout=$SAA::wait_rebootcmd");
        vLog("reboot_async.rmt returned status $rret");

        # Just send trigger to reboot.

        vLog("*** Target testing phase ***");
    }

#--- Send NA
    vLog("Transmit NA to allnode with same Target: DADNA_from_TN_SameTgt");
    %ret=vSend($IF, DADNA_from_TN_SameTgt);
    seqERROR(vErrmsg(%ret)) if $ret{status} != 0 ;
    if ($loopcnt == 0){
        $firstNATime=$ret{sentTime1};
    }


#--- Wait NS
    vLog("Waiting for DAD NS : DADNS_from_NUT");
    %ret=vRecv($IF,$send_interval,0,0,DADNS_from_NUT);
    if ($ret{status} == 0 && $ret{recvTime1} > $firstNATime) {
        if ($ret{recvFrame} eq DADNS_from_NUT) {
            $recvdadns=1;
            vLog("Received DAD NS packet count=$ret{recvCount}");
        }
    }

    $td = $SAA::wait_dadns{$SAA::howto_addrconf} - (time()-$t0);
    $td = 0 if $td < 0;
    vLog("countdown timer: $td [sec]");
    $loopcnt++;

} while($recvdadns == 0 && $td > 0 );

#endof loop

vLog("End of retry loop (retry_cout=$retry_count)");

#----- if timeout
if ($ret{status}==1) { #timeout
    vLog("Although $SAA::wait_dadns{$SAA::howto_addrconf}\[sec] has past since NUT's address configured, no DAD NS came from NUT.");
    vLog("It seems that NUT has detected address duplication in state DADPreSendNS.");
    vLog("Confirming .....");

    #----- check if NUT's address is configured
    vSleep($SAA::RetransTimerSec);
    if (seqCheckNUTAddrConfigured($IF) eq TRUE) {
	vLog("Without DAD, NUT assigned the address to the interface.");
	if ($SAA::DupAddrDetectTransmits == 0) {
	    vLog("Because DupAddrDetectTransmits == 0");
	    vLog("But it means that NUT could not detect address duplication");
	    seqNG();
	}else{
	    vLog("Even though DupAddrDetectTransmits != 0");
	    vLog("And it means that NUT could not detect address duplication");
	    seqNG();
	}
    }else{
	vLog("NUT has not assigned the address to the interface.");
	vLog("NUT detected address duplication.");
	seqOK();
    }
}

if ($recvdadns==1) { #timeout
    vLog("NUT sent DAD NS, it means that NUT could not detect Address duplication");
    vLog("by receiving NA with the same target address as NUT's one.");
    seqNG();
}

#----- else
vLog("recvFrame is '$ret{recvFrame}'");
seqERROR("Cannot reach here!");#exit

#end
########################################################################
__END__

=head1 NAME

LLA_DAD_NAPreDAD_SameTgt - check the process when NUT receives DAD NS with same Target address before sending DAD NS.

=head1 TARGET

All Node

=head1 SYNOPSIS

LLA_DAD_NAPreDAD_SameTgt.seq [-tooloption ...] -pkt <packetdef> [addrconf=<addrconfname>] 

  -tooloption   : v6eval tool option
  <packetdef>   : packet definition file (v6eval tool option)
  <addrconfname>: how to configure address on NUT; boot/reboot

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html


=head1 INITIALIZATION

=begin html
<PRE>
 Reboot NUT or Initialize interface of NUT or Initialize IPv6 stack of NUT.
</PRE>

=end html

=head1 TEST PROCEDURE

=over 1

=item Test for Unicast address configuration

The following tests are prepared in this test package. See INDEX file.

B<Test for all node>

   NUT performs DAD for its Link-local unicast address made by stateless address
   autoconfiguration though NUT receives DAD NS which contains same target as
   NUT's tentative Link-local address before transimitting DAD NS.

B<Test sequence>

  TN                            NUT
  ---------------------------------
  Initialize NUT

  Configure address of NUT (reboot or interface initialization etc...)

  ==== Action #1: DAD NA =========>
  ====        #1: DAD NA =========>
                :
                :
  ====        #1: DAD NA =========>
        name: DADNA_from_TN_SameTgt

  TN wait the DAD NS sent from NUT
  X<=== Judgement #1: DAD NS =======
        name: DADNS_from_NUT

  Wait for DupAddrDetectTransmits*RetransTimer

  Check if NUT's address is configured
  ==== Action #2: SOL NS =========>
        name: SOLNS_from_TN_SameTgt

  X<== Judgement #2: DAD NA =======
        name: NA_from_NUT, NA_from_NUT_woTLL


=back 1

=head1 JUDGEMENT

=over 1

=item Test for Link-local Unicast address autoconfiguration

B<Test for all NODE>

B<NUT performs Stateless Address Autoconfiguration(Link-local) on its interface>

   Action #1. TN transmits DAD NA which contains same target Address as NUT's tentative Link-local address.
              Keep transmitting for *InitializingTime* .
        name: DADNA_from_TN_SameTgt
	src: NUT's Link-local
	dst: allnode
        TargetAddress: NUT's Link-local
        RFlag: 0
        SFlag: 0
        OFlag: 1
	OLLOPT: TN's MAC address

   Judgement #1. NUT MUST NOT transmit DAD NS for its autoconfigured Link-local address.
        name: DADNS_from_NUT
	src: ::0
	dst: solnode[NUT's tentative Link-local]
        TargetAddress: NUT's tentative Link-local

   Action #2. TN transmits SOL NS to check if NUT's address is configured after *InitializingTime*.
        name: SOLNS_from_TN_SameTgt
        src: TN's Link-local
	dst: solnode[NUT's Link-local]
        TargetAddress: NUT's Link-local

   Judgement #2. NUT MUST transmit SOL NA for its autoconfigured  Link-local address.
        name: NA_from_NUT, NA_from_NUT_woTLL
	src: NUT's Link-local
	dst: TN's Link-local
        TargetAddress: NUT's Link-local
        RFlag: 0 ( if NUT is a Router then 1)
        SFlag: 1
        OFlag: 1
	TLLOPT: NUT's MAC address

=back 1

=head1 REFERENCE

=begin html
<PRE>
RFC2462
<HR>
<BR>
   (omit)
5.4.2.  Sending Neighbor Solicitation Messages
<BR>
   Before sending a Neighbor Solicitation, an interface MUST join the
   all-nodes multicast address and the solicited-node multicast address
   of the tentative address.  The former insures that the node receives
   Neighbor Advertisements from other nodes already using the address;
   the latter insures that two nodes attempting to use the same address
   simultaneously detect each other's presence.
<BR>
   To check an address, a node sends DupAddrDetectTransmits Neighbor
   Solicitations, each separated by RetransTimer milliseconds. The
   solicitation's Target Address is set to the address being checked,
   the IP source is set to the unspecified address and the IP
   destination is set to the solicited-node multicast address of the
   target address.
<BR>
   If the Neighbor Solicitation is the first message to be sent from an
   interface after interface (re)initialization, the node should delay
   sending the message by a random delay between 0 and
   MAX_RTR_SOLICITATION_DELAY as specified in [DISCOVERY].  This serves
   to alleviate congestion when many nodes start up on the link at the
   same time, such as after a power failure, and may help to avoid race
   conditions when more than one node is trying to solicit for the same
<A NAME="REF">
   address at the same time. <B>In order to improve the robustness of the
   Duplicate Address Detection algorithm, an interface MUST receive and
   process datagrams sent to the all-nodes multicast address or
   solicited-node multicast address of the tentative address while
   delaying transmission of the initial Neighbor Solicitation.</B></A>
<BR>
   (omit)
<BR>
5.4.4.  Receiving Neighbor Advertisement Messages
<BR>
   On receipt of a valid Neighbor Advertisement message on an interface,
   node behavior depends on whether the target address is tentative or
   matches a unicast or anycast address assigned to the interface.  If
   the target address is assigned to the receiving interface, the
   solicitation is processed as described in [DISCOVERY]. <B>If the target
   address is tentative, the tentative address is not unique.</B>
<BR>
   (omit)
</PRE>

=end html

=head1 SEE ALSO

=begin html
<PRE>
 detail of v6eval tool option: see perldoc V6evalTool.pm, perldoc V6evalRemote.pm
</PRE>

=end html

=cut

