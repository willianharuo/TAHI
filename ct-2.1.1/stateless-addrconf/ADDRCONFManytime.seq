#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/stateless-addrconf/ADDRCONFManytime.seq,v 1.7 2001/10/05 06:39:19 masaxmasa Exp $

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
use V6evalTool;
use DAD;

#----- get sequence arguments
$howto_initNUT="none";
$send = "ok";
foreach (@ARGV) {
    /^addrconf=(\S+)/ && do {$DAD::howto_addrconf=$1; # How to configure address of NUT?
                             next; };                 #    sample: boot, ra, manual+_GLOBAL0A0N_UCAST
    /^init=(\S+)/     && do {$howto_initNUT=$1;       # How to initialize NUT?
                             next; };                 #    sample: none, DADSuccess_boot, DADFail_boot
    /^trynum=(\S+)/   && do {$trynum=$1;              # How many times does it try addrconf?
                             next; };                 #    sample: 500
    /^sd=(\S+)/       && do {$seqdebugopt=$1;         # sequence debug options
                             next; };                 #    sample: qR
    seqERROR("Unknown sequence option '$_'");
}

#----- test condition
$IF=Link0;                 # network interface
seqSetDADParam($seqdebugopt);
$term_handler = \&termination; # set termination handler
$retry_check = 3;          # retry count to check if address is configured

#----- set %pktdesc
seqSetPktdesc();

#----- initialize NUT
vLog("*** Target initialization phase ***");
seqInitNUT($IF, $howto_initNUT);

#----- start Capturing
vLog("*** Target testing phase ***");
vCapture($IF);


for($i=1; $i<$trynum+1; $i++) {
    vLogHTML("<BR>****** count=$i/$trynum test begin.<BR>");

    #----- Configure Address on NUT
    seqConfAddrNUT($IF);

    #----- wait a DAD NS comming from NUT
    %ret=seqWaitDADNSfromNUT($IF);

    #----- if received frame is a DAD NS
    if( $ret{status} == 0) {
	vLog("TN received the DAD NS sends from NUT.");
	#----- wait for NUT to finish DAD
	vSleep($DAD::RetransTimerSec, 
	       "Wait for NUT to finish DAD. ($DAD::RetransTimerSec [sec])");
    }elsif( $ret{status} == 1 ) {
	#----- timeout
	vLog("TN received no DAD NS sends from NUT. It seems that NUT doesn't perform DAD process.");
    }else{
	#----- error
	seqERROR(vErrmsg(%ret)); #exit
    }

    #----- check if NUT's address is configured
    #seqWaitNUTbeReady();
    vSleep($DAD::RetransTimerSec);

    $j = 0;
    while (($caret=seqCheckNUTAddrConfigured($IF)) ne TRUE && $j++ < $retry_check) {
	vLogHTML("address check retry count=$j <BR>");
    }

    if ($caret eq TRUE) {
	vLogHTML("count=$i/$trynum: The address is configured.<BR>");
    }else{
	vLogHTML("count=$i/$trynum: The address is not configured.<BR>");
	seqNG();
    }

    #----- wait address lifetime expiry if addrconf=ra
    @vltlist = (0,60);

    if($DAD::howto_addrconf eq 'ra') {
	## wait for address lifetime expiry
	vLog("Wait for NUT's address Lifetime expiry.");
	($total_waitsec, $vlt_index) = seqProbeVLT($IF, 4, @vltlist);
	if ($vlt_index < 0) {
	    vLog("NUT's address Lifetime does not expire.");
	    seqNG();
	}else{
	    vLog("NUT's address Lifetime expired: total_waitsec=$total_waitsec [sec]");
	}
    }

}

seqOK();

### termination sequence after vLog OK,NG
### set as $term_handler=\&termination;
sub termination() {
}

#end
########################################################################
__END__
