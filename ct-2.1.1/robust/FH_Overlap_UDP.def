//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $Name: REL_2_1_1 $
// 
// $TAHI: ct/robust/FH_Overlap_UDP.def,v 1.2 2001/10/19 08:28:45 akisada Exp $
//

#define _UDP_NAME(_pNAME)	_UDP_##_pNAME
#define _HDR_UDP_NAME(_pNAME)	_HDR_UDP_##_pNAME

//
// common part
//
////////////////////////////////////////////////////////////////

Hdr_UDP _HDR_UDP_NAME(udp_request) {
	SourcePort      = 33333;
	DestinationPort = 7;
}

Hdr_UDP _HDR_UDP_NAME(udp_reply) {
	SourcePort      = 7;
	DestinationPort = 33333;
}

Payload echo_data {
	data = repeat(0x00, 1024);
}

Payload echo_data_1 {
	data = repeat(0xFF, 1024);
}

Payload echo_data_2 {
	data = repeat(0x00, 512);
	data = repeat(0xFF, 512);
}

//
// udp_request
//
////////////////////////////////////////////////////////////////

FEM_hdr_ipv6_exth(
	udp_request,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(udp_request);
		upper  = _UDP_NAME(udp_request);
	}
)

Upp_UDP _UDP_NAME(udp_request) {
	header  = _HDR_UDP_NAME(udp_request);
	payload = echo_data;
}

//
// udp_request_1
//
////////////////////////////////////////////////////////////////

FEM_hdr_ipv6_exth(
	udp_request_1,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(udp_request_1);
		upper  = _UDP_NAME(udp_request_1);
	}
)

Upp_UDP _UDP_NAME(udp_request_1) {
	header  = _HDR_UDP_NAME(udp_request);
	payload = echo_data_1;
}

//
// udp_reply
//
////////////////////////////////////////////////////////////////

FEM_hdr_ipv6_exth(
	udp_reply,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		header = _HDR_IPV6_NAME(udp_reply);
		upper  = _UDP_NAME(udp_reply);
	}
)

Upp_UDP _UDP_NAME(udp_reply) {
	header  = _HDR_UDP_NAME(udp_reply);
	payload = echo_data;
}

//
// udp_bad_reply
//
////////////////////////////////////////////////////////////////

FEM_hdr_ipv6_exth(
	udp_bad_reply,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		header = _HDR_IPV6_NAME(udp_bad_reply);
		upper  = _UDP_NAME(udp_bad_reply);
	}
)

Upp_UDP _UDP_NAME(udp_bad_reply) {
	header  = _HDR_UDP_NAME(udp_reply);
	payload = echo_data_2;
}

//
// udp_request_frag_1st
//
////////////////////////////////////////////////////////////////

FEM_hdr_ipv6_exth(
	udp_request_frag_1st,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(udp_request_frag_1st);
		exthdr = frag_1st;
		upper  = payload_1st;
	}
)

Hdr_Fragment frag_1st {
	NextHeader     = 17;         // UDP
	FragmentOffset = 0;
	MFlag          = 1;
	Identification = FRAG_ID;
}

Payload payload_1st {
	data = substr(_PACKET_IPV6_NAME(udp_request), 40, 520);    // 8 + 512
}

//
// udp_request_frag_2nd
//
////////////////////////////////////////////////////////////////

FEM_hdr_ipv6_exth(
	udp_request_frag_2nd,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(udp_request_frag_2nd);
		exthdr = frag_2nd;
		upper  = payload_2nd;
	}
)

Hdr_Fragment frag_2nd {
	NextHeader     = 17;         // UDP
	FragmentOffset = 65;         // 520 / 8
	MFlag          = 0;
	Identification = FRAG_ID;
}

Payload payload_2nd {
	data = substr(_PACKET_IPV6_NAME(udp_request), 560, 512);
}

//
// udp_request_bad_frag_2nd
//
////////////////////////////////////////////////////////////////

FEM_hdr_ipv6_exth(
	udp_request_bad_frag_2nd,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(udp_request_bad_frag_2nd);
		exthdr = bad_frag_2nd;
		upper  = bad_payload_2nd;
	}
)

Hdr_Fragment bad_frag_2nd {
	NextHeader     = 17;         // UDP
	FragmentOffset = 1;          // 8 / 8
	MFlag          = 0;
	Identification = FRAG_ID;
}

Payload bad_payload_2nd {
	data = substr(_PACKET_IPV6_NAME(udp_request_1), 48, 1024);
}

//
// multicast_ns
//
////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	multicast_ns,
	_HETHER_nut2tnsolnode,
	{
		_SRC(oneof(nutv6(), nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN, "Link0")));
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
		option = _SLLOPT_nut;
	}
)

//
// unicast_ns
//
////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	unicast_ns,
	_HETHER_nut2tn,
	{
		_SRC(oneof(nutv6(), nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN, "Link0")));
		_DST(tnv6());
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
		option = _SLLOPT_nut;
	}
)

//
// na
//
////////////////////////////////////////////////////////////////

FEM_icmp6_na(
	na,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		SFlag = 1;
		OFlag = 1;
		TargetAddress = tnv6();
		option = _TLLOPT_tn;
	}
)

//
// port_unreachable
//
////////////////////////////////////////////////////////////////

FEM_icmp6_destination_unreachable(
	port_unreachable,
	_HETHER_nut2tn,
	{
		_SRC(oneof(nutv6(), nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN, "Link0")));
		_DST(tnv6());
	},
	{
		Code = 4;
		payload = any;
}
)
