#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/natpt/rfc2765_3.1_trafficclass.seq,v 1.4 2001/10/11 01:41:47 akisada Exp $
#

BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $'; }
use V6evalTool;
use natpt;

checkNUT(router);

# Interface 
$IF="Link0";
$IF1="Link1";
vCapture($IF);
vCapture($IF1);

%pktdesc = (
  ipv4_tos0            => 'Send IPv4 Echo Request (TOS = 00000000)',
  ipv4_tos15           => 'Send IPv4 Echo Request (TOS = 11110000)',
  ipv4_tos63           => 'Send IPv4 Echo Request (TOS = 11111100)',
  ipv4_tos255          => 'Send IPv4 Echo Request (TOS = 11111111)',
  ipv6_trafficclass0   => 'Recv IPv6 Echo Request (Traffic Class = 00000000)',
  ipv6_trafficclass15  => 'Recv IPv6 Echo Request (Traffic Class = 11110000)',
  ipv6_trafficclass63  => 'Recv IPv6 Echo Request (Traffic Class = 11111100)',
  ipv6_trafficclass255 => 'Recv IPv6 Echo Request (Traffic Class = 11111111)',

  arp_nut2tn_request => 'Recv ARP request on Link1 (TN IPv4addr)',
  arp_tn2nut_reply   => 'Send ARP reply on Link1 (TN IPv4addr)',
  ns_nut2tn_siit0    => 'Recv Neighbor Solicitation on Link0 (SIIT V6addr)',
  na_tn2nut_siit0    => 'Send Neighbor Advertisement on Link0 (SIIT V6addr)',
);

$result = $V6evalTool::exitPass;
$result += send_recv($IF1, 'ipv4_tos0', $IF, 'ipv6_trafficclass0');
$result += send_recv($IF1, 'ipv4_tos15', $IF, 'ipv6_trafficclass15');
$result += send_recv($IF1, 'ipv4_tos63', $IF, 'ipv6_trafficclass63');
$result += send_recv($IF1, 'ipv4_tos255', $IF, 'ipv6_trafficclass255');
if($result == $V6evalTool::exitPass) {
    vLogHTML("<H3>OK</H3>");
    exit $V6evalTool::exitPass;
}

$result = $V6evalTool::exitWarn;
$result += send_recv($IF1, 'ipv4_tos0', $IF, 'ipv6_trafficclass0');
$result += send_recv($IF1, 'ipv4_tos15', $IF, 'ipv6_trafficclass0');
$result += send_recv($IF1, 'ipv4_tos63', $IF, 'ipv6_trafficclass0');
$result += send_recv($IF1, 'ipv4_tos255', $IF, 'ipv6_trafficclass0'); 
if($result == $V6evalTool::exitWarn) {
    vLogHTML("<FONT COLOR=#00FF00><H3>WARN</H3></FONT>");
    exit $V6evalTool::exitWarn;
}

error:
vLogHTML("<FONT COLOR=#FF0000><H3>NG</H3></FONT>");
exit $V6evalTool::exitFail;

########################################################################
__END__

=head1 NAME

	rfc2765_3.1_trafficclass.seq - Verify IPv6 <-> IPv4 header 
        translation in accordance with RFC2765 [SIIT]

=head1 TARGET

	Router

=head1 SYNOPSIS

	rfc2765_3.1_trafficclass.seq [-tooloption ...] 
        -p rfc2765_3.1_trafficclass.def

=head1 INITIALIZATION

=begin html
<PRE>
	Before this test starts, run <A HREF="./initialize.html">initialize.seq</A>.
</PRE>

=end html

=head1 TEST PROCEDURE

	This test verifies that NUT translates IPv4 TOS 
        to IPv6 Traffic Class
	
	Network Topology

	Link0
	--------------------------
	    |               |
	   TN              NUT
	    |               |
	--------------------------
	Link1

	TN -- (Link0) -- NUT        NUT -- (Link1) -- TN
	
	---------------------      ------------------------

	1.[1-4]
                                   <===================
	ICMPv4 Echo request
                IPv4 Header
			src address : TN LINK1 IPv4 address
			dst address : TN LINK0 IPv4 address
                        Don't Fragment = 1
                        More fragments = 0
                        Offset = 0
                        TOS = 0,15,63,255 (4 tests)
                ICMPv4 echo request

	2.[1-4]
	<<JUDGMENT>>
	<===================
	ICMPv6 Echo Request
		IPv6 Header
			src address : TN LINK1 IPv4 embedded IPv6 address
			dst address : TN LINK0 IPv4 embedded IPv6 address
                        Traffic Class = 0,15,63,255 or 0,0,0,0
                ICMPv6 echo request
         
=head1 JUDGMENT

	<< PASS >>
		TN (Link0) receive four ICMPv6 echo requests, 
                with Traffic class same as IPv4 TOS field.
		
	<< WARN >>
		TN (Link0) receive four ICMPv6 echo requests, 
                with Traffic class = 0.
		
	<< FAIL >>	
		TN (Link0) does not receive four ICMPv6 echo requests, 
                with Traffic class = 0 or same as IPv4 TOS field.


=head1 NOTE

=head1 REFERENCE

B<RFC2765>

3.1.  Translating IPv4 Headers into IPv6 Headers

         Traffic Class:
                 By default, copied from IP Type Of Service and
                 Precedence field (all 8 bits are copied).  According
                 to [DIFFSERV] the semantics of the bits are identical
                 in IPv4 and IPv6.  However, in some IPv4 environments
                 these fields might be used with the old semantics of
                 "Type Of Service and Precedence".  An implementation
                 of a translator SHOULD provide the ability to ignore
                 the IPv4 "TOS" and always set the IPv6 traffic class
                 to zero.

=head1 SEE ALSO

	perldoc V6evalTool

=cut
