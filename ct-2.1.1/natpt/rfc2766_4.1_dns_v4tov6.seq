#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/natpt/rfc2766_4.1_dns_v4tov6.seq,v 1.3 2001/10/11 01:41:48 akisada Exp $
#

BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $'; }
use V6evalTool;
use natpt;

checkNUT(router);

# Interface 
$IF="Link0";
$IF1="Link1";
vCapture($IF);
vCapture($IF1);

%pktdesc = (
  arp_nut2tn_request => 'Recv ARP request on Link1 (TN IPv4addr)',
  arp_tn2nut_reply   => 'Send ARP reply on Link1 (TN IPv4addr)',
  ns_nut2tn_natpt0   => 'Recv Neighbor Solicitation on Link0 (NATPT V6addr)',
  na_tn2nut_natpt0   => 'Send Neighbor Advertisement on Link0 (NATPT V6addr)',
);

$result = $V6evalTool::exitPass;

$result += send_recv($IF1, 'ipv4_dns_query_ptr', 
		     $IF, 'ipv6_dns_query_ptr_trans');
$result += send_recv($IF1, 'ipv4_dns_query_ptr_response', 
		     $IF, 'ipv6_dns_query_ptr_trans_response');
$result += send_recv($IF1, 'ipv4_dns_query_ptr_response_comp', 
		     $IF, 'ipv6_dns_query_ptr_trans_response');
$result += send_recv($IF1, 'ipv4_dns_query_a', 
		     $IF, 'ipv6_dns_query_a_trans');
$result += send_recv($IF1, 'ipv4_dns_query_a_response', 
		     $IF, 'ipv6_dns_query_a_trans_response');
$result += send_recv($IF1, 'ipv4_dns_query_a_response_comp', 
		     $IF, 'ipv6_dns_query_a_trans_response');

if($result == $V6evalTool::exitPass) {
    vLogHTML("<H3>OK</H3>");
    exit $V6evalTool::exitPass;
}

error:
vLogHTML("<FONT COLOR=#FF0000><H3>NG</H3></FONT>");
exit $V6evalTool::exitFail;

########################################################################
__END__

=head1 NAME

	rfc2766_4.1_dns_v4tov6.seq - Verify IPv6 <-> IPv4 header 
        translation in accordance with RFC2766 [NATPT]

=head1 TARGET

	Router

=head1 SYNOPSIS

	rfc2766_4.1_dns_v4tov6.seq [-tooloption ...] 
        -p rfc2766_4.1_dns_v4tov6.def

=head1 INITIALIZATION

=begin html
<PRE>
	Before this test starts, run <A HREF="./initialize_natpt.html">initialize_natpt.seq</A>.
</PRE>

=end html

=head1 TEST PROCEDURE

	This test verifies that NUT adjusts header checksum for TCP/UDP 
        packets.
	
	Network Topology

	Link0
	--------------------------
	    |               |
	   TN              NUT
	    |               |
	--------------------------
	Link1

	TN -- (Link0) -- NUT        NUT -- (Link1) -- TN
	
	---------------------      ------------------------

=begin html <HR WIDTH=80%>

	1.1.
                                   <===================
	IPv4 UDP packet
                IPv4 Header
			src address : TN LINK1 IPv4 address
			dst address : TN LINK0 IPv4 address
                        DF = 1
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xABCD
                        Flags = 0x0100 (Standard query)
                        Questions: 1
			Answer RRs: 0
			Authority RRs: 0
			Additional RRs: 0
		Queries
			1.0.168.192.in-addr.arpa: type PTR, class inet
				Name: 1.1.168.192.in-addr.arpa
				Type: domain name pointer
				Class: inet
	1.2.
	<<JUDGMENT>>
	<===================
	IPv6 UDP packet
		IPv6 Header
			src address : TN LINK1 IPv4 embedded IPv6 address
			dst address : TN LINK0 IPv4 embedded IPv6 address
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xAAAA
                        Flags = 0x0100 (Standard query)
                        Questions: 1
			Answer RRs: 0
			Authority RRs: 0
			Additional RRs: 0
		Queries
			1.0.168.192.in-addr.arpa: type PTR, class inet
				Name: 1.1.168.192.in-addr.arpa
				Type: domain name pointer
				Class: inet

=begin html <HR WIDTH=80%>

	2.1.
                                   <===================
	IPv4 UDP packet
                IPv4 Header
			src address : TN LINK1 IPv4 address
			dst address : TN LINK0 IPv4 address
                        DF = 1
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xABCD
                        Flags = 0x8580 (Standard query response, No error)
                        Questions: 1
			Answer RRs: 1
			Authority RRs: 2
			Additional RRs: 2
		Queries
			1.0.168.192.in-addr.arpa: type PTR, class inet
		Answers
			1.0.168.192.in-addr.arpa: type PTR, class inet, ptr ns1.ericsson.se
		Authoritative nameservers
			0.168.192.in-addr.arpa: type NS, class inet, ns ns1.ericsson.se
			0.168.192.in-addr.arpa: type NS, class inet, ns ns2.ericsson.se
		Additional records
			ns1.ericsson.se: type A, class inet, addr 192.168.0.1
			ns2.ericsson.se: type A, class inet, addr 192.168.0.2
	2.2.
	<<JUDGMENT>>
	<===================
	IPv6 UDP packet
		IPv6 Header
			src address : TN LINK1 IPv4 embedded IPv6 address
			dst address : TN LINK0 IPv4 embedded IPv6 address
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xAAAA
                        Flags = 0x0100 (Standard query)
                        Questions = 1
			Answer RRs: 1
			Authority RRs: 2
			Additional RRs: 2
		Queries
			1.1.168.192.in-addr.arpa: type PTR, class inet
				Name: 1.1.168.192.in-addr.arpa
				Type: domain name pointer
				Class: inet

=begin html <HR WIDTH=80%>

	3.1.
                                   <===================
	IPv4 UDP packet
                IPv4 Header
			src address : TN LINK1 IPv4 address
			dst address : TN LINK0 IPv4 address
                        DF = 1
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xABCD
                        Flags = 0x0100 (Standard query)
                        Questions: 1
			Answer RRs: 0
			Authority RRs: 0
			Additional RRs: 0
		Queries
			ric.ericsson.se: type A, class inet
				Name: ric.ericsson.se
				Type: Host address
				Class: inet
	3.2.
	<<JUDGMENT>>
	<===================
	IPv6 UDP packet
		IPv6 Header
			src address : TN LINK1 IPv4 embedded IPv6 address
			dst address : TN LINK0 IPv4 embedded IPv6 address
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xAAAA
                        Flags = 0x0100 (Standard query)
                        Questions: 1
			Answer RRs: 0
			Authority RRs: 0
			Additional RRs: 0
		Queries
			1.0.168.192.in-addr.arpa: type PTR, class inet
				Name: 1.1.168.192.in-addr.arpa
				Type: domain name pointer
				Class: inet

=begin html <HR WIDTH=80%>

	4.1.
                                   <===================
	IPv4 UDP packet
                IPv4 Header
			src address : TN LINK1 IPv4 address
			dst address : TN LINK0 IPv4 address
                        DF = 1
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xABCD
                        Flags = 0x8580 (Standard query response, No error)
                        Questions: 1
			Answer RRs: 1
			Authority RRs: 2
			Additional RRs: 2
		Queries
			ric.ericsson.se: type A, class inet
		Answers
			ric.ericsson.se: type A, class inet, addr 192.168.0.3
		Authoritative nameservers
			ericsson.se: type NS, class inet, ns ns1.ericsson.se
			ericsson.se: type NS, class inet, ns ns2.ericsson.se
		Additional records
			ns1.ericsson.se: type A, class inet, addr 192.168.0.1
			ns2.ericsson.se: type A, class inet, addr 192.168.0.2
	4.2.
	<<JUDGMENT>>
	<===================
	IPv6 UDP packet
		IPv6 Header
			src address : TN LINK1 IPv4 embedded IPv6 address
			dst address : TN LINK0 IPv4 embedded IPv6 address
                UDP packet
                        SourcePort = 1234;
                        DestinationPort = 53
                DNS query
			Transaction ID = 0xAAAA
                        Flags = 0x0100 (Standard query)
                        Questions = 1
			Answer RRs: 1
			Authority RRs: 2
			Additional RRs: 2
		Queries
			1.1.168.192.in-addr.arpa: type PTR, class inet
				Name: 1.1.168.192.in-addr.arpa
				Type: domain name pointer
				Class: inet

=head1 JUDGMENT

	<< PASS >>
		NUT translated (compressed or uncompressed) IPv4 DNS packages 
                to (compressed or uncompressed) IPv6 DNS packages.
                IPv4 "A" records are changed to IPv6 "AAAA" records, and 
                IPv4 "IN-ADDR.ARPA" to "IP6.INT".

	<< FAIL >>	
		NUT does not translate DNS packages properly.

=head1 NOTE

=head1 REFERENCE

B<RFC2766>

4.1 Use of DNS-ALG

   The DNS-ALG on the NAT-PT device
   would modify DNS Queries for A records going into the V6 domain as
   follows: (Note that a TCP/UDP DNS packet is recognised by the fact
   that its source or destination port number is 53)

      a) For Node Name to Node Address Query requests:  Change the Query
         type from "A" to "AAAA" or "A6".
      b) For Node address to Node name query requests:  Replace the
         string "IN-ADDR.ARPA" with the string "IP6.INT".  Replace the
         V4 address octets (in reverse order) preceding the string "IN-
         ADDR.ARPA" with the corresponding V6 address (if there exists a
         map) octets in reverse order.

   The TTL values on all DNS resource records (RRs) passing through
   NAT-PT SHOULD be set to 0 so that DNS servers/clients do not cache
   temporarily assigned RRs. Note, however, that due to some buggy DNS
   client implementations a value of 1 might in some cases work better.
   The TTL values should be left unchanged for statically mapped
   addresses.

=head1 SEE ALSO

	perldoc V6evalTool

=cut
