#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/natpt/rfc2765_4.2_icmpv6error.seq,v 1.3 2001/10/11 01:41:47 akisada Exp $
#

BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $'; }
use V6evalTool;
use natpt;

checkNUT(router);

# Interface 
$IF="Link0";
$IF1="Link1";
vCapture($IF);
vCapture($IF1);

%pktdesc = (
  icmpv6_unreach_0          => 'Send ICMPv6 (Type 1, Code 0)',
  icmpv6_unreach_1          => 'Send ICMPv6 (Type 1, Code 1)',
  icmpv6_unreach_2          => 'Send ICMPv6 (Type 1, Code 2)',
  icmpv6_unreach_3          => 'Send ICMPv6 (Type 1, Code 3)',
  icmpv6_unreach_4          => 'Send ICMPv6 (Type 1, Code 4)',
  icmpv6_packet_too_big1280 => 'Send ICMPv6 (Type 2, Code 0, MTU 1280)',
  icmpv6_time_exceeded      => 'Send ICMPv6 (Type 3, Code 0)',
  icmpv6_par_prob_0         => 'Send ICMPv6 (Type 4, Code 0, Pointer 0)',
  icmpv6_par_prob_4         => 'Send ICMPv6 (Type 4, Code 0, Pointer 4)',
  icmpv6_par_prob_6         => 'Send ICMPv6 (Type 4, Code 0, Pointer 6)',
  icmpv6_par_prob_7         => 'Send ICMPv6 (Type 4, Code 0, Pointer 7)',
  icmpv6_par_prob_8         => 'Send ICMPv6 (Type 4, Code 0, Pointer 8)',
  icmpv6_par_prob_24        => 'Send ICMPv6 (Type 4, Code 0, Pointer 24)',
  icmpv6_par_prob_notdef  => 'Send ICMPv6 (Type 4, Code 0, Pointer 1(notdef))',
  icmpv6_par_prob_protocol  => 'Send ICMPv6 (Type 4, Code 1)',
  icmpv4_unreach_1          => 'Recv ICMPv4 (Type 3, Code 1)',
  icmpv4_unreach_3          => 'Recv ICMPv4 (Type 3, Code 3)',
  icmpv4_unreach_10         => 'Recv ICMPv4 (Type 3, Code 10)',
  icmpv4_unreach_mtu1252    => 'Recv ICMPv4 (Type 3, Code 4, MTU 1252)',
  icmpv4_time_exceeded      => 'Recv ICMPv4 (Type 11, Code 0)',
  icmpv4_par_prob_0         => 'Recv ICMPv4 (Type 12, Code 0, Pointer 0)',
  icmpv4_par_prob_2         => 'Recv ICMPv4 (Type 12, Code 0, Pointer 2)',
  icmpv4_par_prob_9         => 'Recv ICMPv4 (Type 12, Code 0, Pointer 9)',
  icmpv4_par_prob_8         => 'Recv ICMPv4 (Type 12, Code 0, Pointer 8)',
  icmpv4_par_prob_12        => 'Recv ICMPv4 (Type 12, Code 0, Pointer 12)',
  icmpv4_par_prob_16        => 'Recv ICMPv4 (Type 12, Code 0, Pointer 16)',
  icmpv4_par_prob_notdef=> 'Recv ICMPv4 (Type 12, Code 0, Pointer -1(notdef))',
  icmpv4_unreach_proto      => 'Recv ICMPv4 (Type 3, Code 2)',

  arp_nut2tn_request => 'Recv ARP request on Link1 (TN IPv4addr)',
  arp_tn2nut_reply   => 'Send ARP reply on Link1 (TN IPv4addr)',
  ns_nut2tn_siit0    => 'Recv Neighbor Solicitation on Link0 (SIIT V6addr)',
  na_tn2nut_siit0    => 'Send Neighbor Advertisement on Link0 (SIIT V6addr)',
);

$result = $V6evalTool::exitPass;
$result += send_recv($IF, 'icmpv6_unreach_0', $IF1, 'icmpv4_unreach_1');
$result += send_recv($IF, 'icmpv6_unreach_1', $IF1, 'icmpv4_unreach_10');
$result += send_recv($IF, 'icmpv6_unreach_2', $IF1, 'icmpv4_unreach_1');
$result += send_recv($IF, 'icmpv6_unreach_3', $IF1, 'icmpv4_unreach_1');
$result += send_recv($IF, 'icmpv6_unreach_4', $IF1, 'icmpv4_unreach_3');
$result += send_recv($IF, 'icmpv6_packet_too_big1280', $IF1, 'icmpv4_unreach_mtu1252');
$result += send_recv($IF,'icmpv6_time_exceeded', $IF1, 'icmpv4_time_exceeded');
$result += send_recv($IF, 'icmpv6_par_prob_0', $IF1, 'icmpv4_par_prob_0');
$result += send_recv($IF, 'icmpv6_par_prob_4', $IF1, 'icmpv4_par_prob_2');
$result += send_recv($IF, 'icmpv6_par_prob_6', $IF1, 'icmpv4_par_prob_9');
$result += send_recv($IF, 'icmpv6_par_prob_7', $IF1, 'icmpv4_par_prob_8');
$result += send_recv($IF, 'icmpv6_par_prob_8', $IF1, 'icmpv4_par_prob_12');
$result += send_recv($IF, 'icmpv6_par_prob_24', $IF1, 'icmpv4_par_prob_16');
$result += send_recv($IF, 'icmpv6_par_prob_notdef', $IF1, 'icmpv4_par_prob_notdef');
$result += send_recv($IF, 'icmpv6_par_prob_protocol', $IF1, 'icmpv4_unreach_proto');

if($result == $V6evalTool::exitPass) {
    vLogHTML("<H3>OK</H3>");
    exit $V6evalTool::exitPass;
}

error:
vLogHTML("<FONT COLOR=#FF0000><H3>NG</H3></FONT>");
exit $V6evalTool::exitFail;

########################################################################
__END__

=head1 NAME

	rfc2765_3.3_icmpv4error.seq - Verify IPv6 <-> IPv4 header 
        translation in accordance with RFC2765 [SIIT]

=head1 TARGET

	Router

=head1 SYNOPSIS

	rfc2765_3.3_icmpv4error.seq [-tooloption ...] 
        -p rfc2765_3.3_icmpv4error.def

=head1 INITIALIZATION

=begin html
<PRE>
	Before this test starts, run <A HREF="./initialize.html">initialize.seq</A>.
</PRE>

=end html

=head1 TEST PROCEDURE

        This test verifies that NUT can translate ICMPv6 error messages
        in accordance to RFC2765.
	
	Network Topology

	Link0
	--------------------------
	    |               |
	   TN              NUT
	    |               |
	--------------------------
	Link1

	TN -- (Link0) -- NUT        NUT -- (Link1) -- TN
	
	---------------------      ------------------------

   ICMPv6 (Type 1, Code 0)             =>  ICMPv4 (Type 3, Code 1)
   ICMPv6 (Type 1, Code 1)             =>  ICMPv4 (Type 3, Code 10)
   ICMPv6 (Type 1, Code 2)             =>  ICMPv4 (Type 3, Code 1)
   ICMPv6 (Type 1, Code 3)             =>  ICMPv4 (Type 3, Code 1)
   ICMPv6 (Type 1, Code 4)             =>  ICMPv4 (Type 3, Code 3)
   ICMPv6 (Type 2, Code 0, MTU 1280)   =>  ICMPv4 (Type 3, Code 4, MTU 1252)
   ICMPv6 (Type 3, Code 0)             =>  ICMPv4 (Type 11, Code 0)
   ICMPv6 (Type 4, Code 0, Pointer 0)  <=  ICMPv4 (Type 12, Code 0, Pointer 0)
   ICMPv6 (Type 4, Code 0, Pointer 4)  <=  ICMPv4 (Type 12, Code 0, Pointer 2)
   ICMPv6 (Type 4, Code 0, Pointer 6)  <=  ICMPv4 (Type 12, Code 0, Pointer 9)
   ICMPv6 (Type 4, Code 0, Pointer 7)  <=  ICMPv4 (Type 12, Code 0, Pointer 8)
   ICMPv6 (Type 4, Code 0, Pointer 8)  <=  ICMPv4 (Type 12, Code 0, Pointer 12)
   ICMPv6 (Type 4, Code 0, Pointer 24) <=  ICMPv4 (Type 12, Code 0, Pointer 16)
   ICMPv6 (Type 4, Code 0, Pointer 1)  <=  ICMPv4 (Type 12, Code 0, Pointer -1)
   ICMPv6 (Type 4, Code 1)             =>  ICMPv4 (Type 3, Code 2)

=head1 JUDGMENT

	<< PASS >>
		NUT translates ICMPv6 error messages in accordance with
                RFC2765, including translating the inner IP-header.
		
	<< FAIL >>	
                NUT fails to translate ICMPv6 errors correctly, or doesn't
                drop untranslatable ICMPv6 error types. 

=head1 NOTE

=head1 REFERENCE

B<RFC2765>

4.2.  Translating ICMPv6 Headers into ICMPv4 Headers

   All ICMP messages that are to be translated require that the ICMP
   checksum field be updated as part of the translation since ICMPv6,
   unlike ICMPv4, has a pseudo-header checksum just like UDP and TCP.

   In addition all ICMP packets need to have the Type value translated
   and for ICMP error messages the included IP header also needs
   translation.

   The actions needed to translate various ICMPv6 messages are:

      ICMPv6 error messages:

        Destination Unreachable (Type 1)
           Set the Type field to 3.  Translate the code field as
           follows:
              Code 0 (no route to destination):
                     Set Code to 1 (host unreachable).

              Code 1 (communication with destination administratively
                     prohibited):
                     Set Code to 10 (communication with destination host
                     administratively prohibited).

              Code 2 (beyond scope of source address):
                     Set Code to 1 (host unreachable).  Note that this
                     error is very unlikely since the IPv4-translatable
                     source address is considered to have global scope.

              Code 3 (address unreachable):
                     Set Code to 1 (host unreachable).

              Code 4 (port unreachable):
                     Set Code to 3 (port unreachable).

        Packet Too Big (Type 2)
           Translate to an ICMPv4 Destination Unreachable with code 4.
           The MTU field needs to be adjusted for the difference between
           the IPv4 and IPv6 header sizes taking into account whether or
           not the packet in error includes a Fragment header.

        Time Exceeded (Type 3)
           Set the Type to 11.  The Code field is unchanged.

        Parameter Problem (Type 4)
           If the Code is 1 translate this to an ICMPv4 protocol
           unreachable (Type 3, Code 2).  Otherwise set the Type to 12
           and the Code to zero.  The Pointer needs to be updated to
           point to the corresponding field in the translated include IP
           header.

        Unknown error messages
           Silently drop.


B<http://www.cs.washington.edu/research/networking/napt/reports/usenix98/>

A.4 Translating ICMPv6 to ICMPv4

     Parameter Problem (Type 4): 
     If the Code is 2 then set Type to 12, Code to 0, and Pointer to -1. 
     If the Code is 1 translate this to an ICMPv4 protocol unreachable
     (Type 3, Code 2) message.
     If the Code is 0 then set the Type to 12, the Code to 0, and
     translate the Pointer values as follows:
     0-to-0, 4-to-2, 7-to-8, 6-to-9, 8-to-12, 24-to-16, and for all
     other ICMPv6 Pointer values set the ICMPv4 Pointer value to -1.

=head1 SEE ALSO

	perldoc V6evalTool

=cut
