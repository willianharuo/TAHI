#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/natpt/rfc2766_ping.seq,v 1.4 2001/10/11 01:41:48 akisada Exp $
#

BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $'; }
use V6evalTool;
use natpt;

checkNUT(router);

# Interface 
$IF="Link0";
$IF1="Link1";
vCapture($IF);
vCapture($IF1);

%pktdesc = (
  arp_nut2tn_request => 'Recv ARP request on Link1 (TN IPv4addr)',
  arp_tn2nut_reply   => 'Send ARP reply on Link1 (TN IPv4addr)',
  ns_nut2tn_natpt0   => 'Recv Neighbor Solicitation on Link0 (NATPT V6addr)',
  na_tn2nut_natpt0   => 'Send Neighbor Advertisement on Link0 (NATPT V6addr)',
);

$result = $V6evalTool::exitPass;
$result += send_recv($IF, 'echo_request_tn2nut_natpt', 
		     $IF1, 'echo_request_v4_nut2tn_df');
$result += send_recv($IF1, 'echo_reply_v4_tn2nut_df', 
		     $IF, 'echo_reply_nut2tn_natpt');
$result += send_recv($IF, 'echo_request_tn2nut_natpt_frag', 
		     $IF1, 'echo_request_v4_nut2tn');
$result += send_recv($IF1, 'echo_reply_v4_tn2nut', 
		     $IF, 'echo_reply_nut2tn_natpt_frag');

if($result == $V6evalTool::exitPass) {
    vLogHTML("<H3>OK</H3>");
    exit $V6evalTool::exitPass;
}

error:
vLogHTML("<FONT COLOR=#FF0000><H3>NG</H3></FONT>");
exit $V6evalTool::exitFail;

########################################################################
__END__

=head1 NAME

	rfc2766_ping.seq - Verify IPv6 <-> IPv4 header translation in 
        accordance with RFC2766 [NATPT]

=head1 TARGET

	Router

=head1 SYNOPSIS

	rfc2766_ping.seq [-tooloption ...] -p rfc2766_ping.def

=head1 INITIALIZATION

=begin html
<PRE>
	Before this test starts, run <A HREF="./initialize_natpt.html">initialize_natpt.seq</A>.
</PRE>

=end html

=head1 TEST PROCEDURE

	This test verifies that NUT translates between IPv6 (no fragment hdr) 
        and IPv4 (DF=1). It also tests ICMPv6 echo <-> ICMPv4 echo 
        translation.
	
	Network Topology

	Link0
	--------------------------
	    |               |
	   TN              NUT
	    |               |
	--------------------------
	Link1

	TN -- (Link0) -- NUT        NUT -- (Link1) -- TN
	
	---------------------      ------------------------

=begin html <HR WIDTH=80%>

	1.1
	===================>
	ICMPv6 Echo Request
		IPv6 Header
			src address : TN LINK0 IPv4 embedded IPv6 address
			dst address : TN LINK1 IPv4 embedded IPv6 address
                ICMPv6 echo request

	1.2
	<<JUDGMENT>>
                                    ===================>
	ICMPv4 Echo request
                IPv4 Header
			src address : TN LINK0 IPv4 address
			dst address : TN LINK1 IPv4 address
                        Don't Fragment = 1
                        More fragments = 0
                ICMPv4 echo request

=begin html <HR WIDTH=80%>

	2.1
                                    <===================
	ICMPv4 Echo Reply
		IPv4 Header
			src address : TN LINK1 IPv4 address
			dst address : TN LINK0 IPv4 address
                        Don't Fragment = 1
                        More fragments = 0
                ICMPv4 echo reply

	2.2
	<<JUDGMENT>>
	<===================
	ICMPv6 Echo Reply
		IPv6 Header
			src address : TN LINK1 IPv4 embedded IPv6 address
			dst address : TN LINK0 IPv4 embedded IPv6 address
                        FlowLabel = 0
                ICMPv6 echo reply

=begin html <HR WIDTH=80%>

	3.1
	===================>
	ICMPv6 Echo Request
		IPv6 Header
			src address : TN LINK0 IPv4 embedded IPv6 address
			dst address : TN LINK1 IPv4 embedded IPv6 address
                Fragment Header
                        More fragments = 0
                ICMPv6 echo request

	3.2
	<<JUDGMENT>>
                                    ===================>
	ICMPv4 Echo request
                IPv4 Header
			src address : TN LINK0 IPv4 address
			dst address : TN LINK1 IPv4 address
                        Don't Fragment = 0
                        More fragments = 0
                ICMPv4 echo request

=begin html <HR WIDTH=80%>

	4.1
                                    <===================
	ICMPv4 Echo Reply
		IPv4 Header
			src address : TN LINK1 IPv4 address
			dst address : TN LINK0 IPv4 address
                        Don't Fragment = 0
                        More fragments = 0
                ICMPv4 echo reply

	4.2
	<<JUDGMENT>>
	<===================
	ICMPv6 Echo Reply
		IPv6 Header
			src address : TN LINK1 IPv4 embedded IPv6 address
			dst address : TN LINK0 IPv4 embedded IPv6 address
                Fragment Header
                        More fragments = 0
                ICMPv6 echo reply

=head1 JUDGMENT

	<< PASS >>
		TN (Link1) received ICMPv4 echo request, 
                with DF=1 in IPv4 header.
		TN (Link0) received ICMPv6 echo reply, 
                with no fragment header after IPv6 header.
                TN (Link1) received ICMPv4 echo request, 
                with DF=0 in IPv4 header.
		TN (Link0) received ICMPv6 echo reply, 
                with a fragment header after IPv6 header.


	<< FAIL >>	
		NUT did not translate between ICMPv6 echo and ICMPv4 echo, 
                or NUT did not translate between IPv6 fragment header 
                and IPv4 DF option.


=head1 NOTE

=head1 REFERENCE

B<RFC2766>

5.1 Translating IPv4 headers to IPv6 headers

   This is done exactly the same as in SIIT apart from the following
   fields:

      Source Address:
         The low-order 32 bits is the IPv4 source address. The high-
         order 96 bits is the designated PREFIX for all v4
         communications. Addresses using this PREFIX will be routed
         to the NAT-PT gateway (PREFIX::/96)

      Destination Address:
         NAT-PT retains a mapping between the IPv4 destination
         address and the IPv6 address of the destination node. The
         IPv4 destination address is replaced by the IPv6 address
         retained in that mapping.

5.2 Translating IPv6 headers to IPv4 headers

   This is done exactly the same as in SIIT apart from the Source
   Address which should be determined as follows:

      Source Address:
         The NAT-PT retains a mapping between the IPv6 source address
         and an IPv4 address from the pool of IPv4 addresses
         available. The IPv6 source address is replaced by the IPv4
         address retained in that mapping.

      Destination Address:
         IPv6 packets that are translated have a destination address
         of the form PREFIX::IPv4/96. Thus the low-order 32 bits of
         the IPv6 destination address is copied to the IPv4
         destination address.


=head1 SEE ALSO

	perldoc V6evalTool

=cut
