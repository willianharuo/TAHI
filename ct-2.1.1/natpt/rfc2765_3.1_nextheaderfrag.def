//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/natpt/rfc2765_3.1_nextheaderfrag.def,v 1.3 2001/10/11 01:41:46 akisada Exp $
//

#include "natpt.def"

#define IPv4_protocol(_pNAME, _pID, _pPROTOCOL, _pPAYLOAD) \
FEM_hdr_ipv4_exth( \
        ipv4_ ## _pNAME, \
	_HETHER_tn2nut, \
	{ \
		_SRC(TN_LINK1_V4_ADDRESS); \
		_DST(TN_LINK0_V4_ADDRESS); \
                Identifier = _pID; \
                Protocol = _pPROTOCOL; \
	}, \
	{  \
	        header = _HDR_IPV4_ipv4_ ## _pNAME; \
		upper = _pPAYLOAD; \
	} \
)

#define IPv6_protocol(_pNAME, _pID, _pPROTOCOL, _pPAYLOAD) \
FEM_hdr_ipv6_exth( \
        ipv6_nofrag_ ## _pNAME, \
	_HETHER_nut2tn, \
        { \
		_SRC(TN_LINK1_SIIT_ADDRESS); \
		_DST(TN_LINK0_SIIT_ADDRESS); \
                NextHeader = _pPROTOCOL; \
        }, \
	{ \
	        header = _HDR_IPV6_NAME(ipv6_nofrag_ ## _pNAME); \
		upper = _pPAYLOAD; \
	} \
)

#define IPv6_fragment(_pNAME, _pID, _pPROTOCOL, _pPAYLOAD) \
FEM_fragment( \
        ipv6_ ## _pNAME, \
	_HETHER_nut2tn, \
        { \
		_SRC(TN_LINK1_SIIT_ADDRESS); \
		_DST(TN_LINK0_SIIT_ADDRESS); \
        }, \
	{  \
        	NextHeader = _pPROTOCOL; \
                Identification = _pID; \
	}, \
	{ \
        	data = right(_PACKET_IPV6_NAME(ipv6_nofrag_ ## _pNAME), 40); \
	} \
)

Payload MyPayload {
	data=repeat(0xff,64);
}
ICMPv4_EchoRequest MyEchoRequestv4 {
        Type = 8;   
	payload = MyPayload;
}
ICMPv6_EchoRequest MyEchoRequestv6 {
        Type = 128;   
	payload = MyPayload;
}
Hdr_UDP MyUDPHdr {
        SourcePort = 1234;
        DestinationPort = 5678;
}
Upp_UDP MyUDPPacket {
        header = MyUDPHdr;
	payload = MyPayload;
}
Hdr_TCP MyTCPHdr {
        SourcePort = 1234;
        DestinationPort = 5678;
}
Upp_TCP MyTCPPacket {
        header = MyTCPHdr;
        payload = MyPayload;
}

IPv4_protocol(icmp, 10000, 1, MyEchoRequestv4)
IPv6_protocol(icmp, 10000, 58, MyEchoRequestv6)
IPv6_fragment(icmp, 10000, 58, MyEchoRequestv6)

IPv4_protocol(udp, 20000, 17, MyUDPPacket)
IPv6_protocol(udp, 20000, 17, MyUDPPacket)
IPv6_fragment(udp, 20000, 17, MyUDPPacket)

IPv4_protocol(tcp, 30000, 6, MyTCPPacket)
IPv6_protocol(tcp, 30000, 6, MyTCPPacket)
IPv6_fragment(tcp, 30000, 6, MyTCPPacket)

IPv4_protocol(unknown, 40000, 255, MyPayload)
IPv6_protocol(unknown, 40000, 255, MyPayload)
IPv6_fragment(unknown, 40000, 255, MyPayload)
