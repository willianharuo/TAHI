#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/natpt/rfc2765_4.1_hoplimit.seq,v 1.4 2001/10/11 01:41:47 akisada Exp $
#

BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $'; }
use V6evalTool;
use natpt;

checkNUT(router);

# Interface 
$IF="Link0";
$IF1="Link1";
vCapture($IF);
vCapture($IF1);

%pktdesc = (
  icmp6_hoplimit_255 => 'Send IPv6 ICMP packet Hop Limit = 254',
  icmp4_ttl_254      => 'Recv IPv4 ICMP packet with TTL = 255',
  icmp6_hoplimit_64  => 'Send IPv6 ICMP packet Hop Limit = 63',
  icmp4_ttl_63       => 'Recv IPv4 ICMP packet with TTL = 64',
  icmp6_hoplimit_2   => 'Send IPv6 ICMP packet Hop Limit = 1',
  icmp4_ttl_1        => 'Recv IPv4 ICMP packet with TTL = 2',
  icmp6_hoplimit_1   => 'Send IPv6 ICMP packet Hop Limit = 1',
  icmp6_hoplimit_1_exceed => 'Recv IPv6 ICMP Time Exceeded (Hop Limit = 1)',

  arp_nut2tn_request => 'Recv ARP request on Link1 (TN IPv4addr)',
  arp_tn2nut_reply   => 'Send ARP reply on Link1 (TN IPv4addr)',
  ns_nut2tn_siit0    => 'Recv Neighbor Solicitation on Link0 (SIIT V6addr)',
  na_tn2nut_siit0    => 'Send Neighbor Advertisement on Link0 (SIIT V6addr)',
);

$result = $V6evalTool::exitPass;
$result += send_recv($IF, 'icmp6_hoplimit_255', $IF1, 'icmp4_ttl_254');
$result += send_recv($IF, 'icmp6_hoplimit_64', $IF1, 'icmp4_ttl_63');
$result += send_recv($IF, 'icmp6_hoplimit_2', $IF1, 'icmp4_ttl_1');
$result += send_recv($IF, 'icmp6_hoplimit_1', $IF, 'icmp6_hoplimit_1_exceed');

if($result == $V6evalTool::exitPass) {
    vLogHTML("<H3>OK</H3>");
    exit $V6evalTool::exitPass;
}

error:
vLogHTML("<FONT COLOR=#FF0000><H3>NG</H3></FONT>");
exit $V6evalTool::exitFail;

########################################################################
__END__

=head1 NAME

	rfc2765_4.1_hoplimit.seq - Verify IPv6 <-> IPv4 header 
        translation in accordance with RFC2765 [SIIT]

=head1 TARGET

	Router

=head1 SYNOPSIS

         rfc2765_4.1_hoplimit.seq [-tooloption ...] 
        -p rfc2765_3.1_hoplimit.def

=head1 INITIALIZATION

=begin html
<PRE>
	Before this test starts, run <A HREF="./initialize.html">initialize.seq</A>.
</PRE>

=end html

=head1 TEST PROCEDURE

	This test verifies that NUT properly translates Hop Limit - 1 to 
        TTL, or sends an ICMPv6 Time Exceeded.
	
	Network Topology

	Link0
	--------------------------
	    |               |
	   TN              NUT
	    |               |
	--------------------------
	Link1

	TN -- (Link0) -- NUT        NUT -- (Link1) -- TN
	
	---------------------      ------------------------

=begin html <HR WIDTH=80%>

	1.1.
	===================>
	ICMPv6 Echo Request
		IPv6 Header
			src address : TN LINK0 IPv4 embedded IPv6 address
			dst address : TN LINK1 IPv4 embedded IPv6 address
                        Hop Limit = 255
                ICMPv6 echo request
         
	1.2.
	<<JUDGMENT>>
                                   ===================>
	ICMPv4 Echo request
                IPv4 Header
			src address : TN LINK0 IPv4 address
			dst address : TN LINK1 IPv4 address
                        Don't Fragment = 1
                        TTL = 254
                ICMPv4 echo request

=begin html <HR WIDTH=80%>

	2.1.
	===================>
	ICMPv6 Echo Request
		IPv6 Header
			src address : TN LINK0 IPv4 embedded IPv6 address
			dst address : TN LINK1 IPv4 embedded IPv6 address
                        Hop Limit = 64
                ICMPv6 echo request
         
	2.2.
	<<JUDGMENT>>
                                   ===================>
	ICMPv4 Echo request
                IPv4 Header
			src address : TN LINK0 IPv4 address
			dst address : TN LINK1 IPv4 address
                        Don't Fragment = 1
                        TTL = 63
                ICMPv4 echo request

=begin html <HR WIDTH=80%>

	3.1.
	===================>
	ICMPv6 Echo Request
		IPv6 Header
			src address : TN LINK0 IPv4 embedded IPv6 address
			dst address : TN LINK1 IPv4 embedded IPv6 address
                        Hop Limit = 2
                ICMPv6 echo request
         
	3.2.
	<<JUDGMENT>>
                                   ===================>
	ICMPv4 Echo request
                IPv4 Header
			src address : TN LINK0 IPv4 address
			dst address : TN LINK1 IPv4 address
                        Don't Fragment = 1
                        TTL = 1
                ICMPv4 echo request

=begin html <HR WIDTH=80%>

	4.1.
	===================>
	ICMPv6 Echo Request
		IPv6 Header
			src address : TN LINK0 IPv4 embedded IPv6 address
			dst address : TN LINK1 IPv4 embedded IPv6 address
                        Hop Limit = 1
                ICMPv6 echo request
         
	4.2.
	<<JUDGMENT>>
	<===================
	ICMPv6 Time Exceeded
		IPv6 Header
			src address : TN LINK0 IPv4 embedded IPv6 address
			dst address : TN LINK1 IPv4 embedded IPv6 address
                ICMPv6 Time Exceeded
                        Type = 3
                        Code = 0 (hop limit exceeded in transit)
                        data = ICMPv6 Echo Request

=head1 JUDGMENT

	<< PASS >>
		NUT translates ICMPv6 with Hop Limit = 255, 64, 2 to 
                ICMPv4 with TTL = 254, 63, 1.
                NUT responds to ICMPv6 Echo Request with TTL = 1
                with an ICMPv6 Time Exceeded message.
		
	<< FAIL >>	
		NUT doesn't translate Hop Limit properly, or doesn't 
                respond with ICMPv6 Time Exceeded messages when 
                Hop Limit = 1 on incoming packages.

=head1 NOTE

=head1 REFERENCE

B<RFC2765>

4.1.  Translating IPv6 Headers into IPv4 Headers

   If there is no IPv6 Fragment header the IPv4 header fields are set as
   follows:

         Time to Live:
                 Hop Limit value copied from IPv6 header.  Since the
                 translator is a router, as part of forwarding the
                 packet it needs to decrement either the IPv6 Hop
                 Limit (before the translation) or the IPv4 TTL (after
                 the translation).  As part of decrementing the TTL or
                 Hop Limit the translator (as any router) needs to
                 check for zero and send the ICMPv4 or ICMPv6 "ttl
                 exceeded" error.

=head1 SEE ALSO

	perldoc V6evalTool

=cut
