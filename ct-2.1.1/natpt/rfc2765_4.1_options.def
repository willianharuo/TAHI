//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/natpt/rfc2765_4.1_options.def,v 1.3 2001/10/11 01:41:47 akisada Exp $
//

#include "natpt.def"

//////////////////////////////////////////////////////////////////////////
// IPv4 echo request
FEM_icmp4_echo_request( 
         ipv4_echo_df, 
         _HETHER_nut2tn, 
         { 
                _SRC(TN_LINK0_V4_ADDRESS); 
                _DST(TN_LINK1_V4_ADDRESS);
		DF = 1; 
         }, 
         { 
                 payload=ping_data; 
         } 
) 
FEM_icmp4_echo_request( 
         ipv4_echo, 
         _HETHER_nut2tn, 
         { 
                _SRC(TN_LINK0_V4_ADDRESS); 
                _DST(TN_LINK1_V4_ADDRESS);
         }, 
         { 
                 payload=ping_data; 
         } 
) 

//////////////////////////////////////////////////////////////////////////
// IPv6 echo request with option header
#define FEM_icmp6_echo_optionhdr(_pNAME, _pOPTIONHDR) \
FEM_icmp6_echo_request_exth( \
	_pNAME, \
	_HETHER_tn2nut, \
	{ \
		_SRC(TN_LINK0_SIIT_ADDRESS); \
		_DST(TN_LINK1_SIIT_ADDRESS); \
	}, \
	{ \
		header = _HDR_IPV6_NAME(_pNAME); \
		exthdr = _pOPTIONHDR; \
		upper = _ICMPV6_NAME(_pNAME); \
	}, \
	{ \
		payload=ping_data; \
	} \
) 

//////////////////////////////////////////////////////////////////////////
// IPv6 option headers
Hdr_HopByHop hopbyhop {
	option = repeat(0x1, 3);
	option = repeat(0x0, 3);
}
Hdr_Routing routing {
	RoutingType = 0;
	SegmentsLeft = 0;
	Address = v6("::");
}
Hdr_Routing routing_nut {
	RoutingType = 0;
	SegmentsLeft = 1;
	Address = TN_LINK1_SIIT_ADDRESS;
}
Hdr_Fragment fragment {
        NextHeader = 58; // ICMPv6
}
Hdr_Fragment fragment2 {
        NextHeader = 60; // Hdr_Destination
}
Hdr_Destination destination {
	option = repeat(0x1, 3);
	option = repeat(0x0, 3);
}

FEM_icmp6_echo_optionhdr(ipv6_hopbyhop, hopbyhop)
FEM_icmp6_echo_optionhdr(ipv6_routing, routing)
FEM_icmp6_echo_optionhdr(ipv6_fragment, fragment)
FEM_icmp6_echo_optionhdr(ipv6_destination, destination)

//////////////////////////////////////////////////////////////////////////
// Combined IPv6 option headers
FEM_icmp6_echo_request_exth(
	ipv6_combined,
	_HETHER_tn2nut,
	{
		_SRC(TN_LINK0_SIIT_ADDRESS);
		_DST(TN_LINK1_SIIT_ADDRESS);
	},
	{
		header = _HDR_IPV6_NAME(ipv6_combined);
		exthdr = hopbyhop;
		exthdr = routing;
		exthdr = fragment2;
		exthdr = destination;
		upper = _ICMPV6_NAME(ipv6_combined);
	},
	{
		payload=ping_data;
	}
) 

//////////////////////////////////////////////////////////////////////////
// IPv6 routing header, NUT is last step.
FEM_icmp6_echo_request_exth(
	ipv6_routing_nut,
	_HETHER_tn2nut,
	{
		_SRC(TN_LINK0_SIIT_ADDRESS);
		_DST(NUT_LINK0_GLOBAL_ADDRESS);
	},
	{
		header = _HDR_IPV6_NAME(ipv6_routing_nut);
		exthdr = routing_nut;
		upper = _ICMPV6_NAME(ipv6_routing_nut);
	},
	{
		payload=ping_data;
	}
) 
