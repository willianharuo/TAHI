//
// Copyright (C) 2002, 2003 Yokogawa Electric Corporation, 
// INTAP(Interoperability Technology Association for Information 
// Processing, Japan), IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $Name: REL_2_1_1 $
//
// $TAHI: ct/ipsec/HTR_E_SelectUpper.def,v 1.2 2003/05/05 17:45:24 ozoe Exp $

#define EALGO_FROM_HOST1        ealgo_null_hmacmd5_012
#define EALGO_TO_HOST1          ealgo_null_hmacmd5_012
#define EALGO_FROM_HOST2        ealgo_null_hmacmd5_012
#define EALGO_TO_HOST2          ealgo_null_hmacmd5_012

#include "./HTR_EG_common.def"

//======================================================================
//
// TCP Reset Request from HOST1
//

FEM_tcp6_reset(
        reset_request_from_host1,
        hether_router2nut,
        {
                _SRC(v6(IPSEC_HOST1_NET5_ADDR));
                _DST(v6(IPSEC_NUT_NET3_ADDR));
        },
        {
                header = _HDR_TCPV6_NAME(reset_request_from_host1);
                payload = payload_syn;
        }
)

Hdr_TCP _HDR_TCPV6_NAME(reset_request_from_host1) {
        SourcePort=10000;
        DestinationPort=7;
        SequenceNumber=SEQ;
        AcknowledgmentNumber=ACK;       //* default 0 *//
        RSTFlag=1;
//      option = opt_syn;
}

//======================================================================
//
// TCP Reset Request from HOST1 (Destination Port 23)
//

FEM_tcp6_reset(
        reset_request_from_host1_23,
        hether_router2nut,
        {
                _SRC(v6(IPSEC_HOST1_NET5_ADDR));
                _DST(v6(IPSEC_NUT_NET3_ADDR));
        },
        {
                header = _HDR_TCPV6_NAME(reset_request_from_host1_23);
                payload = payload_syn;
        }
)

Hdr_TCP _HDR_TCPV6_NAME(reset_request_from_host1_23) {
        SourcePort=10000;
        DestinationPort=23;
        SequenceNumber=SEQ;
        AcknowledgmentNumber=ACK;       //* default 0 *//
        RSTFlag=1;
//      option = opt_syn;
}

//======================================================================
//
// TCP Reset Request from HOST1 IPsec ESP
//

FEM_tcp6_reset_exth(
	reset_request_from_host1_esp,
	hether_router2nut,
	{
		_SRC(v6(IPSEC_HOST1_NET5_ADDR));
		_DST(v6(IPSEC_NUT_NET3_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(reset_request_from_host1_esp);
		exthdr = ESP_FROM_HOST1;
		upper = _TCPV6_NAME(reset_request_from_host1_esp);
	},
	{
		header = _HDR_TCPV6_NAME(reset_request_from_host1_esp);
		payload = payload_syn;
	}
)

Hdr_TCP _HDR_TCPV6_NAME(reset_request_from_host1_esp) {
	SourcePort=10000;
	DestinationPort=7;
	SequenceNumber=SEQ;
	AcknowledgmentNumber=0;
	RSTFlag=1;
#       Window=any;
	option = opt_syn;
}

//======================================================================
//
// TCP Reset Request from HOST2
//

FEM_tcp6_reset(
        reset_request_from_host2,
        hether_router2nut,
        {
                _SRC(v6(IPSEC_HOST2_NET5_ADDR));
                _DST(v6(IPSEC_NUT_NET3_ADDR));
        },
        {
                header = _HDR_TCPV6_NAME(reset_request_from_host2);
                payload = payload_syn;
        }
)

Hdr_TCP _HDR_TCPV6_NAME(reset_request_from_host2) {
        SourcePort=10000;
        DestinationPort=7;
        SequenceNumber=SEQ;
        AcknowledgmentNumber=ACK;       //* default 0 *//
        RSTFlag=1;
//      option = opt_syn;
}

//======================================================================
//
// TCP Reset Request from HOST2 (Destination Port 23)
//

FEM_tcp6_reset(
        reset_request_from_host2_23,
        hether_router2nut,
        {
                _SRC(v6(IPSEC_HOST2_NET5_ADDR));
                _DST(v6(IPSEC_NUT_NET3_ADDR));
        },
        {
                header = _HDR_TCPV6_NAME(reset_request_from_host2_23);
                payload = payload_syn;
        }
)

Hdr_TCP _HDR_TCPV6_NAME(reset_request_from_host2_23) {
        SourcePort=10000;
        DestinationPort=23;
        SequenceNumber=SEQ;
        AcknowledgmentNumber=ACK;       //* default 0 *//
        RSTFlag=1;
//      option = opt_syn;
}

//======================================================================
//
// TCP Reset Request from HOST2 IPsec ESP
//

FEM_tcp6_reset_exth(
	reset_request_from_host2_esp,
	hether_router2nut,   
	{
		_SRC(v6(IPSEC_HOST2_NET5_ADDR));
		_DST(v6(IPSEC_NUT_NET3_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(reset_request_from_host2_esp);
		exthdr = ESP_FROM_HOST2;
		upper = _TCPV6_NAME(reset_request_from_host2_esp);
	},
	{
		header = _HDR_TCPV6_NAME(reset_request_from_host2_esp);
		payload = payload_syn;
	}
)

Hdr_TCP _HDR_TCPV6_NAME(reset_request_from_host2_esp) {
	SourcePort=10000;
	DestinationPort=7;
	SequenceNumber=SEQ;
	AcknowledgmentNumber=0;
	RSTFlag=1;
#       Window=any;
	option = opt_syn;
}

