#!/usr/bin/perl
#
# Copyright (C) 2002, 2003 Yokogawa Electric Corporation, 
# INTAP(Interoperability Technology Association for Information 
# Processing, Japan), IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/ipsec/HTR_E_Out_Fragment_hmacsha2_256.seq,v 1.3 2003/06/05 13:42:47 ozoe Exp $
#
######################################################################
BEGIN {
    unshift(@INC, '../ipsec/');
    $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ ';
}

use V6evalTool;
use IPSEC;

%pktdesc = (
            ### TBD
);

$IF = Link0;

#----- check NUT type

ipsecCheckNUT(host);

#----- set SAD,SPD
vLogHTML("<FONT SIZE=3>*** Target initialization phase ***</FONT><BR>");

ipsecClearAll();

## HOST1 vs NUT
ipsecSetSAD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET3_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET5_ADDR}" ,
	"spi=0x1000" ,
	"mode=transport" ,
	"protocol=esp" ,
	"ealgo=null" ,
        "eauth=hmac-sha2-256" ,
        "eauthkey=TAHITEST89ABCDEFTAHITEST89ABCDEF"
	);

ipsecSetSPD(
	"src=$IPSEC::IPsecAddr{IPSEC_NUT_NET3_ADDR}" ,
	"dst=$IPSEC::IPsecAddr{IPSEC_HOST1_NET5_ADDR}" ,
	"upperspec=any" ,
	"direction=out" ,
	"protocol=esp-auth" ,
	"mode=transport" ,
	);

#----- start capturing

vCapture($IF);

if ($IPSEC::IPsecAddr{IPSEC_IPVERSION} == 4) {
} else {
## RA

vSend($IF, ra_to_nut);
vSleep(3);
}

#----- update Neighbor Cache

($stat, %ret) = ipsecPing2NUT($IF, 'echo_request_from_host1', 'echo_reply_to_host1_esp');
if ($stat ne 'GOT_REPLY') {
    vLogHTML("TN received no echo reply from NUT to HOST1.<BR>");
    ipsecExitFail();
}

#======================================================================
vLogHTML("<FONT SIZE=3>*** Target testing phase ***<FONT><BR>");

# ping TN(Host1) <-> NUT

($stat, %ret) = ipsecPingFrag2NUT($IF,
	'echo_request_from_host1_1st', 'echo_request_from_host1_2nd',
	'echo_reply_to_host1_1st_esp', 'echo_reply_to_host1_2nd_esp');

if ($stat ne 'GOT_REPLY') {
    vLogHTML("TN received no echo reply from NUT to HOST1.<BR>");
    ipsecExitFail();
}

vLogHTML("TN received echo reply from NUT to HOST1.<BR>");
ipsecExitPass();

######################################################################
__END__

=head1 NAME

  HTR_E_Out_Fragment - Host Transport Mode ESP Outbound Header Order (Fragment Header vs ESP)
  

=head1 TARGET

  Host

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./HTR_E_Out_Fragment_hmacsha2_256.seq">HTR_E_Out_Fragment_hmacsha2_256.seq</A> [-tooloption ...] -pkt <A HREF="./HTR_E_Fragment_hmacsha2_256.def">HTR_E_Fragment_hmacsha2_256.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./HTR_E_common.def">HTR_E_common.def</A> and <A HREF="./HTR_common.def">HTR_common.def</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
<P>
For details of Network Topology, see <A HREF="00README">00README</A>
</P>
<P>
Set NUT's SAD and SPD as following:
</P>
<PRE>
              NET5      NET3
    HOST1_NET5 -- Router -- NUT
         <----transport------
</PRE>
<P>
Security Association Database (SAD)
</P>
<TABLE border="1">
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>ESP algorithm</TD>
    <TD>NULL</TD></TR>
  <TR>
    <TD>ESP authentication</TD>
    <TD>HMAC-SHA2-256</TD></TR>
  <TR>
    <TD>ESP authentication key</TD>
    <TD>TAHITEST89ABCDEFTAHITEST89ABCDEF</TD></TR>
</TABLE>
<P>
Security Policy Database (SPD)
</P>
<TABLE border="1">
  <TR>
    <TD>source address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD>destination address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD>upper spec</TD>
    <TD>any</TD></TR>
  <TR>
    <TD>direction</TD>
    <TD>out</TD></TR>
  <TR>
    <TD>protocol</TD>
    <TD>ESP</TD></TR>
  <TR>
    <TD>mode</TD>
    <TD>transport</TD></TR>
</TABLE>
<P>
  Update Neighbor Cache
</P>
<OL>
  <LI>Send ICMP Echo Request
  <LI>Receive ICMP Echo Reply
</OL>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
 Tester                      Target
   |                           |
   |-------------------------->|
   |      ICMP Echo Request    |
   |      1st/2nd fragment     |
   |                           |
   |<--------------------------|
   |      ICMP Echo Reply      |
   |      1st/2nd fragment     |
   |        (with ESP)         |
   |                           |
   v                           v
</PRE>
<OL>
  <LI>Send ICMP Echo Request 1st and 2nd fragment
  <LI>Receive ICMP Echo Reply with ESP 1st and 2nd fragment
</OL>
<P>
ICMP Echo Request (original)
</P>
<TABLE border="1">
  <TR>
    <TD>IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD></TD>
    <TD>Destination Address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>128 (Echo Request)</TD></TR>
</TABLE>
<P>
ICMP Echo Request (1st fragment)
</P>
<TABLE border="1">
  <TR>
    <TD>IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD></TD>
    <TD>Destination Address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD>Fragment Header</TD>
    <TD>Next Header</TD>
    <TD>58 (ICMP)</TD></TR>
  <TR>
    <TD></TD>
    <TD>Offset</TD>
    <TD>0</TD></TR>
  <TR>
    <TD></TD>
    <TD>MFlag</TD>
    <TD>1</TD></TR>
  <TR>
    <TD>Payload</TD>
    <TD>data</TD>
    <TD>1st fragment of ICMP Echo Request</TD></TR>
</TABLE>
<P>
ICMP Echo Request (2nd fragment)
</P>
<TABLE border="1">
  <TR>
    <TD>IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD></TD>
    <TD>Destination Address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD>Fragment Header</TD>
    <TD>Next Header</TD>
    <TD>58 (ICMP)</TD></TR>
  <TR>
    <TD></TD>
    <TD>Offset</TD>
    <TD>181</TD></TR>
  <TR>
    <TD></TD>
    <TD>MFlag</TD>
    <TD>0</TD></TR>
  <TR>
    <TD>Payload</TD>
    <TD>data</TD>
    <TD>2nd fragment of ICMP Echo Request</TD></TR>
</TABLE>
<P>
ICMP Echo Reply with ESP (original)
</P>
<TABLE border="1">
  <TR>
    <TD>IP Header</TD>
    <TD>Source Address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD></TD>
    <TD>Destination Address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD>ESP</TD>
    <TD>SPI</TD>
    <TD>0x1000</TD></TR>
  <TR>
    <TD></TD>
    <TD>Algorithm</TD>
    <TD>NULL</TD></TR>
  <TR>
    <TD></TD>
    <TD>Authentication Algorithm</TD>
    <TD>HAMC-SHA2-256</TD></TR>
  <TR>
    <TD></TD>
    <TD>Authentication Key</TD>
    <TD>TAHITEST89ABCDEFTAHITEST89ABCDEF</TD></TR>
  <TR>
    <TD>ICMP</TD>
    <TD>Type</TD>
    <TD>129 (Echo Reply)</TD></TR>
</TABLE>
<P>
ICMP Echo Reply with ESP (1st fragment)
</P>
<TABLE border="1">
  <TR>
    <TD>IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD></TD>
    <TD>Destination Address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD>Fragment Header</TD>
    <TD>Next Header</TD>
    <TD>50 (ESP)</TD></TR>
  <TR>
    <TD></TD>
    <TD>Offset</TD>
    <TD>0</TD></TR>
  <TR>
    <TD></TD>
    <TD>MFlag</TD>
    <TD>1</TD></TR>
  <TR>
    <TD>Payload</TD>
    <TD>data</TD>
    <TD>1st fragment of ICMP Echo Reply with ESP</TD></TR>
</TABLE>
<P>
ICMP Echo Reply with ESP (2nd fragment)
</P>
<TABLE border="1">
  <TR>
    <TD>IP Header</TD>
    <TD>Source Address</TD>
    <TD>HOST1_NET5</TD></TR>
  <TR>
    <TD></TD>
    <TD>Destination Address</TD>
    <TD>NUT_NET3</TD></TR>
  <TR>
    <TD>Fragment Header</TD>
    <TD>Next Header</TD>
    <TD>50 (ESP)</TD></TR>
  <TR>
    <TD></TD>
    <TD>Offset</TD>
    <TD>181</TD></TR>
  <TR>
    <TD></TD>
    <TD>MFlag</TD>
    <TD>0</TD></TR>
  <TR>
    <TD>Payload</TD>
    <TD>data</TD>
    <TD>2nd fragment of ICMP Echo Reply with ESP</TD></TR>
</TABLE>


=end html

=head1 JUDGMENT

  PASS: Both ICMP Echo Reply with ESP 1st and 2nd fragment received

=head1 SEE ALSO

  perldoc V6evalTool

=begin html
<PRE>
  <A HREF="./IPSEC.html">IPSEC.html</A> IPsec Test Common Utility
</PRE>

=cut

