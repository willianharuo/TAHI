//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/spec/RH_MulticastAddress.def,v 1.5 2001/10/05 06:39:18 masaxmasa Exp $
//
//////////////////////////////////////////////////////////////////////

//
//                    H2
//                    |
//     Link3 ---------+---------+---------- 3ffe:501:ffff:103::/64
//                              |
//                              R3
//                              |
//     Link2 ---------+---------+---------- 3ffe:501:ffff:102::/64
//                    |
//                    R2(TN)
//                    |
//     Link1 ---------+---------+---------- 3ffe:501:ffff:101::/64
//                              |
//                              R1(NUT)
//                              |
//     Link0 ---------+---------+---------- 3ffe:501:ffff:100::/64
//                    |
//                    H1 (TN)
//
//     H2        - v6(_GLOBAL3A0N_UCAST_ADDR) - 3ffe:501:ffff:103:200:ff:fe00:a0a0
//     R3(Link3) - v6(_GLOBAL3A1N_UCAST_ADDR) - 3ffe:501:ffff:103:200:ff:fe00:a1a1
//     R3(Link2) - v6(_GLOBAL2A0N_UCAST_ADDR) - 3ffe:501:ffff:102:200:ff:fe00:a0a0
//     R2(Link2) - v6(_GLOBAL2A1N_UCAST_ADDR) - 3ffe:501:ffff:102:200:ff:fe00:a1a1
//     R2(Link1) - TN_GL1_ADDR
//     R1(Link1) - NUT_GL1_ADDR
//     R1(Link0) - NUT_GL0_ADDR
//     H1        - TN_GL0_ADDR
//
//////////////////////////////////////////////////////////////////////

//                f0        f1        f2        f3
//            S -----> I1 -----> I2 -----> I3 -----> D
//
//    src:    *    S         S         S         S   S
//    dst:    D   I1        I2        I3         D   D
//    A[1]:  I1   I2        I1        I1        I1  I1
//    A[2]:  I2   I3        I3        I2        I2  I2
//    A[3]:  I3    D         D         D        I3  I3
//    #seg:   3    3         2         1         0   3
//
//////////////////////////////////////////////////////////////////////

#define TN_GL0_ADDR tn2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN, "Link0")
#define TN_GL1_ADDR tn2v6(_GLOBAL1_UCAST_PRFX, _GLOBAL1_UCAST_PRFXLEN, "Link1")
#define NUT_GL0_ADDR nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN, "Link0")
#define NUT_GL1_ADDR nut2v6(_GLOBAL1_UCAST_PRFX, _GLOBAL1_UCAST_PRFXLEN, "Link1")

//
// echo_request_ex_to_link0
//
// - Echo Request (Routing Header) (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request_exth(
	echo_request_ex_to_link0,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
	},
	{
		header = _HDR_IPV6_NAME(echo_request_ex_to_link0);
		exthdr = H1_to_R1;
		upper = _ICMPV6_NAME(echo_request_ex_to_link0);
	},
	{
		payload = echo_data8;
	}
)

Hdr_Routing H1_to_R1 {
	SegmentsLeft = 3;
	Address = TN_GL1_ADDR;
	Address = v6(_GLOBAL2A0N_UCAST_ADDR);
	Address = v6(_GLOBAL3A0N_UCAST_ADDR);
}

Payload echo_data8 {
	data = {1, 2, 3, 4, 5, 6, 7, 8};
}

//
// echo_request_ex_to_link1
//
// - Echo Request (Routing Header) (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request_exth(
	echo_request_ex_to_link1,
	_HETHER_nut2tn,
	{
		_SRC(TN_GL0_ADDR);
		_DST(TN_GL1_ADDR);
	},
	{
		header = _HDR_IPV6_NAME(echo_request_ex_to_link1);
		exthdr = R1_to_R2;
		upper = _ICMPV6_NAME(echo_request_ex_to_link1);
	},
	{
		payload = echo_data8;
	}
)

Hdr_Routing R1_to_R2 {
	SegmentsLeft = 2;
	Address = NUT_GL0_ADDR;
	Address = v6(_GLOBAL2A0N_UCAST_ADDR);
	Address = v6(_GLOBAL3A0N_UCAST_ADDR);
}

//
// multicast_ns_global_link0
//
// - Multicast Neighbor Solicitation
//     - global (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	multicast_ns_global_link0,
	_HETHER_nut2tnsolnode,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

//
// multicast_ns_global_link1
//
// - Multicast Neighbor Solicitation
//     - global (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	multicast_ns_global_link1,
	_HETHER_nut2tnsolnode,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = _SLLOPT_nut;
	}
)

//
// multicast_ns_linklocal_link0
//
// - Multicast Neighbor Solicitation
//     - link-local (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	multicast_ns_linklocal_link0,
	_HETHER_nut2tnsolnode,
	{
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

//
// multicast_ns_linklocal_link1
//
// - Multicast Neighbor Solicitation
//     - link-local (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	multicast_ns_linklocal_link1,
	_HETHER_nut2tnsolnode,
	{
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = _SLLOPT_nut;
	}
)

//
// na_linklocal_link1
//
// - Neighbor Advertisement
//     - link-local (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_na(
	na_linklocal_link1,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL1_ADDR;
		option = _TLLOPT_tn;
	}
)

//
// na_global_link0
//
// - Neighbor Advertisement
//     - global (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_na(
	na_global_link0,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
		HopLimit = 255;
	},
	{
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL0_ADDR;
		option = _TLLOPT_tn;
	}
)

//
// na_global_link1
//
// - Neighbor Advertisement
//     - global (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_na(
	na_global_link1,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL1_ADDR);
		_DST(NUT_GL1_ADDR);
		HopLimit = 255;
	},
	{
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL1_ADDR;
		option = _TLLOPT_tn;
	}
)

//
// echo_request_badex_to_link0
//
// - Echo Request (Routing Header - Multicast) (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request_exth(
	echo_request_badex_to_link0,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
	},
	{
		header = _HDR_IPV6_NAME(echo_request_badex_to_link0);
		exthdr = H1_to_R1_Multicast;
		upper = _ICMPV6_NAME(echo_request_badex_to_link0);
	},
	{
		payload = echo_data8;
	}
)

Hdr_Routing H1_to_R1_Multicast {
	SegmentsLeft = 3;
	Address = v6(_SLOCAL_ALLROUTERS_MCAST_ADDR);
	Address = v6(_GLOBAL2A0N_UCAST_ADDR);
	Address = v6(_GLOBAL3A0N_UCAST_ADDR);
}

//
// echo_request_badex_to_link1
//
// - Echo Request (Routing Header - Multicast) (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request_exth(
	echo_request_badex_to_link1,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(v6(_SLOCAL_ALLROUTERS_MCAST_ADDR));
	},
	{
		header = _HDR_IPV6_NAME(echo_request_badex_to_link1);
		exthdr = R1_to_R2_Multicast;
		upper = _ICMPV6_NAME(echo_request_badex_to_link1);
	},
	{
		payload = echo_data8;
	}
)

Hdr_Routing R1_to_R2_Multicast {
	SegmentsLeft = 2;
	Address = NUT_GL0_ADDR;
	Address = v6(_GLOBAL2A0N_UCAST_ADDR);
	Address = v6(_GLOBAL3A0N_UCAST_ADDR);
}

//
// echo_request_on_link0
//
// - Echo Request (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request(
	echo_request_on_link0,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
	},
	{
		payload = echo_data8;
	}
)

//
// echo_request_on_link1
//
// - Echo Request (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request(
	echo_request_on_link1,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL1_ADDR);
		_DST(NUT_GL1_ADDR);
	},
	{
		payload = echo_data8;
	}
)

//
// unicast_ns_global_link0
//
// - Unicast Neighbor Solicitation
//     - global (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	unicast_ns_global_link0,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(TN_GL0_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

//
// unicast_ns_global_link1
//
// - Unicast Neighbor Solicitation
//     - global (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_ns(
	unicast_ns_global_link1,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(TN_GL1_ADDR);
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = _SLLOPT_nut;
	}
)

//
// echo_reply_on_link0
//
// - Echo Reply (from Link0 to Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_reply(
	echo_reply_on_link0,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(TN_GL0_ADDR);
	},
	{
		payload = echo_data8;
	}
)

//
// echo_reply_on_link1
//
// - Echo Reply (from Link1 to Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_reply(
	echo_reply_on_link1,
	_HETHER_nut2tn,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(TN_GL1_ADDR);
	},
	{
		payload = echo_data8;
	}
)

//
// echo_request_off_link0
//
// - Echo Request (from Link0 to Link1) (Link0)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request(
	echo_request_off_link0,
	_HETHER_tn2nut,
	{
		_SRC(TN_GL0_ADDR);
		_DST(TN_GL1_ADDR);
	},
	{
		payload = echo_data8;
	}
)

//
// echo_request_off_link1
//
// - Echo Request (from Link0 to Link1) (Link1)
//
//////////////////////////////////////////////////////////////////////

FEM_icmp6_echo_request(
	echo_request_off_link1,
	_HETHER_nut2tn,
	{
		_SRC(TN_GL0_ADDR);
		_DST(TN_GL1_ADDR);
	},
	{
		payload = echo_data8;
	}
)
