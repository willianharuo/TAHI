#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/spec/FH_Flood.seq,v 1.7 2001/10/05 06:39:15 masaxmasa Exp $
#
######################################################################

BEGIN {
	$V6evalTool::TestVersion = '$Name: REL_2_1_1 $';
}

use V6evalTool;

%pktdesc = (
	echo_request_1st => 'Send Echo Request (Fragment packets) (1st)',
	echo_request_2nd => 'Send Echo Request (Fragment packets) (2nd)',
	echo_request_ex  => 'Send Echo Request (Fragment Header - last)',
	echo_request     => 'Send Echo Request',
	echo_reply       => 'Recv Echo Reply',
	multicast_ns     => 'Recv Multicast Neighbor Solicitation',
	unicast_ns       => 'Recv Unicast Neighbor Solicitation',
	na               => 'Send Neighbor Advertisement',
);

sleep 1;

$base = time & 0x00000fff;
$max_id = $base + 500;

vCPP("-DIDENTIFICATION=$base");

######################################################################

$IF = Link0;

vCapture($IF);

vLogHTML('<B> -- Test Preparation (ICMPv6 Echo) --</B>');

vSend($IF, echo_request);

%ret = vRecv($IF, 5, 0, 0, multicast_ns, unicast_ns, echo_reply);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'multicast_ns') {
	vSend($IF, na);

	%ret = vRecv($IF, 5, 0, 0, echo_reply);
	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'unicast_ns') {
	vSend($IF, na);

	%ret = vRecv($IF, 5, 0, 0, echo_reply);
	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'echo_reply') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Reply</FONT><BR>');
	vLogHTML('<B>OK</B>');
}

######################################################################

vSend($IF, na);
vLogHTML('Make NCE certainly');

vClear($IF);

vLogHTML('<B> -- Test Preparation (ICMPv6 Echo, Fragment Header) --</B>');

vSend($IF, echo_request_1st);
vSend($IF, echo_request_2nd);

%ret = vRecv($IF, 5, 0, 0, echo_reply);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'echo_reply') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Reply</FONT><BR>');
	vLogHTML('<B>OK</B>');
}

######################################################################

vSend($IF, na);
vLogHTML('Make NCE certainly');

vClear($IF);

vLogHTML('<B> -- Test --</B>');

for($id = $base; $id < $max_id; $id++) {
	if($id % 100 == 0) {
		vSend($IF, na);
		vLogHTML('Make NCE certainly');
	}

	vCPP("-DIDENTIFICATION=$id");
	vSend($IF, echo_request_ex);
}

vRecv($IF, 5, 0, 0, echo_reply);

######################################################################

vSend($IF, na);
vLogHTML('Make NCE certainly');

vClear($IF);

vLogHTML('<B> -- Check --</B>');

vSend($IF, echo_request);

%ret = vRecv($IF, 5, 0, 0, multicast_ns, unicast_ns, echo_reply);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'multicast_ns') {
	vSend($IF, na);

	%ret = vRecv($IF, 5, 0, 0, echo_reply);
	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'unicast_ns') {
	vSend($IF, na);

	%ret = vRecv($IF, 5, 0, 0, echo_reply);
	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'echo_reply') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Reply</FONT><BR>');
	goto pass;
}

goto fail;

######################################################################

pass:
	vLogHTML('<B>OK</B>');
	exit $V6evalTool::exitPass;

fail:
	vLogHTML('<B><FONT COLOR="#FF0000">NG</FONT></B>');
	exit $V6evalTool::exitFail;

######################################################################
__END__

=head1 NAME

    FH_Flood - Many Fragment packets (last packet only)

=head1 TARGET

    Host and Router

=head1 SYNOPSIS

=begin html
    <PRE>
    <A HREF="./FH_Flood.seq">FH_Flood.seq</A> [-tooloption ...] -pkt <A HREF="./FH_Flood.def">FH_Flood.def</A>
        -tooloption: v6eval tool option
    </PRE>

=end html

=head1 INITIALIZATION

    1. Check Link0 Link Local address Reachability
    2. Check support of Fragment Header

=head1 TEST PROCEDURE

    1. Send many fragment packets.
    2. Wait 5 sec.
    3. Send Echo Request
    4. If NS received then send NA, and wait Echo Reply again
    5. Receive Echo Reply

    last fragment packets is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 16
            NextHeader         = 44 (Fragment Header)
            HopLimit           = 64
            SourceAddress      = Tester Link Local Address
            DestinationAddress = Target Link Local Address

        Fragment Header
            NextHeader         = 58 (ICMPv6)
            Reserved1          = 0
            FragmentOffset     = 8125
            Reserved2          = 0
            MFlag              = 0
            Identification     = $base, $base + 1, $base + 2, ...
                                 (be increased for each packets,
                                  and $base is generated by current system time.)
        Payload
            data               = {1, 2, 3, 4, 5, 6, 7, 8}

=head1 JUDGMENT

    PASS : echo reply packet received.
    FAIL : don't received echo reply packet.

=head1 SEE ALSO

    perldoc V6evalTool

=cut
