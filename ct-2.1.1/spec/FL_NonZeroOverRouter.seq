#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/spec/FL_NonZeroOverRouter.seq,v 1.21 2003/04/23 12:44:27 ozoe Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: REL_2_1_1 $';
}

use V6evalTool;

if ($V6evalTool::NutDef{Type} ne 'router') {
    vLogHTML("This test is for the router only<BR>");
    exit $V6evalTool::exitRouterOnly;
}

%pktdesc = (
	echo_request_to_link0	=> 'Send Echo Request to Link0 (Non-Zero Flow Label)',
	echo_reply_from_link0	=> 'Recv Echo Reply from Link0 (Non-Zero Flow Label)',
	ns_from_link0_ll	=> 'Recv Neighbor Solicitation from Link0 (Link Local Address)',
	na_to_link0_ll		=> 'Send Neighbor Advertisement to Link0 (Link Local Address)',
	ns_from_link0		=> 'Recv Neighbor Solicitation from Link0 (Global Address)',
	na_to_link0		=> 'Send Neighbor Advertisement to Link0 (Global Address)',
	echo_reply_to_link1	=> 'Recv Echo Reply to Link1 (Non-Zero Flow Label)',
	echo_request_from_link1	=> 'Recv Echo Request from Link1 (Non-Zero Flow Label)',
	ns_from_link1_ll	=> 'Recv Neighbor Solicitation from Link1 (Link Local Address)',
	na_to_link1_ll		=> 'Send Neighbor Advertisement to Link1 (Link Local Address)',
	ns_from_link1		=> 'Recv Neighbor Solicitation from Link1 (Global Address)',
	na_to_link1		=> 'Send Neighbor Advertisement to Link1 (Global Address)',
);

$IF0 = Link0;
$IF1 = Link1;

#----- start capturing

vCapture($IF0);
vCapture($IF1);

#======================================================================
# ping over router

vSend($IF0, echo_request_to_link0);

%ret = vRecv($IF1, 5, 0, 0, ns_from_link1, ns_from_link1_ll, echo_request_from_link1);
if ($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	exit $V6evalTool::exitFail;
}
if ($ret{recvFrame} eq 'ns_from_link1') {
	vSend($IF1, na_to_link1);

	%ret = vRecv($IF1, 5, 0, 0, echo_request_from_link1);
	if ($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
		exit $V6evalTool::exitFail;
	}
}
if ($ret{recvFrame} eq 'ns_from_link1_ll') {
	vSend($IF1, na_to_link1_ll);
	%ret = vRecv($IF1, 5, 0, 0, echo_request_from_link1);
	if ($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
		exit $V6evalTool::exitFail;
	}
}
if ($ret{recvFrame} ne 'echo_request_from_link1') {
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vSend($IF1, echo_reply_to_link1);

%ret = vRecv($IF0, 5, 0, 0, ns_from_link0, ns_from_link0_ll, echo_reply_from_link0);
if ($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	exit $V6evalTool::exitFail;
}
if ($ret{recvFrame} eq 'ns_from_link0') {
	vSend($IF0, na_to_link0);
	%ret = vRecv($IF0, 5, 0, 0, echo_reply_from_link0);
	if ($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
		exit $V6evalTool::exitFail;
	}
}
if ($ret{recvFrame} eq 'ns_from_link0_ll') {
	vSend($IF0, na_to_link0_ll);
	%ret = vRecv($IF0, 5, 0, 0, echo_reply_from_link0);
	if ($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
		exit $V6evalTool::exitFail;
	}
}
if ($ret{recvFrame} ne 'echo_reply_from_link0') {
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	exit $V6evalTool::exitFail;
}

vLogHTML('OK');
exit $V6evalTool::exitPass;

######################################################################
__END__

=head1 NAME

  FL_NonZeroOverRouter - check Flow Label Non-Zero over Router

=head1 TARGET

  Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./FL_NonZeroOverRouter.seq">FL_NonZeroOverRouter.seq</A> [-tooloption ...] -pkt <A HREF="./FL_NonZeroOverRouter.def">FL_NonZeroOverRouter.def</A>
    -tooloption : v6eval tool option
  See also <A HREF="./IH_Router.def">IH_Router.def</A>
</PRE>

=end html

=head1 INITIALIZATION

  None

=head1 TEST PROCEDURE

  Tester                      Target                      Tester
              (Link0)                     (Link1)
    |                           |                           |
    |-------------------------->|                           |
    |   Echo Request to Link0   |                           |
    |                           |                           |
    |                           |-------------------------->|
    |                           |   Neighbor Solicitation   |
    |                           |                           |
    |                           |<--------------------------|
    |                           |   Neighbor Advertisement  |
    |                           |                           |
    |                           |-------------------------->|
    |                           |   Echo Request from Link1 |
    |                           |                           |
    |                           |                           |
    |                           |<--------------------------|
    |                           |   Echo Reply to Link1     |
    |                           |                           |
    |<--------------------------|                           |
    |   Neighbor Solicitation   |                           |
    |                           |                           |
    |-------------------------->|                           |
    |   Neighbor Advertisement  |                           |
    |                           |                           |
    |<--------------------------|                           |
    |   Echo Reply from Link0   |                           |
    |                           |                           |
    v                           v                           v

  1. Send Echo Request to Link0
  2. Wait Echo Reply from Link1 or NS from Link1
  3. If NS received then send NA to Link1, and wait Echo Reply form Link1 again
  4. Receive Echo Reply from Link1
  5. Send Echo Request to Link1
  6. Wait Echo Reply from Link0 or NS from Link0
  7. If NS received then send NA to Link0, and wait Echo Reply form Link0 again
  8. Receive Echo Reply from Link0

  Echo Request to Link0 Data is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0x34567 (20 bit)
            PayloadLength      = 16
            NextHeader         = 58 (ICMP)
            SourceAddress      = Tester Global Address (Link0)
            DestinationAddress = Tester Global Address (Link1)

        ICMP Echo Request
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff
            SequenceNumber = 1
            PayloadData    = {1,2,3,4,5,6,7,8}

  Neighbor Solicitation packet's IP source Address selection may be:
    - Link Local Address
    - Global Address
  This test IS NOT the Neighbor Discovery test, so admit both implementation.

=head1 JUDGMENT

  PASS: Echo Reply Received from Link0

        IPv6 Header
            Version             = 6
            Traffic Class       = 0
            FlowLabel           = 0x34567 (20 bit)
            PayloadLength       = 16
            NextHeader          = 58 (ICMP)
            SourceAddress      = Tester Global Address (Link1)
            DestinationAddress = Tester Global Address (Link0)

        ICMP Echo Reply
            Type           = 129 (Echo Reply)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff (same as Echo Request)
            SequenceNumber = 1 (same as Echo Request)
            PayloadData    = {1,2,3,4,5,6,7,8} (same as Echo Request)

=head1 REFERENCE

RFC2460

3.  IPv6 Header Format

   Flow Label           20-bit flow label.  See section 6.

6.  Flow Labels

=begin html
<PRE>
   The 20-bit Flow Label field in the IPv6 header may be used by a
   source to label sequences of packets for which it requests special
   handling by the IPv6 routers, such as non-default quality of service
   or "real-time" service.  This aspect of IPv6 is, at the time of
   writing, still experimental and subject to change as the requirements
   for flow support in the Internet become clearer.  <B>Hosts or routers
   that do not support the functions of the Flow Label field are
   required to set the field to zero when originating a packet, pass the
   field on unchanged when forwarding a packet, and ignore the field
   when receiving a packet.</B>
</PRE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

