//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// Common definition for Routing Header Test (Forwarding)
//
// $Name: REL_2_1_1 $
//
// $TAHI: ct/spec/RH.def,v 1.6 2001/10/05 06:39:18 masaxmasa Exp $
//

#define TN_GL0_ADDR tn2v6(_GLOBAL0_UCAST_PRFX,_GLOBAL0_UCAST_PRFXLEN,"Link0")
#define TN_GL1_ADDR tn2v6(_GLOBAL1_UCAST_PRFX,_GLOBAL1_UCAST_PRFXLEN,"Link1")
#define NUT_GL0_ADDR nut2v6(_GLOBAL0_UCAST_PRFX,_GLOBAL0_UCAST_PRFXLEN,"Link0")
#define NUT_GL1_ADDR nut2v6(_GLOBAL1_UCAST_PRFX,_GLOBAL1_UCAST_PRFXLEN,"Link1")

//
// Routing Header
//

Hdr_Routing rh_H1_to_R1 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 3;
	Address = R2_R1R2_ADDR;
	Address = R3_R2R3_ADDR;
	Address = H2_R3H2_ADDR;
}

Hdr_Routing rh_R1_to_R2 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 2;
	Address = R1_H1R1_ADDR;
	Address = R3_R2R3_ADDR;
	Address = H2_R3H2_ADDR;
}

Hdr_Routing rh_R2_to_R3 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 1;
	Address = R1_H1R1_ADDR;
	Address = R2_R1R2_ADDR;
	Address = H2_R3H2_ADDR;
}

Hdr_Routing rh_R3_to_H2 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 0;
	Address = R1_H1R1_ADDR;
	Address = R2_R1R2_ADDR;
	Address = R3_R2R3_ADDR;
}

Hdr_Routing rh_H2_to_R3 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 3;
	Address = R2_R2R3_ADDR;
	Address = R1_R1R2_ADDR;
	Address = H1_H1R1_ADDR;
}

Hdr_Routing rh_R3_to_R2 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 2;
	Address = R3_R3H2_ADDR;
	Address = R1_R1R2_ADDR;
	Address = H1_H1R1_ADDR;
}

Hdr_Routing rh_R2_to_R1 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 1;
	Address = R3_R3H2_ADDR;
	Address = R2_R2R3_ADDR;
	Address = H1_H1R1_ADDR;
}

Hdr_Routing rh_R1_to_H1 {
	NextHeader = 59;	// No Next Header
	SegmentsLeft = 0;
	Address = R3_R3H2_ADDR;
	Address = R2_R2R3_ADDR;
	Address = R1_R1R2_ADDR;
}


//======================================================================
//
// Packet To Link0
//

FEM_hdr_ipv6_exth(
	packet_to_link0,
	_HETHER_tn2nut,
	{
		TrafficClass = 0;
		FlowLabel = 0;
		_SRC(H1_H1R1_ADDR);	// NOT TN_GL0_ADDR!
		_DST(NUT_GL0_ADDR);
	},
	{
		header = _HDR_IPV6_NAME(packet_to_link0);
		exthdr = RH_TO_LINK0;
		upper = apl;
	}
)


//======================================================================
//
// Packet From Link1
//

FEM_hdr_ipv6_exth(
	packet_from_link1,
	_HETHER_nut2tn,
	{
		TrafficClass = 0;
		FlowLabel = 0;
		_SRC(H1_H1R1_ADDR);	// NOT TN_GL0_ADDR!
		_DST(TN_GL1_ADDR);
	},
	{
		header = _HDR_IPV6_NAME(packet_from_link1);
		exthdr = RH_FROM_LINK1;
		upper = apl;
	}
)

//======================================================================
//
// Packet To Link1
//

FEM_hdr_ipv6_exth(
	packet_to_link1,
	_HETHER_tn2nut,
	{
		TrafficClass = 0;
		FlowLabel = 0;
		_SRC(H2_R3H2_ADDR);	// NOT TN_GL1_ADDR!
		_DST(NUT_GL1_ADDR);
	},
	{
		header = _HDR_IPV6_NAME(packet_to_link1);
		exthdr = RH_TO_LINK1;
		upper = apl;
	}
)

//======================================================================
//
// Packet From Link 0
//

FEM_hdr_ipv6_exth(
	packet_from_link0,
	_HETHER_nut2tn,
	{
		TrafficClass = 0;
		FlowLabel = 0;
		_SRC(H2_R3H2_ADDR);	// NOT TN_GL1_ADDR!
		_DST(TN_GL0_ADDR);
	},
	{
		header = _HDR_IPV6_NAME(packet_from_link0);
		exthdr = RH_FROM_LINK0;
		upper = apl;
	}
)

//----------------------------------------------------------------------
// Payload Data
//

Upp_NoNext apl {
}


//======================================================================
//
// NS and NA for Link0 (Link Local)
//

FEM_icmp6_ns(
	ns_from_link0_ll,
	_HETHER_nut2tnsolnode,
	{
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_na(
	na_to_link0_ll,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		RFlag = TN_LINK0_ROUTER;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL0_ADDR;
		option = _TLLOPT_tn;
	}
)

//======================================================================
//
// NS and NA for Link0 (Global)
//

FEM_icmp6_ns(
	ns_from_link0,
	_HETHER_nut2tnsolnode,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL0_ADDR;
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_na(
	na_to_link0,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(NUT_GL0_ADDR);
		HopLimit = 255;
	},
	{
		RFlag = TN_LINK0_ROUTER;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL0_ADDR;
		option = _TLLOPT_tn;
	}
)

//======================================================================
//
// NS and NA for Link1 (Link Local)
//

FEM_icmp6_ns(
	ns_from_link1_ll,
	_HETHER_nut2tnsolnode,
	{
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_na(
	na_to_link1_ll,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		RFlag = TN_LINK1_ROUTER;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL1_ADDR;
		option = _TLLOPT_tn;
	}
)

//======================================================================
//
// NS and NA for Link1 (Global)
//

FEM_icmp6_ns(
	ns_from_link1,
	_HETHER_nut2tnsolnode,
	{
		_SRC(NUT_GL1_ADDR);
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = TN_GL1_ADDR;
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_na(
	na_to_link1,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(NUT_GL1_ADDR);
		HopLimit = 255;
	},
	{
		RFlag = TN_LINK1_ROUTER;
		SFlag = 1;
		OFlag = 1;
		TargetAddress = TN_GL1_ADDR;
		option = _TLLOPT_tn;
	}
)

