//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $Name: REL_2_1_1 $
//
// $TAHI: ct/spec/Fragment.def,v 1.9 2001/10/05 06:39:16 masaxmasa Exp $
//

#include "./ID.def"

//======================================================================
// ICMP echo request (for simple test)
//======================================================================

FEM_icmp6_echo_request(
	echo_request,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		Identifier = REQ_ID;
		SequenceNumber = SEQ_NO;
		payload = echo_data1024;
	}
)

//
// ICMP echo reply
//

FEM_icmp6_echo_reply(
	echo_reply,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		Identifier = REQ_ID;
		SequenceNumber = SEQ_NO;
		payload = echo_data1024;
	}
)

//
// ICMP echo request (needless fragment header)
//

FEM_hdr_ipv6_exth(
	echo_request_all,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(echo_request_all);
		exthdr = frag_all;
		upper = payload_all;
	}
)

//
// ICMP echo request (1st fragment)
//

FEM_hdr_ipv6_exth(
	echo_request_1st,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(echo_request_1st);
		exthdr = frag_1st;
		upper = payload_1st;
	}
)

//
// ICMP echo request (2nd fragment)
//

FEM_hdr_ipv6_exth(
	echo_request_2nd,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(echo_request_2nd);
		exthdr = frag_2nd;
		upper = payload_2nd;
	}
)

Hdr_Fragment frag_all {
	NextHeader = 58;
	FragmentOffset = 0;
	MFlag = 0;
	Identification = FRAG_ID;
}

Hdr_Fragment frag_1st {
	NextHeader = 58;
	FragmentOffset = 0;
	MFlag = 1;
	Identification = FRAG_ID;
}

Hdr_Fragment frag_2nd {
	NextHeader = 58;	// ignored
	FragmentOffset = 65;	// 520/8
	MFlag = 0;
	Identification = FRAG_ID;
}

Payload payload_all {
	data = right(_PACKET_IPV6_NAME(echo_request), 40);
}

Payload payload_1st {
	data = substr(_PACKET_IPV6_NAME(echo_request), 40, 520);
}

Payload payload_2nd {
	data = substr(_PACKET_IPV6_NAME(echo_request), 560, 512);
}

//
// ICMP Time Exceeded for 1st fragment
//

FEM_icmp6_time_exceeded(
	time_exceeded_1st,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		Code = 1;	// fragment reassembly time exceeded
		payload = err_1st;
	}
)

Payload err_1st {
	data = right(_PACKET_IPV6_NAME(echo_request_1st), 0);
}

//
// ICMP Time Exceeded for 2nd fragment (never returned, make vRecv happy)
//

FEM_icmp6_time_exceeded(
	time_exceeded_2nd,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		Code = 1;	// fragment reassembly time exceeded
		payload = err_2nd;
	}
)

Payload err_2nd {
	data = right(_PACKET_IPV6_NAME(echo_request_2nd), 0);
}

//======================================================================
// ICMP echo request A (for 2 packet test)
//======================================================================

FEM_icmp6_echo_request(
	echo_request_A,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		Identifier = REQ_ID_A;
		SequenceNumber = SEQ_NO_A;
		payload = echo_data1024byAA;
	}
)

//
// ICMP echo reply A
//

FEM_icmp6_echo_reply(
	echo_reply_A,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		Identifier = REQ_ID_A;
		SequenceNumber = SEQ_NO_A;
		payload = echo_data1024byAA;
	}
)

//
// ICMP echo request A (1st fragment)
//

FEM_hdr_ipv6_exth(
	echo_request_A_1st,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(echo_request_A_1st);
		exthdr = frag_A_1st;
		upper = payload_A_1st;
	}
)

//
// ICMP echo request A (2nd fragment)
//

FEM_hdr_ipv6_exth(
	echo_request_A_2nd,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(echo_request_A_2nd);
		exthdr = frag_A_2nd;
		upper = payload_A_2nd;
	}
)

Hdr_Fragment frag_A_1st {
	NextHeader = 58;
	FragmentOffset = 0;
	MFlag = 1;
	Identification = FRAG_ID_A;
}

Hdr_Fragment frag_A_2nd {
	NextHeader = 58;	// ignored
	FragmentOffset = 65;	// 520/8
	MFlag = 0;
	Identification = FRAG_ID_A;
}

Payload payload_A_1st {
	data = substr(_PACKET_IPV6_NAME(echo_request_A), 40, 520);
}

Payload payload_A_2nd {
	data = substr(_PACKET_IPV6_NAME(echo_request_A), 560, 512);
}

//======================================================================
// ICMP echo request B (for 2 packet test)
//======================================================================

FEM_icmp6_echo_request(
	echo_request_B,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		Identifier = REQ_ID_B;
		SequenceNumber = SEQ_NO_B;
		payload = echo_data1024byBB;
	}
)

//
// ICMP echo reply B
//

FEM_icmp6_echo_reply(
	echo_reply_B,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		Identifier = REQ_ID_B;
		SequenceNumber = SEQ_NO_B;
		payload = echo_data1024byBB;
	}
)


//
// ICMP echo request B (1st fragment)
//

FEM_hdr_ipv6_exth(
	echo_request_B_1st,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(echo_request_B_1st);
		exthdr = frag_B_1st;
		upper = payload_B_1st;
	}
)

//
// ICMP echo request B (2nd fragment)
//

FEM_hdr_ipv6_exth(
	echo_request_B_2nd,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		header = _HDR_IPV6_NAME(echo_request_B_2nd);
		exthdr = frag_B_2nd;
		upper = payload_B_2nd;
	}
)

Hdr_Fragment frag_B_1st {
	NextHeader = 58;
	FragmentOffset = 0;
	MFlag = 1;
	Identification = FRAG_ID_B;
}

Hdr_Fragment frag_B_2nd {
	NextHeader = 58;	// ignored
	FragmentOffset = 65;	// 520/8
	MFlag = 0;
	Identification = FRAG_ID_B;
}

Payload payload_B_1st {
	data = substr(_PACKET_IPV6_NAME(echo_request_B), 40, 520);
}

Payload payload_B_2nd {
	data = substr(_PACKET_IPV6_NAME(echo_request_B), 560, 512);
}

//----------------------------------------------------------------------
// Neighbor Solicitation and Neighbor Advertisement
//----------------------------------------------------------------------

FEM_icmp6_ns(
	ns,
	_HETHER_nut2tnsolnode,
	{
		_SRC(oneof(nutv6(),nut2v6(_GLOBAL0_UCAST_PRFX,_GLOBAL0_UCAST_PRFXLEN,"Link0")));
		_DST(_IPV6_SOLNODE_MCAST(tnv6()));
		HopLimit = 255;
	},
	{
		TargetAddress = tnv6();
		option = _SLLOPT_nut;
	}
)

FEM_icmp6_na(
	na,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		SFlag = 1;
		OFlag = 1;
		TargetAddress = tnv6();
		option = _TLLOPT_tn;
	}
)

//----------------------------------------------------------------------
// Payload Data
//----------------------------------------------------------------------

Payload echo_data1024byAA {
	data = repeat(0xa1, 512);
	data = repeat(0xa2, 512);
}

Payload echo_data1024byBB {
	data = repeat(0xb1, 512);
	data = repeat(0xb2, 512);
}

Payload echo_data1024 {
	data = repeat(1, 512);
	data = repeat(2, 512);
}
