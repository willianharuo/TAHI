#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/spec/HH_BadOptDataLenOverRouter.seq,v 1.6 2001/10/05 06:39:16 masaxmasa Exp $
#
######################################################################

BEGIN {
	$V6evalTool::TestVersion = '$Name: REL_2_1_1 $';
}

use V6evalTool;

if($V6evalTool::NutDef{Type} ne 'router') {
	vLogHTML("This test is for the router only<BR>");
	exit $V6evalTool::exitRouterOnly;
}

%pktdesc = (
	echo_request_global_on_link0        => 'Send Echo Request (from Link0 to Link0)',
	echo_request_global_on_link1        => 'Send Echo Request (from Link1 to Link1)',
	echo_request_global_off_link0       => 'Send Echo Request (from Link0 to Link1) (Link0)',
	echo_request_global_off_link1       => 'Recv Echo Request (from Link0 to Link1) (Link1)',
	echo_request_ex_global_off_link0    => 'Send Echo Request (PadN) (from Link0 to Link1) (Link0)',
	echo_request_ex_global_off_link1    => 'Recv Echo Request (PadN) (from Link0 to Link1) (Link1)',
	echo_request_badex_global_off_link0 => 'Send Echo Request (PadN with bad Opt Data Len) (from Link0 to Link1) (Link0)',
	echo_reply_global_on_link0          => 'Recv Echo Reply (from Link0 to Link0)',
	echo_reply_global_on_link1          => 'Recv Echo Reply (from Link1 to Link1)',
	echo_reply_global_off_link0         => 'Recv Echo Reply (from Link1 to Link0) (Link0)',
	echo_reply_global_off_link1         => 'Send Echo Reply (from Link1 to Link0) (Link1)',
	multicast_ns_global_link0           => 'Recv Multicast Neighbor Solicitation - global (Link0)',
	multicast_ns_global_link1           => 'Recv Multicast Neighbor Solicitation - global (Link1)',
	multicast_ns_linklocal_link0        => 'Recv Multicast Neighbor Solicitation - link-local (Link0)',
	multicast_ns_linklocal_link1        => 'Recv Multicast Neighbor Solicitation - link-local (Link1)',
	unicast_ns_global_link0             => 'Recv Unicast Neighbor Solicitation - global (Link0)',
	unicast_ns_global_link1             => 'Recv Unicast Neighbor Solicitation - global (Link1)',
	na_global_link0                     => 'Send Neighbor Advertisement - global (Link0)',
	na_global_link1                     => 'Send Neighbor Advertisement - global (Link1)',
	na_linklocal_link0                  => 'Send Neighbor Advertisement - link-local (Link0)',
	na_linklocal_link1                  => 'Send Neighbor Advertisement - link-local (Link1)',
);

######################################################################

$IF0 = Link0;
$IF1 = Link1;

vCapture($IF0);
vCapture($IF1);

vLogHTML('<B> -- Test Preparation (Link0) --</B>');

vSend($IF0, echo_request_global_on_link0);

%ret = vRecv($IF0, 5, 0, 0, multicast_ns_global_link0, multicast_ns_linklocal_link0, unicast_ns_global_link0, echo_reply_global_on_link0);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link0)</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'multicast_ns_global_link0') {
	vSend($IF0, na_global_link0);
	%ret = vRecv($IF0, 5, 0, 0, echo_reply_global_on_link0);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply (Link0)</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'multicast_ns_linklocal_link0') {
	vSend($IF0, na_linklocal_link0);
	%ret = vRecv($IF0, 5, 0, 0, echo_reply_global_on_link0);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply (Link0)</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'unicast_ns_global_link0') {
	vSend($IF0, na_global_link0);
	%ret = vRecv($IF0, 5, 0, 0, echo_reply_global_on_link0);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply (Link0)</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'echo_reply_global_on_link0') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Reply (Link0)</FONT><BR>');
	vLogHTML('<B>OK</B>');
}

######################################################################

vClear($IF0);
vClear($IF1);

vLogHTML('<B> -- Test Preparation (Link1) --</B>');

vSend($IF1, echo_request_global_on_link1);

%ret = vRecv($IF1, 5, 0, 0, multicast_ns_global_link1, multicast_ns_linklocal_link1, unicast_ns_global_link1, echo_reply_global_on_link1);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link1)</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'multicast_ns_global_link1') {
	vSend($IF1, na_global_link1);
	%ret = vRecv($IF1, 5, 0, 0, echo_reply_global_on_link1);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply (Link1)</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'multicast_ns_linklocal_link1') {
	vSend($IF1, na_linklocal_link1);
	%ret = vRecv($IF1, 5, 0, 0, echo_reply_global_on_link1);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply (Link1)</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'unicast_ns_global_link1') {
	vSend($IF1, na_global_link1);
	%ret = vRecv($IF1, 5, 0, 0, echo_reply_global_on_link1);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">Cannot receive Echo Reply (Link1)</FONT><BR>');
		goto fail;
	}
}

if($ret{recvFrame} eq 'echo_reply_global_on_link1') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Reply (Link1)</FONT><BR>');
	vLogHTML('<B>OK</B>');
}

######################################################################

vSend($IF0, na_global_link0);
vLogHTML('Make NCE certainly (Link0)');

vSend($IF1, na_global_link1);
vLogHTML('Make NCE certainly (Link1)');

vClear($IF0);
vClear($IF1);

vLogHTML('<B> -- Test Preparation (from Link0 to Link1) --</B>');

vSend($IF0, echo_request_global_off_link0);

%ret = vRecv($IF1, 5, 0, 0, echo_request_global_off_link1);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link1)</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'echo_request_global_off_link1') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Request (Link1)</FONT><BR>');
	vLogHTML('<B>OK</B>');

	vSend($IF1, echo_reply_global_off_link1);

	%ret = vRecv($IF0, 5, 0, 0, echo_reply_global_off_link0);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link0)</FONT><BR>');
		goto fail;
	}

	if($ret{recvFrame} eq 'echo_reply_global_off_link0') {
		vLogHTML('<FONT COLOR="#008000">Receive Echo Reply (Link0)</FONT><BR>');
		vLogHTML('<B>OK</B>');
	}
}

######################################################################

vSend($IF0, na_global_link0);
vLogHTML('Make NCE certainly (Link0)');

vSend($IF1, na_global_link1);
vLogHTML('Make NCE certainly (Link1)');

vClear($IF0);
vClear($IF1);

vLogHTML('<B> -- Test Preparation (Hop-by-Hop Options Header) (from Link0 to Link1) --</B>');

vSend($IF0, echo_request_ex_global_off_link0);

%ret = vRecv($IF1, 5, 0, 0, echo_request_ex_global_off_link1);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link1)</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'echo_request_ex_global_off_link1') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Request (Link1)</FONT><BR>');
	vLogHTML('<B>OK</B>');

	vSend($IF1, echo_reply_global_off_link1);

	%ret = vRecv($IF0, 5, 0, 0, echo_reply_global_off_link0);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link0)</FONT><BR>');
		goto fail;
	}

	if($ret{recvFrame} eq 'echo_reply_global_off_link0') {
		vLogHTML('<FONT COLOR="#008000">Receive Echo Reply (Link0)</FONT><BR>');
		vLogHTML('<B>OK</B>');
	}
}

######################################################################

vSend($IF0, na_global_link0);
vLogHTML('Make NCE certainly (Link0)');

vSend($IF1, na_global_link1);
vLogHTML('Make NCE certainly (Link1)');

vClear($IF0);
vClear($IF1);

vLogHTML('<B> -- Test --</B>');

vSend($IF0, echo_request_badex_global_off_link0);
vRecv($IF0, 5, 0, 0);
vRecv($IF1, 5, 0, 0);

######################################################################

vSend($IF0, na_global_link0);
vLogHTML('Make NCE certainly (Link0)');

vSend($IF1, na_global_link1);
vLogHTML('Make NCE certainly (Link1)');

vClear($IF0);
vClear($IF1);

vLogHTML('<B> -- Check --</B>');

vSend($IF0, echo_request_global_off_link0);

%ret = vRecv($IF1, 5, 0, 0, echo_request_global_off_link1);

if($ret{status} != 0) {
	vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link1)</FONT><BR>');
	goto fail;
}

if($ret{recvFrame} eq 'echo_request_global_off_link1') {
	vLogHTML('<FONT COLOR="#008000">Receive Echo Request (Link1)</FONT><BR>');
	vLogHTML('<B>OK</B>');

	vSend($IF1, echo_reply_global_off_link1);

	%ret = vRecv($IF0, 5, 0, 0, echo_reply_global_off_link0);

	if($ret{status} != 0) {
		vLogHTML('<FONT COLOR="#FF0000">No response from NUT (Link0)</FONT><BR>');
		goto fail;
	}

	if($ret{recvFrame} eq 'echo_reply_global_off_link0') {
		vLogHTML('<FONT COLOR="#008000">Receive Echo Reply (Link0)</FONT><BR>');
		goto pass;
	}
}

goto fail;

######################################################################

pass:
	vLogHTML('<B>OK</B>');
	exit $V6evalTool::exitPass;

fail:
	vLogHTML('<B><FONT COLOR="#FF0000">NG</FONT></B>');
	exit $V6evalTool::exitFail;

######################################################################
__END__

=head1 NAME

    HH_BadOptDataLenOverRouter - Bad Opt Data Len in Hop-by-Hop Options Header (over router)

=head1 TARGET

    Router

=head1 SYNOPSIS

=begin html
    <PRE>
    <A HREF="./HH_BadOptDataLenOverRouter.seq">HH_BadOptDataLenOverRouter.seq</A> [-tooloption ...] -pkt <A HREF="./HH_BadOptDataLenOverRouter.def">HH_BadOptDataLenOverRouter.def</A>
        -tooloption: v6eval tool option
    </PRE>

=end html

=head1 INITIALIZATION

    1. Check Link0 Global Address Reachability
    2. Check Link1 Global Address Reachability
    3. Check Global Address Reachability (from Link0 to Link1)
    4. Check support of Hop-by-Hop Options Header

=head1 TEST PROCEDURE

    1. Send bad Echo Request (Link0)
    2. Wait 5 sec.
    3. Send Echo Request (Link0)
    4. If NS received then send NA, and wait Echo Reply again (Link1)
    5. Receive Echo Request (Link1)
    6. Send Echo Reply (Link1)
    7. If NS received then send NA, and wait Echo Reply again (Link0)
    8. Receive Echo Reply (Link0)

    Bad Echo Request Data is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 24
            NextHeader         = 0 (Hop-by-Hop Options Header)
            HopLimit           = 64
            SourceAddress      = Tester Link Local Address
            DestinationAddress = Target Link Local Address

        Hop-by-Hop Options Header
            NextHeader         = 58 (ICMPv6)
            HeaderExtLength    = 0

            Opt_PadN
                OptionType     = 1
                OptDataLength  = 100 (It' bad. True value is 4.)
                pad            = {0, 0, 0, 0}

        ICMPv6 Echo Request
            Type               = 128 (Echo Request)
            Code               = 0
            Checksum           = (auto)
            Identifier         = 0
            SequenceNumber     = 0
            PayloadData        = {1, 2, 3, 4, 5, 6, 7, 8}

=head1 JUDGMENT

    PASS : echo reply packet received.

    FAIL : don't received echo reply packet.

=head1 SEE ALSO

    perldoc V6evalTool

=cut
