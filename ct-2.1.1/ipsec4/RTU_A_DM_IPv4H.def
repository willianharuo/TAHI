//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $Name: REL_2_1_1 $
//
// $TAHI: ct/ipsec4/RTU_A_DM_IPv4H.def,v 1.2 2001/10/05 06:38:59 masaxmasa Exp $
//

#include "../ipsec/RTU_A_common.def"
//======================================================================
//
// AH/ESP definition
//


//======================================================================
//
// Real packet definition with IPsec AH
//



FEM_hdr_ipv4_exth(
	ahtun_from_sg1_net2_real1 ,
	hether_router2nut,
	{
		_SRC(v4(IPSEC_SG1_NET2_ADDR));
		_DST(v4(IPSEC_SG1_NET0_ADDR));  // this address will be modified to
	//	_DST(v4(IPSEC_NUT_NET0_ADDR));    // this address in

	},
	{
		header = _HDR_IPV4_NAME(ahtun_from_sg1_net2_real1);
		exthdr = ah_from_sg_sn2;
		upper = _PACKET_IPV4_NAME(echo_request_from_host1_net4_to_host1_net1_on_net0);
	}
)


FEM_hdr_ipv4_exth(
	ahtun_from_sg1_net2_real2 ,
	hether_router2nut,
	{
		_SRC(v4(IPSEC_SG2_NET2_ADDR));  // this address will be modified to
	//	_SRC(v4(IPSEC_SG1_NET2_ADDR));  // this address in
		_DST(v4(IPSEC_NUT_NET0_ADDR));
	},
	{
		header = _HDR_IPV4_NAME(ahtun_from_sg1_net2_real2);
		exthdr = ah_from_sg_sn3;
		upper = _PACKET_IPV4_NAME(echo_request_from_host1_net4_to_host1_net1_on_net0);
	}
)


FEM_hdr_ipv4_exth(
	ahtun_from_sg1_net2_real3 ,
	hether_router2nut,
	{
		_SRC(v4(IPSEC_SG1_NET2_ADDR));
		_DST(v4(IPSEC_NUT_NET0_ADDR));
		TTL=128;
	},
	{
		header = _HDR_IPV4_NAME(ahtun_from_sg1_net2_real3);
		exthdr = ah_from_sg_sn4;
		upper = _PACKET_IPV4_NAME(echo_request_from_host1_net4_to_host1_net1_on_net0);
	}
)



//======================================================================
//
// Modified packet definition with IPsec AH
//

// Common use Ether Header
Hdr_Ether hether_router2nut_0x0800 {
	SourceAddress=ether(IPSEC_ROUTER_NET0_MAC_ADDR);
	DestinationAddress=nutether();
	Type=0x0800; // need to specify IPv4
}


// IPv4 Dst address is modified
Frame_Ether ahtun_from_sg1_net2_dm_ipv4h_dst_echo_request_from_host1_net4_to_host1_net1_on_net0 {
	header=hether_router2nut_0x0800;
	packet=ahtun_from_sg1_net2_modpkt1;
}

Payload ahtun_from_sg1_net2_modpkt1 {
	data=substr(ahtun_from_sg1_net2_real1, 14, 1);	// Ver, Len
	data=substr(ahtun_from_sg1_net2_real1, 15, 1);	// TOS
	data=substr(ahtun_from_sg1_net2_real1, 16, 2);	// Total Len
	data=substr(ahtun_from_sg1_net2_real1, 18, 2);	// ID
	data=substr(ahtun_from_sg1_net2_real1, 20, 2);	// Flags, Ofs
	data=substr(ahtun_from_sg1_net2_real1, 22, 1);	// TTL
	data=substr(ahtun_from_sg1_net2_real1, 23, 1);	// Proto.
	//data=substr(ahtun_from_sg1_net2_real1, 24, 2);	// Hdr chksum
	data={0x6f,0xfa};	// correct Hdr chksum
	data=substr(ahtun_from_sg1_net2_real1, 26, 4);	// Src Addr

	//data=substr(ahtun_from_sg1_net2_real1, 30, 4);	// Dst Addr
	data=substr(ahtun_from_sg1_net2_real1, 30, 3);	// Dst Addr
	data={20};	// modify dstaddr IPSEC_SG1_NET0_ADDR -> IPSEC_NUT_NET0_ADDR

	data=substr(ahtun_from_sg1_net2_real1, 34, 24);	// AH
	data=right(ahtun_from_sg1_net2_real1, 58); // Tunnel Inner Packet
}

// IPv4 Src address is modified
Frame_Ether ahtun_from_sg1_net2_dm_ipv4h_src_echo_request_from_host1_net4_to_host1_net1_on_net0 {
	header=hether_router2nut_0x0800;
	packet=ahtun_from_sg1_net2_modpkt2;
}

Payload ahtun_from_sg1_net2_modpkt2 {
	data=substr(ahtun_from_sg1_net2_real2, 14, 1);	// Ver, Len
	data=substr(ahtun_from_sg1_net2_real2, 15, 1);	// TOS
	data=substr(ahtun_from_sg1_net2_real2, 16, 2);	// Total Len
	data=substr(ahtun_from_sg1_net2_real2, 18, 2);	// ID
	data=substr(ahtun_from_sg1_net2_real2, 20, 2);	// Flags, Ofs
	data=substr(ahtun_from_sg1_net2_real2, 22, 1);	// TTL
	data=substr(ahtun_from_sg1_net2_real2, 23, 1);	// Proto.
	//data=substr(ahtun_from_sg1_net2_real2, 24, 2);	// Hdr chksum
	data={0x6f,0xfa};	// correct Hdr chksum

	//data=substr(ahtun_from_sg1_net2_real2, 26, 4);	// Src Addr
	data=substr(ahtun_from_sg1_net2_real2, 26, 3);	// Src Addr
	data={11}; // modify srcaddr IPSEC_SG2_NET2_ADDR -> IPSEC_SG1_NET2_ADDR

	data=substr(ahtun_from_sg1_net2_real2, 30, 4);	// Dst Addr
	data=substr(ahtun_from_sg1_net2_real2, 34, 24);	// AH
	data=right(ahtun_from_sg1_net2_real2, 58); // Tunnel Inner Packet
}

// IPv4 TTL is modified
Frame_Ether ahtun_from_sg1_net2_dm_ipv4h_ttl_echo_request_from_host1_net4_to_host1_net1_on_net0 {
	header=hether_router2nut_0x0800;
	packet=ahtun_from_sg1_net2_modpkt3;
}

Payload ahtun_from_sg1_net2_modpkt3 {
	data=substr(ahtun_from_sg1_net2_real2, 14, 1);	// Ver, Len
	data=substr(ahtun_from_sg1_net2_real2, 15, 1);	// TOS
	data=substr(ahtun_from_sg1_net2_real2, 16, 2);	// Total Len
	data=substr(ahtun_from_sg1_net2_real2, 18, 2);	// ID
	data=substr(ahtun_from_sg1_net2_real2, 20, 2);	// Flags, Ofs

	//data=substr(ahtun_from_sg1_net2_real2, 22, 1);	// TTL
	data={127};	// modify TTL

	data=substr(ahtun_from_sg1_net2_real2, 23, 1);	// Proto.
	//data=substr(ahtun_from_sg1_net2_real2, 24, 2);	// Hdr chksum
	data={0xef,0xf9};	// correct Hdr chksum

	data=substr(ahtun_from_sg1_net2_real2, 26, 4);	// Src Addr
	data=substr(ahtun_from_sg1_net2_real2, 30, 4);	// Dst Addr
	data=substr(ahtun_from_sg1_net2_real2, 34, 24);	// AH
	data=right(ahtun_from_sg1_net2_real2, 58); // Tunnel Inner Packet
}

//end
