#!/usr/bin/perl
#
# Copyright (C) 2003 Yokogawa Electric Corporation, 
# INTAP(Interoperability Technology Association
# for Information Processing, Japan).  All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/pd/RRRequest.seq,v 1.4 2003/06/11 09:31:14 ozoe Exp $
#
######################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }

use V6evalTool;
use pd;

%pktdesc = (
	echo_request    => 'Send Echo Request (Link-Local Address)',
	echo_reply      => 'Recv Echo Reply (Link-Local Address)',
	ns              => 'Recv Neighbor Solicitation',
	ns_unicast      => 'Recv Neighbor Solicitation',
	ns_other        => 'Recv Neighbor Solicitation',
	ns_unicast_other => 'Recv Neighbor Solicitation',
	na              => 'Send Neighbor Advertisement',
	rs              => 'Send Router Solicitation',
	ra		=> 'Recv Router Advertisement',
	ra1		=> 'Recv Router Advertisement including mtu option',
	ra2		=> 'Recv Router Advertisement including multiple prefix information',
	ra3		=> 'Recv Router Advertisement including mtu option and multiple prefix information',
	dhcp_sol		=> 'Recv DHCP Solicit message w/o Option Request option',
	dhcp_sol_any		=> 'Recv DHCP Solicit message',
	dhcp_adv_pref1		=> 'Send DHCP Advertise message w/ preference 200',
	dhcp_adv_pref2		=> 'Send DHCP Advertise message w/ preference 100',
	dhcp_req		=> 'Recv DHCP Request message w/o Option Request option',
	dhcp_req_any		=> 'Recv DHCP Request message',
	dhcp_req_any1		=> 'Recv DHCP Request message w/o Option Request and IA_PD Prefix option',
	dhcp_req_any2		=> 'Recv DHCP Request message w/o IA_PD Prefix option',
	dhcp_req_other		=> 'Recv DHCP Request message sending to other Server w/o Option Request option',
	dhcp_req_any_other	=> 'Recv DHCP Request message sending to other Server',
	dhcp_req_any1_other	=> 'Recv DHCP Request message sending to other Server w/o Option Request and IA_PD prefix option',
	dhcp_req_any2_other	=> 'Recv DHCP Request message sending to other Server w/o IA_PD prefix option',

);

pdOptions(@ARGV);

# The following generate debugging messages.
$pd::debug=$pdOpt_v|$pdOpt_vv;

# You can specifies debug options to a remote control program.
# If you want to know more detail, please see the following:
# - V6evalTool.pm: perldoc V6evalTool
# - V6evalRemote.pm: perldoc V6evalRemote
$pd::remote_debug="-o1" if $pdOpt_vv;

#
#
$IF = Link0;
$IF1 = Link1;
$exit_rtn=$V6evalTool::exitPass;
$idx=0;
$wait_ras=$pd::MIN_DELAY_BETWEEN_RAS+1;

#
#
$delegateprefix="3ffe:501:fffb::";
$preferredlifetime="80";
$validlifetime="120";
#
$wait_time=16;
$maxcount = 4;
# time is Jan 1, 2000 (UTC), modulo 2^32
$t64 = time() - 946684800;
foreach($count = 0; $count < $maxcount; $count++){
    $sid_duid_time[$count] = ($t64 & 0xffffffff);
    $t64 = $t64 + 86400; #1 day after
}

@sid_link_addr = (
    "00:00:00:00:a0:a0",
    "00:00:00:00:a1:a1",
    "00:00:00:00:a2:a2",
    "00:00:00:00:a3:a3",
);

#
#
#
$type=$V6evalTool::NutDef{Type};
if($type eq host) {
    vLogHTML("This test is for the router only<BR>");
    exit $V6evalTool::exitRouterOnly;
}

$type=$V6evalTool::NutDef{Type};
if($type ne router) {
    vLogHTML(pdErrmsg("ERROR: $V6evalTool::NutDef{Type}: ".
                      "Unknown target type<BR>"));
    exit $V6evalTool::exitFail;
}

#
#
#
vLogHTML("<FONT SIZE=\"+1\">Initialization</FONT><BR>");
vLogHTML("Trying to setup NUT<BR>");
pdStartDefaultRA() || exit $V6evalTool::exitFail;
pdStopDHCP6Client() || exit $V6evalTool::exitFail;
$vcpp = pdSetVCPP($pd::INITIAL, $delegateprefix, 0, 0,
	$maxcount, @sid_duid_time, @sid_link_addr, %ret);
vCPP($vcpp);
#
pdStartDHCP6Client() || exit $V6evalTool::exitFail;
#
vCapture($IF);
#
#

%ret = vRecv($IF, $wait_time, 0, 0, dhcp_sol, dhcp_sol_any);

if($ret{status} != 0) {
        vLogHTML('No response from NUT, Configuration Problem ?<BR>');
        vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	pdAsyncWait() || exit $V6evalTool::exitFatal;
        exit $V6evalTool::exitFail;
}

if($ret{status} == 0) {
        vLogHTML("Client sent DHCP Solicit message<BR>");
        vLogHTML("OK<BR>");

        $irt = $pd::SOL_TIMEOUT;
        $mrt = $pd::SOL_MAX_RT;
        $rt = 0;

        $rt = pdRetransmitTimer($irt, $mrt, $rt);

        $vcpp = pdSetVCPP($pd::SOLICIT, $delegateprefix, $preferredlifetime, $validlifetime,
		$maxcount, @sid_duid_time, @sid_link_addr, %ret);
        vCPP($vcpp);

        vSend($IF, dhcp_adv_pref1, dhcp_adv_pref2);

        vLogHTML("<FONT SIZE=\"+1\">Test</FONT><BR>");
        $title{$idx}="<TD>$pktdesc{'dhcp_req'}</TD><TD>exp:sending DHCP Request message</TD>";
        %ret = vRecv($IF, $rt, 0, 0, ns, ns_unicast, dhcp_req, dhcp_req_any, dhcp_req_any1, dhcp_req_any2);
        if ($ret{recvFrame} eq 'ns' || $ret{recvFrame} eq 'ns_unicast') {
                vSend($IF, na);
                %ret = vRecv($IF, $rt, 0, 0, dhcp_req, dhcp_req_any, dhcp_req_any1,, dhcp_req_any1);
        }

        if ($ret{status} == 0) {
                $rt0 = time();

                $irt = $pd::REQ_TIMEOUT;
                $mrt = $pd::REQ_MAX_RT;
                $rt = 0;
                $count = 1;

                $title{$idx}.="<TD>result:sent DHCP Request message, count $count</TD>";
                $result{$idx}=$V6evalTool::exitPass;
                vLogHTML("Retransmition timeout: $rt, Retransmit count: $count<BR>");
                vLogHTML("<A NAME=\"T$idx\">OK</A><BR>");
                $idx++;
                $count++;
        }
        else{
                vLogHTML("Cannot receive DHCP Request message<BR>");
                vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
		pdAsyncWait() || exit $V6evalTool::exitFatal;
                exit $V6evalTool::exitFail;
        }

        $title{$idx}="<TD>$pktdesc{'dhcp_request'}</TD><TD>exp:sending DHCP Request message again</TD>";
        $mrd = 0;
        $mrc = $pd::REQ_MAX_RC;
        while(1){
                $rt = pdRetransmitTimer($irt, $mrt, $rt);
                %ret = vRecv($IF, $rt+1, 0, 0, ns, ns_unicast,
				dhcp_req, dhcp_req_any, dhcp_req_any1, dhcp_req_any2);
                if ($ret{recvFrame} eq 'ns' || $ret{recvFrame} eq 'ns_unicast'){
                        vSend($IF, na);
			%ret = vRecv($IF, $rt, 0, 0, 
				dhcp_req, dhcp_req_any, dhcp_req_any1, dhcp_req_any2);
                }

                $title{$idx}="<TD>DHCP Request/Reply message exchange is continued</TD>";
                $title{$idx}.="<TD>exp:sending DHCP Request message again</TD>";
                if ($ret{recvFrame} eq 'dhcp_req' || $ret{recvFrame} eq 'dhcp_req_any' ||
                    $ret{recvFrame} eq 'dhcp_req_any1' || $ret{recvFrame} eq 'dhcp_req_any2'){
                        $rt1 = time();
                        $expect = $rt;
                        $rt = ($rt1 - $rt0);
                        $rt0 = $rt1;
                        vLogHTML("Client sent DHCP Request message again.<BR>");
                        vLogHTML("Retransmition timeout: $rt, Retransmit count: $count<BR>");
                        if( $rt > $expect){
                                vLogHTML("Retransmition timeout is over expected timeout: $expect<BR>");
                                $result{$idx}=$V6evalTool::exitWarn;
                                vLogHTML("<A NAME=\"T$idx\"><FONT COLOR=\"#FF0000\">Warn</FONT></A><BR>");
                        }else{
                                $result{$idx}=$V6evalTool::exitPass;
                                vLogHTML("<A NAME=\"T$idx\">OK</A><BR>");
                        }
                        $title{$idx}.="<TD>result:sent DHCP Request message again, count $count</TD>";
                        $idx++;
                }
                else{
                        $title{$idx}.="<TD>result:NOT sent DHCP Request message again</TD>";
                        $result{$idx}=$V6evalTool::exitFail;
                        vLogHTML("Client terminate DHCP Request/Reply message exchange<BR>");
                        vLogHTML("<A NAME=\"T$idx\"><FONT COLOR=\"#FF0000\">NG</FONT></A><BR>");
                        $idx++;
			last;
                }

                if ($count == $mrc){
                        vLogHTML("Maximum retransmit count REQ_MAX_RC: $mrc is reached,<BR>");
                        vLogHTML("Request/Reply message exchange is terminated.<BR>");
                        $count++;
                        last;
                }
                $count++;
        }

        $rt = pdRetransmitTimer($irt, $mrt, $rt);
        %ret = vRecv($IF, $rt, 0, 0,
                  dhcp_req, dhcp_req_any, dhcp_req_any1, dhcp_req_any2,
                  dhcp_req_other, dhcp_req_any_other, dhcp_req_any1_other, dhcp_req_any2_other,
                  dhcp_sol, dhcp_sol_any);

        $title{$idx}="<TD>If the message exchange fails, the client takes an action based on the client's local policy.</TD>";
        $title{$idx}.="<TD>exp:Client takes an action</TD>";
        if ($ret{recvFrame} eq 'dhcp_req' || $ret{recvFrame} eq 'dhcp_req_any' ||
            $ret{recvFrame} eq 'dhcp_req_any1' || $ret{recvFrame} eq 'dhcp_req_any2'){
                $rt1 = time();
                $rt = ($rt1 - $rt0);
                vLogHTML("Receive DHCP Request message again<BR>");
                vLogHTML("Retransmition timeout: $rt, Retransmit count: $count<BR>");
                vLogHTML("More DHCP Request messages than REQ_MAX_MRC($mrc) times were received.<BR>");
                $title{$idx}.="<TD>result:sent DHCP Request message again</TD>";
                $result{$idx}=$V6evalTool::exitFail;
                vLogHTML("<A NAME=\"T$idx\"><FONT COLOR=\"#FF0000\">NG</FONT></A><BR>");
        }
        elsif ($ret{recvFrame} eq 'dhcp_req_other' || $ret{recvFrame} eq 'dhcp_req_any_other' ||
               $ret{recvFrame} eq 'dhcp_req_any1_other' || $ret{recvFrame} eq 'dhcp_req_any2_other'){
                $title{$idx}.="<TD>result:sent DHCP Request message to TN1s DUID</TD>";
                $result{$idx}=$V6evalTool::exitPass;
                vLogHTML("Client sent DHCP Request message to TN1s DUID<BR>");
                vLogHTML("<A NAME=\"T$idx\">OK</A><BR>");
        }
        elsif ($ret{recvFrame} eq 'dhcp_sol' || $ret{recvFrame} eq 'dhcp_sol_any'){
                $title{$idx}.="<TD>result:sent DHCP Solicit message</TD>";
                $result{$idx}=$V6evalTool::exitPass;
                vLogHTML("Client initiate the server discovery process<BR>");
                vLogHTML("<A NAME=\"T$idx\">OK</A><BR>");
        }
        else{
                $title{$idx}.="<TD>result: terminate the configuration process</TD>";
                $result{$idx}=$V6evalTool::exitPass;
                vLogHTML("Client terminated the configuration process<BR>");
                vLogHTML("<A NAME=\"T$idx\">OK</A><BR>");
	}
}
else{
        vLogHTML('Cannot receive DHCP Solicit message<BR>');
        vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
	pdAsyncWait() || exit $V6evalTool::exitFatal;
        exit $V6evalTool::exitFail;
}

pdAsyncWait() || exit $V6evalTool::exitFatal;

#
#
#
@col=('PTN', 'EXP', 'RESULT');
pdPrintSummaryHTML("*** Test Summary: PE vs CPE ***", @col,
                   %title, %result, $idx);

#
#
#
exit $exit_rtn;


######################################################################
__END__

=head1 NAME

  RRRequest.seq - Requesting Router transmit Request messages to populate IA_PD with delegated prefix 

=head1 TARGET

  Router for DHCP client

=head1 SYNOPSIS

=begin html
  &nbsp;&nbsp;<A HREF="./RRRequest.seq">RRRequest.seq</A> [-tooloption ...] -pkt <A HREF="./RRRequest.def">RRRequest.def</A> -tooloption : v6eval tool option

=end html

=head1 TOPOLOGY

=begin html
<BLOCKQUOTE>
<PRE>
   TN       TN1
    |        |            ISP site
  --+----+---+----------- Link0   
         |
        NUT     Host
         |       |        Customer site
  -------+-------+------- Link1 3ffe:501:fffb:XXXX::/64
</PRE>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TABLE border=1>
   <TBODY>
    <TR>
      <TD rowSpan=4><TT>TN (Preference 200)</TT></TD>
      <TD><TT>Link-local</TT></TD>
      <TD><TT>fe80::200:ff:fe00:a0a0</TT></TD>
    </TR>
    <TR>
      <TD><TT>Ether</TT></TD>
      <TD><TT>00:00:00:00:a0:a0</TT></TD>
    </TR>
    <TR>
      <TD><TT>Delegate Prefix</TT></TD>
      <TD><TT>3ffe:501:fffb::</TT></TD>
    </TR>
    <TR>
      <TD><TT>Prefix Length</TT></TD>
      <TD><TT>48</TT></TD>
    </TR>
    <TR>
      <TD rowSpan=4><TT>TN1 (Preference 100)</TT></TD>
      <TD><TT>Link-local</TT></TD>
      <TD><TT>fe80::200:ff:fe00:a1a1</TT></TD>
    </TR>
    <TR>
      <TD><TT>Ether</TT></TD>
      <TD><TT>00:00:00:00:a1:a1</TT></TD>
    </TR>
    <TR>
      <TD><TT>Delegate Prefix</TT></TD>
      <TD><TT>3ffe:501:fffb::</TT></TD>
    </TR>
    <TR>
      <TD><TT>Prefix Length</TT></TD>
      <TD><TT>48</TT></TD>
    </TR>
    <TR>
      <TD rowspan="2"><TT>Host</TT></TD>
      <TD><TT>Link-local</TT></TD>
      <TD><TT>fe80::200:ff:fe00:101</TT></TD>
    </TR>
    <TR>
      <TD><TT>ether</TT></TD>
      <TD><TT>00:00:00:00:01:01</TT></TD></TR></TBODY>
    </TABLE>
</BLOCKQUOTE>

=end html

=head1 INITIALIZATION

=begin html
<OL>
  <LI>NUT sets up Prefix Delegation.
  <LI>NUT sets up Router Advertisement to the interface by the side of downstream.
</OL>
<BR>
<PRE>
Tester as Server          Target as Client        Tester as Host
    |                           |                           |
    |<--------------------------|                           |
    |   DHCP Solicit message    |                           |
    |                           |                           |
    |-------------------------->|                           |
    |   DHCP Advertise messages |                           |
    |   with Preference option  |                           |
    |   containing preference   |                           |
    |   value: 200              |                           |
    |                           |                           |
    |-------------------------->|                           |
    |   DHCP Advertise messages |                           |
    |   with Preference option  |                           |
    |   containing preference   |                           |
    |   value: 100              |                           |
    |                           |                           |
<BR>
  1. Wait DHCP Solicit message
  2. Send DHCP Advertise messages with preference value 200
  3. Send DHCP Advertise messages with preference value 100
<BR>
<b>Addresses</b>
<BLOCKQUOTE>
Solicit message<BR>
<TABLE border=1>
    <TBODY>
    <TR>
      <TD>Src</TD>
      <TD>NUT link-local address</TD>
    </TR>
    <TR>
      <TD>Dst</TD>
      <TD>All_DHCP_Relay_Agents_and_Servers</TD>
    </TR>
    </TBODY>
  </TABLE>
<BR>
All_DHCP_Relay_Agents_and_Servers FF02::1:2<BR>
Advertise message<BR>
<TABLE border=1>
    <TBODY>
    <TR>
      <TD>Src</TD>
      <TD>fe80::200:ff:fe00:a0a0</TD>
    </TR>
    <TR>
      <TD>Dst</TD>
      <TD>NUT link-local address</TD>
    </TR>
    </TBODY>
  </TABLE>
</BLOCKQUOTE>
<b>UDP Ports</b><BR>
      Clients listen for DHCP messages on UDP port 546
      Server listen for DHCP messages on UDP port 547<BR>
<b>DHCP Messages</b>
<BLOCKQUOTE>
DHCP Solicit message<BR>
<TABLE border=1>
    <TR>
      <TD colspan="2">msg-type</TD>
      <TD><b>SOLICIT</b>(1)</TD>
    </TR>
    <tr>
      <TD colspan="2">transaction-id</TD>
      <TD>The transaction ID for this message exchange</TD>
    </tr>
    <TR>
      <TD colspan="3">options</TD>
    </TR>
    <TR>
      <TD colspan="3"><b>Client Identifier Option</b> (MUST)</TD>
    </TR>
    <tr>
      <TD colspan="3"><b>IA_PD Option </b>(MUST)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>Code</TD>
      <TD>33 (TBD)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>IAID</TD>
      <TD>The unique identifier which client specified</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>T1</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>T2</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD colspan="3">Elapsed Time Option (MUST)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>elapsed-time</TD>
      <TD>ANY</TD>
    </tr>
    <TR>
      <TD colspan="3">Option Request Option (Optional)</TD>
    </TR>
</TABLE>
<BR>
DHCP Advertise message 1 with Preference option including pref-value 200<BR>
<TABLE border=1>
    <tr>
      <TD colspan="3">msg-type</TD>
      <TD><b>ADVERTISE</b>(2)</TD>
    </tr>
    <TR>
      <TD colspan="3">transaction-id</TD>
      <TD>The same transaction ID previous message</TD>
    </TR>
    <TR>
      <TD colspan="4">options</TD>
    </TR>
    <TR>
      <TD colspan="4">Client Identifier Option</TD>
    </TR>
    <TR>
      <TD colspan="4">Server Identifier Option</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">DUID Contents type</TD>
      <TD>1 Link-layer address plus time</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">hardware type</TD>
      <TD>1 Ether</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">time</TD>
      <TD>Time which the server included</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">link-layer address</TD>
      <TD><B>00:00:00:00:a0:a0</B></TD></TR>
    <tr>
      <TD colspan="4"><b>Preference Option</b></TD> 
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2"><B>pref-value</B></TD>                   
      <TD><b>200</b></TD> 
    </tr>
    <TR>
      <TD colspan="4">IA_PD Option</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">Code</TD>
      <TD>33 (TBD)</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">IAID</TD>
      <TD>Unique identifier which client specified</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">T1</TD>
      <TD>40</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">T2</TD>
      <TD>64</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="3">IA_PD Prefix Option</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>Code</TD>
      <TD>34 (TBD)</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>preferred-lifetime</TD>
      <TD>80</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>valid-lifetime</TD>
      <TD>120</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>prefix-length</TD>
      <TD>48</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>IPv6 prefix</TD>
      <TD>3ffe:501:fffb::</TD></TR>
</TABLE>
<BR>
DHCP Advertise message 2 with Preference option including pref-value 100<BR>
<TABLE border=1>
    <TR>
      <TD colspan="3">msg-type</TD>
      <TD><b>ADVERTISE</b>(2)</TD>
    </TR>
    <tr>
      <TD colspan="3">transaction-id</TD>
      <TD>The same transaction ID previous message</TD> 
    </tr>
    <TR>
      <TD colspan="4">options</TD>
    </TR>
    <TR>
      <TD colspan="4">Client Identifier Option</TD>
    </TR>
    <TR>
      <TD colspan="4">Server Identifier Option</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">DUID Contents type</TD>                    
      <TD>1 Link-layer address plus time</TD> 
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">hardware type</TD>   
      <TD>1 Ether</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">time</TD>
      <TD>Time which the server included</TD> 
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">link-layer address</TD>   
      <TD><B>00:00:00:00:a1:a1</B></TD></TR>
    <tr>
      <TD colspan="4"><b>Preference Option</b></TD> 
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2"><B>pref-value</B></TD>                   
      <TD><b>100</b></TD> 
    </tr>
    <TR>
      <TD colspan="4">IA_PD Option</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">Code</TD>
      <TD>33 (TBD)</TD></TR>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">IAID</TD>
      <TD>Unique identifier which client specified</TD>
    </tr>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">T1</TD>
      <TD>300</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">T2</TD>
      <TD>480</TD></TR>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="3">IA_PD Prefix Option</TD>                   
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>Code</TD>
      <TD>34 (TBD)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>preferred-lifetime</TD>
      <TD>600</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>valid-lifetime</TD>
      <TD>1200</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>prefix-length</TD>
      <TD>48</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>IPv6 prefix</TD>    
      <TD>3ffe:501:fffd::</TD>
    </tr>
</TABLE>
</BLOCKQUOTE>
</PRE>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
Tester as PE              Target as CPE             Tester as client
    |                           |                           |
    |<--------------------------|                           |
    |   <A HREF="#JDG1">Judgment #1</A>             |                           |
    |   DHCP Request message    |                           |
    |                           |                           |
    |           :               |                           |
    |   <A HREF="#JDG2">Judgment #2</A>             |                           |
    |  Contining REQ_MAX_RC(10) |                           |
    |   times                   |                           |
    |           :               |                           |
    |                           |                           |
    |<--------------------------|                           |
    |   <A HREF="#JDG3">Judgment #3</A>             |                           |
    |   DHCP Request message    |                           |
    |   to TN1's DUID           |                           |
    |        or                 |                           |
    |   DHCP Solicit message    |                           |
    |                           |                           |
    |                           |                           |
    v                           v
<BR>
  1. Wait until receiving DHCP Request message REQ_MAX_RC(10) times.
  2. NUT takes an action based on the client's local policy.
    -  Select another server from a list of servers known to the client;
       for example, servers that responded with an Advertise message
    -  Initiate the server discovery process described in section 17
    -  Terminate the configuration process and report failure
<BR>
<b>Addresses</b>
<BLOCKQUOTE>
Request messages<BR>
<TABLE border=1>
    <TBODY>
    <TR>
      <TD>Src</TD>
      <TD>NUT link-local address</TD>
    </TR>
    <TR>
      <TD>Dst</TD>
      <TD>All_DHCP_Relay_Agents_and_Servers</TD>
    </TR>
    </TBODY>
  </TABLE>
<BR>
All_DHCP_Relay_Agents_and_Servers FF02::1:2<BR>
</BLOCKQUOTE>
<b>UDP Ports</b><BR>
      Clients listen for DHCP messages on UDP port 546
      Server listen for DHCP messages on UDP port 547<BR>
<b>DHCP Messages</b>
<BLOCKQUOTE>
DHCP Request message with IA_PD option including TNs DUID<BR>
<TABLE border=1>
    <tr>
      <TD colspan="3">msg-type</TD>
      <TD><b>REQUEST</b>(3)</TD>
    </tr>
    <tr>
      <TD colspan="3">transaction-id</TD>
      <TD>The transaction ID for this message exchange</TD>
    </tr>
    <TR>
      <TD colspan="4">options</TD>
    </TR>
    <TR>
      <TD colspan="4"><b>Client Identifier Option </b> (MUST)</TD>
    </TR>
    <TR>
      <TD colspan="4"><b>Server Identifier Option </b> (MUST)</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">DUID Contents type</TD>
      <TD>1 Link-layer address plus time</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">hardware type</TD>
      <TD>1 Ether</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">time</TD>
      <TD>Time which the server included</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">link-layer address</TD>
      <TD><B>00:00:00:00:a0:a0</B></TD></TR>
    <tr>
      <TD colspan="4"><b>IA_PD Option </b> (MUST)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">Code</TD>
      <TD>33 (TBD)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">IAID</TD>
      <TD>Unique identifier which client specified</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">T1</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">T2</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="3">IA_PD Prefix Option (Optional)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>Code</TD>
      <TD>34 (TBD)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>preferred-lifetime</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>valid-lifetime</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>prefix-length</TD>
      <TD>48</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>IPv6 prefix</TD>
      <TD>3ffe:501:fffb::</TD>
    </tr>
    <tr>
      <TD colspan="4"> <b> Elapsed Time Option </b> (MUST)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">elapsed-time</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD colspan="4"> Option Request Option (Optional)</TD>
    </tr>
</TABLE>
<BR>
DHCP Request message with IA_PD option including TN1s DUID<BR>
<TABLE border=1>
    <tr>
      <TD colspan="3">msg-type</TD>
      <TD><b>REQUEST</b>(3)</TD>
    </tr>
    <tr>
      <TD colspan="3">transaction-id</TD>
      <TD>The transaction ID for this message exchange</TD>
    </tr>
    <TR>
      <TD colspan="4">options</TD>
    </TR>
    <TR>
      <TD colspan="4"><b>Client Identifier Option </b> (MUST)</TD>
    </TR>
    <TR>
      <TD colspan="4"><b>Server Identifier Option </b> (MUST)</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">DUID Contents type</TD>
      <TD>1 Link-layer address plus time</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">hardware type</TD>
      <TD>1 Ether</TD></TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">time</TD>
      <TD>Time which the server included</TD>
    </TR>
    <TR>
      <TD>&nbsp;</TD>
      <TD colspan="2">link-layer address</TD>
      <TD><B>00:00:00:00:a1:a1</B></TD></TR>
    <tr>
      <TD colspan="4"><b>IA_PD Option </b> (MUST)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">Code</TD>
      <TD>33 (TBD)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">IAID</TD>
      <TD>Unique identifier which client specified</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">T1</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">T2</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="3">IA_PD Prefix Option (Optional)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>Code</TD>
      <TD>34 (TBD)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>preferred-lifetime</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>valid-lifetime</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>prefix-length</TD>
      <TD>48</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD>&nbsp;</TD>
      <TD>IPv6 prefix</TD>
      <TD>3ffe:501:fffb::</TD>
    </tr>
    <tr>
      <TD colspan="4"> <b> Elapsed Time Option </b> (MUST)</TD>
    </tr>
    <tr>
      <TD>&nbsp;</TD>
      <TD colspan="2">elapsed-time</TD>
      <TD>ANY</TD>
    </tr>
    <tr>
      <TD colspan="4"> Option Request Option (Optional)</TD>
    </tr>
</TABLE>
<BR>
DHCP Solicit message is same above.<BR>
</BLOCKQUOTE>
</PRE>

=end html

=head1 JUDGEMENT

=begin html
<PRE>
<A NAME="JDG1"></A>
  1. DHCP Request message is recieved
<A NAME="JDG2"></A>
  2. DHCP Request message is received to REQ_MAX_RC(10) times.
<A NAME="JDG3"></A>
  3. NUT takes an action based on the client's local policy.
</PRE>

=end html

=head1 TERMINATION

  N/A

=head1 REFERENCE

=begin html
<PRE>
draft-ietf-dhc-dhcpv6-opt-prefix-delegation-01.txt
<HR>
11. Requesting router initiated prefix delegation <BR>
   <B>A requesting router uses the same message exchanges as described in
   section "DHCP Client-Initiated Configuration Exchange" of the DHCP
   specification [6] to obtain or update prefix(es) from a delegating
   router.</B>  The requesting router and the delegating router use the
   IA_PD Prefix option to exchange information about prefix(es) in much
   the same way IA Address options are used for assigned addresses.  <BR>
11.1 Requesting router behaviour <BR>
   <B>The requesting router uses a Request message to populate IA_PDs with
   prefixes.  The requesting router includes one or more IA_PD options
   in the Request message.</B>  The delegating router then returns the
   prefixes for the IA_PDs to the requesting router in IA_PD options in
   a Reply message.  <BR>
<HR>
draft-ietf-dhc-dhcpv6-28.txt
<HR>
14. Reliability of Client Initiated Message Exchanges <BR>
   see <A href=./retrans_mech>the retransmission mechanism</A> <BR>
15. Message Validation <BR>
15.4. Request Message <BR>
   Clients MUST discard any received Request messages.  <BR>
   <B>Servers MUST discard any received Request message that meet any of
   the following conditions:</B> <BR>
    -  the message does not include a Server Identifier option <BR>
    -  the contents of the Server Identifier option do not match the
       server's DUID <BR>
    -  the message does not include a Client Identifier option <BR>
18. DHCP Client-Initiated Configuration Exchange <BR>
   A client initiates a message exchange with a server or servers
   to acquire or update configuration information of interest.  The
   client may initiate the configuration exchange as part of the
   operating system configuration process, when requested to do
   so by the application layer, when required by Stateless Address
   Autoconfiguration or as required to extend the lifetime of an address
   (Renew and Rebind messages).  <BR>
18.1. Client Behavior <BR>
   <B>A client uses Request, Renew, Rebind, Release and Decline messages
   during the normal life cycle of addresses.</B>  It uses Confirm to
   validate addresses when it may have moved to a new link.  It uses
   Information-Request messages when it needs configuration information
   but no addresses.  <BR>
   If the client has a source address of sufficient scope that can be
   used by the server as a return address and the client has received
   a Server Unicast option (section 22.12) from the server, the client
   SHOULD unicast any Request, Renew, Release and Decline messages to
   the server.  <BR>
   DISCUSSION: <BR>
      Use of unicast may avoid delays due to relaying of messages
      by relay agents as well as avoid overhead and duplicate
      responses by servers due to delivery of client messages to
      multiple servers.  Requiring the client to relay all DHCP
      messages through a relay agent enables the inclusion of
      relay agent options in all messages sent by the client.  The
      server should enable the use of unicast only when relay
      agent options will not be used.  <BR>
18.1.1. Creation and Transmission of Request Messages <BR>
   The client uses a Request message to populate IAs with addresses and
   obtain other configuration information.  <B>The client includes one or
   more IA options in the Request message.</B>  The server then returns
   addresses and other information about the IAs to the client in IA
   options in a Reply message.  <BR>
   The client generates a transaction ID and inserts this value in the
   "transaction-id" field.  <BR>
   The client places the identifier of the destination server in a
   Server Identifier option.  <BR>
   <B>The client MUST include a Client Identifier option to identify itself
   to the server.</B>  The client adds any other appropriate options,
   including one or more IA options (if the client is requesting that
   the server assign it some network addresses).  <BR>
   <B>The client MUST include an Option Request option (see section 22.7)
   to indicate the options the client is interested in receiving.</B>  The
   client MAY include options with data values as hints to the server
   about parameter values the client would like to have returned.  <BR>
   The client includes a Reconfigure Accept option (see section
   indicating whether or not the client is willing to accept Reconfigure
   messages from the server.  <BR>
   <B>The client transmits the message according to section 14, using the
   following parameters:</B> <BR>
      IRT   REQ_TIMEOUT <BR>
      MRT   REQ_MAX_RT <BR>
      <B>MRC   REQ_MAX_RC</B> <BR>
      MRD   0 <BR>
   <B>If the message exchange fails, the client takes an action based on
   the client's local policy.</B>  Examples of actions the client might take
   include: <BR>
    -  Select another server from a list of servers known to the client;
       for example, servers that responded with an Advertise message <BR>
    -  Initiate the server discovery process described in section 17 <BR>
    -  Terminate the configuration process and report failure <BR>
5.5. Transmission and Retransmission Parameters <BR>
   This section presents a table of values used to describe the message
   transmission behavior of clients and servers.  <BR>
      Parameter     Default  Description
   -------------------------------------
   REQ_TIMEOUT       1 sec   Initial Request timeout
   REQ_MAX_RT       30 secs  Max Request timeout value
   <B>REQ_MAX_RC       10       Max Request retry attempts</B> <BR>
24.2. DHCP Message Types <BR>
   IANA is requested to record the following message types (defined
   in section 5.3).  IANA is requested to maintain a registry of DHCP <BR>
      REQUEST               3 <BR>
A. Appearance of Options in Message Types <BR>
   The following table indicates with a "*" the options are allowed in
   each DHCP message type: <BR>
        Client Server IA_NA  Option Pref  Time Relay Auth. Server
          ID     ID   IA_TA  Request            Msg.       Unica.
Request   *      *      *      *           *           *
         Status  Rap. User  Vendor Vendor Inter. Recon. Recon.
          Code  Comm. Class Class  Spec.    ID    Msg.  Accept
Request                 *     *      *                    *
</PRE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

