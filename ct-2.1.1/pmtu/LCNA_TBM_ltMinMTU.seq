#!/usr/bin/perl
#
# Copyright (C) 2002, 2003 Yokogawa Electric Corporation, 
# INTAP(Interoperability Technology Association for Information 
# Processing, Japan), IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
# $TINY: LCNA_TBM_ltMinMTU.seq,v 1.5 2002/03/05 02:59:09 masaxmasa Exp $
# 
########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
use V6evalTool;
use PMTU;

$IF=Link0;
$WAIT_TO_FIN_DAD=5;
$WAIT_TO_SET_PMTU=1;
$WAIT_TO_SET_NA=1;

%pktdesc = (
    ns                       => 'TN <--Neighbor Solicitation --------- NUT',
    ns_srcGlobal             => 'TN <--Neighbor Solicitation Global--- NUT',
    echo_request_1280_from_A => 'TN(A) ---ICMP Echo Request (1280)------> NUT',
    echo_reply_1280_to_A     => 'TN(A) <--ICMP Echo Reply   (1280)------- NUT',
    frag_echo_reply_1280_1st_mtu1200_A => 'TN(A) <--ICMP Echo Reply (1st MTU 1200)- NUT',
    frag_echo_reply_1280_2nd_mtu1200_A => 'TN(A) <--ICMP Echo Reply (2nd MTU 1200)- NUT',
    icmp6_TooBigMesg_1200_for_1280_A => 'TN(A) --ICMP PktTooBig(1200 lt MinMTU)-> NUT'

);

vLogHTML("Packet Too Big acception test");

# Initialize

flushtables($V6evalTool::NutDef{System});

if ($V6evalTool::NutDef{Type} eq "router"){
	vLogHTML("Your router have to assign prefix $PMTU::NUTPREFIX<BR>");
	vLogHTML("and use EUI-64 address<BR>");
	vLogHTML("Your router have to set default route $PMTU::DEFROUTE<BR>");

}else{
	vSend($IF,ra);
	vLogHTML("Ignoring DAD packets");
	vSleep($WAIT_TO_FIN_DAD);
#	vSend($IF,na);
}

# Test start

vCapture($IF);
vClear($IF);

#
# Test for Packet Too Big size=1200
#

# Send Triger Packet

vSend($IF, echo_request_1280_from_A);

%ret=vRecv($IF, 5,0,0,
	echo_reply_1280_to_A,
	ns_srcGlobal,
	ns);

if( $ret{status} !=0) {
    vLogHTML("TN COULD NOT receive Echo Reply nor ns from NUT<BR>");
    vLogHTML(vErrmsg(%ret));
    vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
    exit $V6evalTool::exitFail;  
}
if($ret{recvFrame} eq 'ns' || $ret{recvFrame} eq 'ns_srcGlobal') {
    if( $ret{recvFrame} eq 'ns') {
        PMTU::sendNA();
    }elsif( $ret{recvFrame} eq 'ns_srcGlobal') {
        PMTU::sendNA_srcGlobal();
    }

    vSleep($WAIT_TO_SET_NA);
    vClear($IF);
    vSend($IF, echo_request_1280_from_A);

    %ret=vRecv($IF, 5,0,0, echo_reply_1280_to_A );

    if( $ret{status} != 0) {
        vLogHTML("TN COULD NOT receive Echo Reply from NUT<BR>");  
        vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
        vClear($IF);
        exit $V6evalTool::exitFail;
    }elsif( $ret{recvFrame} eq 'echo_reply_1280_to_A') {
# Correct Case
        vLogHTML("TN received Echo Reply (Size=1280) from NUT<BR>");
        vLogHTML('OK');
    }
}elsif( $ret{recvFrame} eq 'echo_reply_1280_to_A') {
# Correct Case
    vLogHTML("TN received Echo Reply (Size=1280) from NUT<BR>");
    vLogHTML('OK');
}

#
# Send Packet Too Big Message MTU=1200
#

vClear($IF);
vSend($IF,icmp6_TooBigMesg_1200_for_1280_A);
vSleep($WAIT_TO_SET_PMTU);
vSend($IF, echo_request_1280_from_A);
vLogHTML("TN send ICMP echo Request again");

#-------------
%ret=vRecv($IF, 5,0,0,
	echo_reply_1280_to_A,
	frag_echo_reply_1280_1st_mtu1200_A,
	frag_echo_reply_1280_2nd_mtu1200_A
	);

if( $ret{status} != 0) {
    vLogHTML("TN COULD NOT receive Echo Reply from NUT");  
    vClear($IF);

}elsif( $ret{recvFrame} eq 'frag_echo_reply_1280_1st_mtu1200_A') {
    vLogHTML("TN received Echo Reply from NUT fragmented in 1200<BR>");
    %ret=vRecv($IF, 5,0,0,frag_echo_reply_1280_2nd_mtu1200_A);
    if( $ret{status} != 0) {
        vLogHTML("TN COULD NOT receive another Echo Reply from NUT<BR>");  
    }else {
        vLogHTML("TN  received Echo Reply from NUT Fragmented in 1200<BR>");  
    }
    vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
    vClear($IF);
    exit $V6evalTool::exitFail;

}elsif( $ret{recvFrame} eq 'echo_reply_1280_to_A') {
# Correct Case
    vLogHTML("TN received Echo Reply from NUT which is not fragmented<BR>");
    vLogHTML("OK");
    exit $V6evalTool::exitPass;

}


########################################################################
__END__

=head1 NAME

	LCNA_TBM_ltMinMTU - Verify the behavior of NUT when it receives Packet Too Big Message which contains smaller MTU value than Minimum MTU.

=head1 TARGET

	Host(LCNA)

=head1 SYNOPSIS

	LCNA_TBM_ltMinMTU.seq [-tooloption ...] -p LCNA_TBM_ltMinMTU.def

=head1 NETWORK CONFIGURATION

	In this test, NUT is a host(LCNA) and TN plays a Roll of Router and 
	other host.
	
	Phisical Network configuration
	
	--------+---------------+----------
		|		|
		NUT		TN



	Logical Network Configuration

				NUT
				|
	----------------+-------+--------
			|
			Router-A
			|
	----------------+-------+--------
		                | 
                              HOST-A

	In this test, NUT receives strange Packet Too Big Message. 
	- Smaller MTU(1200) than Minimum MTU(1280)


=head1 INITIALIZATION

        The TN send a RA to assign global address prefix.

           TN          NUT
	   |		|
        ---+------------+------

        ===multicast RA===>
        src=TN's link-local
        dst=LinkLocal-all-node                                                  
        M=0, O=0,
        Lifetime=3600, ReachableTime=60000, RetransTimer=1005
        Prefix:
           L=1, A=1,                       
           ValidLifetime=3600005, PreferredLifetime=3600005
           Prefix=3ffe:501:ffff:100::, PrefixLength=64                      
   
          Wait (5 sec.)
                 Ignoring DAD packets for global address.                 


=head1 TEST PROCEDURE

	"LCNA_TBM_ltMinMTU" Verify the behavior of NUT when it receives	
	Packet Too Big Message which contains smaller MTU value than 
	Minimum MTU.

           TN          NUT
	   |		|
        ---+------------+------

	1. PKT TOO BIG (MTU=1200) ------------------------------
	1.1
	TN send Echo Request.  
        TN(A) === echo request(1280) ===> NUT

	1.2
	NUT send Echo Reply.
        TN(A) <=== echo reply(1280) ===== NUT

	1.3
	TN send ICMPv6 Too Big Mesg include MTU (1200).
        TN(A) === ICMPv6 TooBigMesg(MTU=1200) ===> NUT

	1.4
	TN send Echo Request.  
        TN(A) === echo request(1280) ===> NUT

	1.5
	NUT send Echo Reply.
	<< JUDGMENT 1 >>
        TN(A) <=== echo reply(1280) ===== NUT


=head1 JUDGMENT

	<< JUDGMENT 1 -PASS- >>
		NUT send Echo Reply without fragment

		"PASS" means that NUT keeps valid MTU even though it receives Packet Too Big Message with smaller MTU than Minimum MTU.
		And fragmented packets are correct.

=head1 SEE ALSO

	perldoc V6evalTool
	perldoc V6evalRemote

=cut

