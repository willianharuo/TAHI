#!/usr/bin/perl
#
# Copyright (C) 2002, 2003 Yokogawa Electric Corporation, 
# INTAP(Interoperability Technology Association for Information 
# Processing, Japan), IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
# $TINY: LCNA_Reassemble.seq,v 1.7 2002/03/05 02:59:08 masaxmasa Exp $
# 

########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $ '; }
use V6evalTool;
use PMTU;

$IF=Link0;

%pktdesc = (
    ns                       => 'TN <--Neighbor Solicitation --------- NUT',
    ns_srcGlobal             => 'TN <--Neighbor Solicitation Global--- NUT',
    frag_echo_request_1280_1st_mtu1200_A => 'TN(A) --ICMP Echo Request (1st MTU 1200)-> NUT',
    frag_echo_request_1280_2nd_mtu1200_A => 'TN(A) --ICMP Echo Request (2nd MTU 1200)-> NUT',
    echo_reply_1280_to_A     => 'TN(A) <--ICMP Echo Reply   (1280)------- NUT',
);

##########################################################
#----- Check Target Type

$type=$V6evalTool::NutDef{Type};
if($type eq router) {
    vLogHTML("This test is for the host only<BR>");
    exit $V6evalTool::exitHostOnly;
}

if($type ne host) {
    vLogHTML(ndErrmsg("ERROR: $V6evalTool::NutDef{Type}: ".
		      "Unknown target type<BR>"));
    exit $V6evalTool::exitFail;
}

##########################################################

vLogHTML("Confirm if the NUT can Re-assemble Fragmented Packets.");

# Initialize

flushtables($V6evalTool::NutDef{System});

vSend($IF,ra);
vSleep($WAIT_TO_FIN_DAD);
vSend($IF,na);
vLogHTML("Ignoring DAD packets");

# Test start

vCapture($IF);
vClear($IF);

#######################################################
#  first TN send fragmented packets total size=1280
#######################################################
vSend($IF, frag_echo_request_1280_1st_mtu1200_A);
vSend($IF, frag_echo_request_1280_2nd_mtu1200_A);


%ret=vRecv($IF, 5,0,0,
	echo_reply_1280_to_A,
	Param_unrecog_frag_echo_request_1280_1st_mtu1200_A,
	Param_unrecog_frag_echo_request_1280_2nd_mtu1200_A,
	ns_srcGlobal,
	ns
	);

if( $ret{status} !=0) {
    vLogHTML("TN COULD NOT receive Echo Reply nor ns from NUT<BR>");
    vLogHTML("NUT seems not be able to reassemble fragmented packets.<BR>");
    exit $V6evalTool::exitFail;
}
if($ret{recvFrame} eq 'ns' || $ret{recvFrame} eq 'ns_srcGlobal') {
    if( $ret{recvFrame} eq 'ns') {
        PMTU::sendNA();
    }elsif( $ret{recvFrame} eq 'ns_srcGlobal') {
        PMTU::sendNA_srcGlobal();
    }

    vSleep($WAIT_TO_SET_NA);
    vClear($IF);
    vSend($IF, echo_request_1280_from_A);

    %ret=vRecv($IF, 5,0,0,
	echo_reply_1280_to_A,
	Param_unrecog_frag_echo_request_1280_1st_mtu1200_A,
	Param_unrecog_frag_echo_request_1280_2nd_mtu1200_A
	);

    if( $ret{status} != 0) {
        vLogHTML("TN COULD NOT receive Echo Reply from NUT<BR>");
        vLogHTML("NUT seems not be able to reassemble fragmented packets.<BR>");
        vLogHTML('<FONT COLOR="#FF0000">NG</FONT>');
        vClear($IF);
        exit $V6evalTool::exitFail;
    }elsif( $ret{recvFrame} eq 'Param_unrecog_frag_echo_request_1280_1st_mtu1200_A') {
        vLogHTML("TN received ICMP Error Message from NUT<BR>");
        vLogHTML("    Parameter Probrem<BR>");
        vLogHTML("        Unrecognized Header<BR>");
        vLogHTML('OK');
        %ret=vRecv($IF, 5,0,0,
    	Param_unrecog_frag_echo_request_1280_2nd_mtu1200_A,
    	);
        if( $ret{status} == 0 ) {
# Correct Case
            vLogHTML("TN received ICMP Error Message from NUT<BR>");
            vLogHTML("    Parameter Probrem<BR>");
            vLogHTML("        Unrecognized Header<BR>");
            vLogHTML('OK');
        }else{
            vLogHTML("TN could not receive ICMP Error Message for 2nd packet from NUT<BR>");
            vLogHTML('NG');
            exit $V6evalTool::exitFail;
        }
    }elsif( $ret{recvFrame} eq 'Param_unrecog_frag_echo_request_1280_2nd_mtu1200_A') {
        vLogHTML("TN received ICMP Error Message from NUT<BR>");
        vLogHTML("    Parameter Probrem<BR>");
        vLogHTML("        Unrecognized Header<BR>");
        vLogHTML('OK');
        %ret=vRecv($IF, 5,0,0,
    	Param_unrecog_frag_echo_request_1280_1st_mtu1200_A,
    	);
        if( $ret{status} == 0 ) {
# Correct Case
            vLogHTML("TN received ICMP Error Message from NUT<BR>");
            vLogHTML("    Parameter Probrem<BR>");
            vLogHTML("        Unrecognized Header<BR>");
            vLogHTML('OK');
        }else{
            vLogHTML("TN could not receive ICMP Error Message for 1st packet from NUT<BR>");
            vLogHTML('NG');
            exit $V6evalTool::exitFail;
        }
    }elsif( $ret{recvFrame} eq 'echo_reply_1280_to_A') {
# Correct Case
        vLogHTML("TN received Echo Reply (Size=1280) from NUT<BR>");
        vLogHTML('OK');
    }
}elsif( $ret{recvFrame} eq 'Param_unrecog_frag_echo_request_1280_1st_mtu1200_A') {
    vLogHTML("TN received ICMP Error Message from NUT<BR>");
    vLogHTML("    Parameter Probrem<BR>");
    vLogHTML("        Unrecognized Header<BR>");
    vLogHTML('OK');
    %ret=vRecv($IF, 5,0,0,
	Param_unrecog_frag_echo_request_1280_2nd_mtu1200_A,
	);
    if( $ret{status} == 0 ) {
# Correct Case
        vLogHTML("TN received ICMP Error Message from NUT<BR>");
        vLogHTML("    Parameter Probrem<BR>");
        vLogHTML("        Unrecognized Header<BR>");
        vLogHTML('OK<BR>');
    }else{
        vLogHTML("TN could not receive ICMP Error Message for 2nd packet from NUT<BR>");
        vLogHTML('NG');
        exit $V6evalTool::exitFail;
    }
}elsif( $ret{recvFrame} eq 'Param_unrecog_frag_echo_request_1280_2nd_mtu1200_A') {
    vLogHTML("TN received ICMP Error Message from NUT<BR>");
    vLogHTML("    Parameter Probrem<BR>");
    vLogHTML("        Unrecognized Header<BR>");
    vLogHTML('OK');
    %ret=vRecv($IF, 5,0,0,
	Param_unrecog_frag_echo_request_1280_1st_mtu1200_A,
	);
    if( $ret{status} == 0 ) {
# Correct Case
        vLogHTML("TN received ICMP Error Message from NUT<BR>");
        vLogHTML("    Parameter Probrem<BR>");
        vLogHTML("        Unrecognized Header<BR>");
        vLogHTML('OK<BR>');
    }else{
        vLogHTML("TN could not receive ICMP Error Message for 1st packet from NUT<BR>");
        vLogHTML('NG');
        exit $V6evalTool::exitFail;
    }
}elsif( $ret{recvFrame} eq 'echo_reply_1280_to_A') {
# Correct Case
    vLogHTML("TN received Echo Reply (Size=1280) from NUT<BR>");
    vLogHTML('OK');
}

exit $V6evalTool::exitPass;


########################################################################
__END__

=head1 NAME

	LCNA - Reassembling check 

=head1 TARGET

	Host(LCNA)

=head1 SYNOPSIS

	LCNA_Reassemble.seq [-tooloption ...] -p LCNA_Reassemble.def

=head1 NETWORK CONFIGURATION

	This test evaluate the behavior of NUT when it receives fragmented
	packets.
	In this test, NUT is a HOST(LCNA) and TN plays a Roll of Router and 
	other host.
	
	Phisical Network configuration
	
	--------+---------------+----------
                |               |
               NUT              TN

	Logical Network Configuration

                               NUT
                                |
	----------------+-------+--------
			|
                     Router
			|
	----------------+-------+--------
		                |
                              HOST-A


	In this test, NUT receives framgented icmp echo request.


=head1 INITIALIZATION

        The TN send a RA to assign global address prefix.

           TN          NUT
	   |		|
        ---+------------+------

        ===multicast RA===>
        src=TN's link-local
        dst=LinkLocal-all-node                                                  
        M=0, O=0,
        Lifetime=3600, ReachableTime=60000, RetransTimer=1005
        SLLOption:
	   SLL=TN's Mac address
        Prefix:
           L=1, A=1,                       
           ValidLifetime=3600005, PreferredLifetime=3600005
           Prefix=3ffe:501:ffff:100::, PrefixLength=64                      
   
          Wait (5 sec.)
                 Ignoring DAD packets for global address.                 


=head1 TEST PROCEDURE

         "LCNA_Reassemble" verify NUT's behavior when it receives 
         Fragmented packets.
         Only verify if NUT can reassemble or not.

           TN          NUT
	   |		|
        ---+------------+------

	1. Confirm Reassembling (MTU=1200) --------------------------
	1.1
	TN sends fragmented Echo Request.
	Original packet size is 1280. 
	TN(A) ==ICMP Echo Request (1st MTU 1200)=> NUT
	TN(A) ==ICMP Echo Request (2nd MTU 1200)=> NUT

	1.2
	NUT send Echo Reply.
	<< JUDGMENT 1 >>
	TN(A) <==ICMP Echo Reply   (1280)======= NUT


=head1 JUDGMENT

	<< JUDGMENT 1 -PASS- >>
		NUT send Echo Reply

		"PASS" means that NUT recognizes fragmented packet and reassemble them.
		And replied packet was correct.


=head1 SEE ALSO

	perldoc V6evalTool
	perldoc V6evalRemote

=cut

