//
// Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
// IPA (Information-technology Promotion Agency, Japan).
// All rights reserved.
// 
// Redistribution and use of this software in source and binary forms, with 
// or without modification, are permitted provided that the following 
// conditions and disclaimer are agreed and accepted by the user:
// 
// 1. Redistributions of source code must retain the above copyright 
// notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project which 
// is related to this software (hereinafter referred to as "project") nor 
// the names of the contributors may be used to endorse or promote products 
// derived from this software without specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written 
// notification to the copyrighters. However, using this software for the 
// purpose of testing or evaluating any products including merchantable 
// products may be permitted without any notification to the copyrighters.
// 
// 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/pmtu/PMTU_ORG.def,v 1.1 2003/03/26 10:32:32 miyata Exp $


//
// OFFLINK_GLOBAL_ADDRESS		Off-Link host's Global Address
// TN_GLOBAL_ADDRESS   			TN's Global Address
//

// Prefix
#define OFFLINK_GLOBAL_UCAST_PRFX _GLOBAL9_UCAST_PRFX
#define TN_GLOBAL_UCAST_PRFX _GLOBAL0_UCAST_PRFX
#define NUT_GLOBAL_UCAST_PRFX _GLOBAL0_UCAST_PRFX
// Prefix Length
#define GLOBAL_UCAST_PRFXLEN _GLOBAL0_UCAST_PRFXLEN
// Address
#define TN_GLOBAL_ADDRESS v6merge(   TN_GLOBAL_UCAST_PRFX, \
                GLOBAL_UCAST_PRFXLEN, \
                v6("::1"))
#define NUT_GLOBAL_ADDRESS v6merge(   NUT_GLOBAL_UCAST_PRFX, \
                GLOBAL_UCAST_PRFXLEN, \
                nutv6())
//
// define Packets
//

#define PMTU_echo_request_tn2nut_GLOBALADDR( \
	_pNAME, \
	_EchoRequest_data \
) \
FEM_icmp6_echo_request( \
	 _pNAME, \
	 _HETHER_tn2nut, \
		{ \
		_SRC(OFFLINK_GLOBAL_ADDRESS); \
		_DST(NUT_GLOBAL_ADDRESS); \
	 }, \
		 { \
		 payload=_EchoRequest_data; \
	 } \
)  

#define PMTU_echo_request_tn2nut_GLOBALADDR_ONLINK( \
	_pNAME, \
	_EchoRequest_data \
) \
FEM_icmp6_echo_request( \
	 _pNAME, \
	 _HETHER_tn2nut, \
		{ \
		_SRC(TN_GLOBAL_ADDRESS); \
		_DST(NUT_GLOBAL_ADDRESS); \
	 }, \
		 { \
		 payload=_EchoRequest_data; \
	 } \
)  

#define PMTU_echo_reply_nut2tn_GLOBALADDR( \
	_pNAME,\
	_EchoReply_data \
) \
FEM_icmp6_echo_reply( \
	_pNAME, \
	_HETHER_nut2tn, \
		{ \
		_SRC(NUT_GLOBAL_ADDRESS); \
		_DST(OFFLINK_GLOBAL_ADDRESS); \
	}, \
		{ \
		payload=_EchoReply_data; \
	} \
)

#define PMTU_echo_reply_nut2tn_GLOBALADDR_ONLINK( \
	_pNAME,\
	_EchoReply_data \
) \
FEM_icmp6_echo_reply( \
	_pNAME, \
	_HETHER_nut2tn, \
		{ \
		_SRC(NUT_GLOBAL_ADDRESS); \
		_DST(TN_GLOBAL_ADDRESS); \
	}, \
		{ \
		payload=_EchoReply_data; \
	} \
)

#define _HDR_FRAGMENT_NAME(_pNAME) _FRAGMENT_##_pNAME 
#define _PAYLOAD_NAME(_pNAME) _PAYLOAD_##_pNAME 



#define PMTU_fragment(_pNAME,_pETHER,_oHDR_IPV6, \
					 _oHDR_FRAGMENT,_oPAYLOAD) \
FEM_hdr_ipv6_exth(_pNAME,_pETHER,_oHDR_IPV6, \
		{ \
		header=_HDR_IPV6_NAME(_pNAME); \
                exthdr=_HDR_FRAGMENT_NAME(_pNAME); \
                upper=_PAYLOAD_NAME(_pNAME); \
	} \
) \
Hdr_Fragment _HDR_FRAGMENT_NAME(_pNAME) \
	_oHDR_FRAGMENT \
Payload _PAYLOAD_NAME(_pNAME) \
	_oPAYLOAD



#define PMTU_fragment_tn2nut_GLOBALADDR(_pNAME,_oHDR_FRAGMENT,_oPAYLOAD) \
PMTU_fragment( \
	 _pNAME, \
	 _HETHER_tn2nut, \
		{ \
		NextHeader=44; \
         _SRC(OFFLINK_GLOBAL_ADDRESS); \
		 _DST(NUT_GLOBAL_ADDRESS); \
	 }, \
	 _oHDR_FRAGMENT,\
	 _oPAYLOAD \
)


#define PMTU_fragment_nut2tn_GLOBALADDR(_pNAME,_oHDR_FRAGMENT,_oPAYLOAD) \
PMTU_fragment( \
	_pNAME, \
	_HETHER_nut2tn, \
		{ \
		NextHeader=44; \
        _SRC(NUT_GLOBAL_ADDRESS); \
        _DST(OFFLINK_GLOBAL_ADDRESS); \
	}, \
	_oHDR_FRAGMENT, \
	_oPAYLOAD \
)

//
// Packets for Initialize NUT
//

_HETHER_define(HETHER_nut2onlinksolnode,  nutether(), _ETHER_SOLNODE_MCAST(TN_GLOBAL_ADDRESS))

_HETHER_define(HETHER_nut2tn_oneof,  nutether(), oneof(tnether(),_ETHER_SOLNODE_MCAST(TN_GLOBAL_ADDRESS),_ETHER_SOLNODE_MCAST(tnv6())))



FEM_icmp6_ra (
	ra,
	_HETHER_tn2allnodes,
		{
		_SRC(tnv6());
		_DST(v6(_LLOCAL_ALLNODES_MCAST_ADDR));
		HopLimit=255;
	},
		{
		CurHopLimit=254;
		LifeTime=3600;
		ReachableTime=0;
		RetransTimer=1005;
		option=_SLLOPT_tn;
		option=prefix_ra;
	}
)
	
Opt_ICMPv6_Prefix prefix_ra { 
	LFlag=1;
	AFlag=1;
	ValidLifetime=3600005;
	PreferredLifetime=3600005;
	Prefix=v6(NUT_GLOBAL_UCAST_PRFX);
}

//
// ns
// NUT's link local address 
//           to
// TN's solicited Multicast address or TN's unicast address

FEM_icmp6_ns (
	ns,
	HETHER_nut2tn_oneof,
		{
		_SRC(nutv6());
		_DST(oneof(_IPV6_SOLNODE_MCAST(tnv6()),_IPV6_SOLNODE_MCAST(TN_GLOBAL_ADDRESS),tnv6(),TN_GLOBAL_ADDRESS));
		HopLimit=255;
	},
		{
		TargetAddress=tnv6();
		option=_SLLOPT_nut;
	}
)

//
// ns
// NUT's global address
//           to
// TN's solicited Multicast address or TN's unicast address

FEM_icmp6_ns (
	ns_srcGlobal,
	HETHER_nut2tn_oneof,
		{
		_SRC(NUT_GLOBAL_ADDRESS);
		_DST(oneof(_IPV6_SOLNODE_MCAST(tnv6()),_IPV6_SOLNODE_MCAST(TN_GLOBAL_ADDRESS),tnv6(),TN_GLOBAL_ADDRESS));
		HopLimit=255;
	},
		{
		TargetAddress=tnv6();
		option=_SLLOPT_nut;
	}
)

//
// ns
// NUT's link local address 
//           to
// TN's solicited Multicast address or TN's unicast address

FEM_icmp6_ns (
	ns_global,
	HETHER_nut2tn_oneof,
		{
		_SRC(nutv6());
		_DST(oneof(_IPV6_SOLNODE_MCAST(tnv6()),_IPV6_SOLNODE_MCAST(TN_GLOBAL_ADDRESS),tnv6(),TN_GLOBAL_ADDRESS));
		HopLimit=255;
	},
		{
		TargetAddress=TN_GLOBAL_ADDRESS;
		option=_SLLOPT_nut;
	}
)

//
// ns
// NUT's global address
//           to
// TN's solicited Multicast address or TN's unicast address

FEM_icmp6_ns (
	ns_srcGlobal_global,
	HETHER_nut2tn_oneof,
		{
		_SRC(NUT_GLOBAL_ADDRESS);
		_DST(oneof(_IPV6_SOLNODE_MCAST(tnv6()),_IPV6_SOLNODE_MCAST(TN_GLOBAL_ADDRESS),tnv6(),TN_GLOBAL_ADDRESS));
		HopLimit=255;
	},
		{
		TargetAddress=TN_GLOBAL_ADDRESS;
		option=_SLLOPT_nut;
	}
)
//
// ns
// NUT's link local  address
//           to
// TN's link local address

FEM_icmp6_ns (
	ns_nosol,
	_HETHER_nut2tn,
		{
		_SRC(oneof(nutv6(),NUT_GLOBAL_ADDRESS));
		_DST(tnv6());
		HopLimit=255;
	},
		{
		TargetAddress=tnv6();
		option=_SLLOPT_nut;
	}
)

//
// ns
// NUT's link local  address
//           to
// TN's global address

FEM_icmp6_ns (
	ns2tn_global_nosol,
	HETHER_nut2onlinksolnode,
		{
		_SRC(oneof(nutv6(),NUT_GLOBAL_ADDRESS));
		_DST(TN_GLOBAL_ADDRESS);
		HopLimit=255;
	},
		{
		TargetAddress=TN_GLOBAL_ADDRESS;
		option=_SLLOPT_nut;
	}
)

//
// na
// TN's link local  address
//           to
// NUT's link local address
//
// Targetaddress TN's link local address

FEM_icmp6_na (
	na,
	_HETHER_tn2nut,
		{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit=255;
        },
		{
		SFlag=1;
		OFlag=1;
		TargetAddress=tnv6();
		option=_TLLOPT_tn;
	}
)
//
// na
// TN's global address
//           to
// NUT's global address
//
// Targetaddress TN's link local address

FEM_icmp6_na (
	na_srcGlobal,
	_HETHER_tn2nut,
		{
		_SRC(TN_GLOBAL_ADDRESS);
        _DST(NUT_GLOBAL_ADDRESS); 
		HopLimit=255;
        },
		{
		SFlag=1;
		OFlag=1;
		TargetAddress=tnv6();
		option=_TLLOPT_tn;
	}
)

//
// na
// TN's global  address
//           to
// NUT's global address
//
// Targetaddress TN's global address
FEM_icmp6_na (
	na_global,
	_HETHER_tn2nut,
		{
        _SRC(TN_GLOBAL_ADDRESS); 
        _DST(NUT_GLOBAL_ADDRESS); 
		HopLimit=255;
        },
		{
		SFlag=1;
		OFlag=1;
		TargetAddress=TN_GLOBAL_ADDRESS;
		option=_TLLOPT_tn;
	}
)

//
// na
// TN's link local  address
//           to
// NUT's link local address
//
// Targetaddress TN's global address
FEM_icmp6_na (
	na_srcLocal_global,
	_HETHER_tn2nut,
		{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit=255;
        },
		{
		SFlag=1;
		OFlag=1;
		TargetAddress=TN_GLOBAL_ADDRESS;
		option=_TLLOPT_tn;
	}
)
//
// na
// TN's global  address
//           to
// NUT(router)'s global address
//
// Targetaddress TN's global address
FEM_icmp6_na (
	na_router_global,
	_HETHER_tn2nut,
		{
        _SRC(TN_GLOBAL_ADDRESS); 
        _DST(NUT_GLOBAL_ADDRESS); 
		HopLimit=255;
        },
		{
		RFlag=1; 
		SFlag=1;
		OFlag=1;
		TargetAddress=TN_GLOBAL_ADDRESS;
		option=_TLLOPT_tn;
	}
)

//
// na
// TN's link local address
//           to
// NUT(router)'s link local address
//
// Targetaddress TN's global address
FEM_icmp6_na (
	na_srcLocal_router_global,
	_HETHER_tn2nut,
		{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit=255;
        },
		{
		RFlag=1; 
		SFlag=1;
		OFlag=1;
		TargetAddress=TN_GLOBAL_ADDRESS;
		option=_TLLOPT_tn;
	}
)
//
// na
// TN's link local  address
//           to
// NUT(router)'s link local address
//
// Targetaddress TN's link local address
FEM_icmp6_na (
	na_router,
	_HETHER_tn2nut,
		{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit=255;
        },
		{
		RFlag=1; 
		SFlag=1;
		OFlag=1;
		TargetAddress=tnv6();
		option=_TLLOPT_tn;
	}
)
//
// na
// TN's link local  address
//           to
// NUT(router)'s link local address
//
// Targetaddress TN's link local address
FEM_icmp6_na (
	na_srcGlobal_router,
	_HETHER_tn2nut,
		{
        _SRC(TN_GLOBAL_ADDRESS); 
        _DST(NUT_GLOBAL_ADDRESS); 
		HopLimit=255;
        },
		{
		RFlag=1; 
		SFlag=1;
		OFlag=1;
		TargetAddress=tnv6();
		option=_TLLOPT_tn;
	}
)

Payload ping_data
	{
	data=repeat(0xff,6);
	}

FEM_icmp6_echo_request (
	EchoRequest,
	_HETHER_tn2nut,
		{
		_SRC(tnv6());
		_DST(nutv6());
       	},
		{
		payload=ping_data;
	}
)



PMTU_echo_request_tn2nut_GLOBALADDR (
	EchoRequest_tn2nut_global,
	ping_data
)

FEM_icmp6_echo_reply (
	EchoReply,
	_HETHER_nut2tn,
		{
		_SRC(nutv6());
		_DST(tnv6());
	},
		{
		payload=ping_data;
	}
)

PMTU_echo_reply_nut2tn_GLOBALADDR (
	EchoReply_nut2tn_global,
	ping_data
)

_HETHER_define(pmtu_hether_nut2z, nutether(), ether(A9N_MAC_ADDR))


//----------------------------------------------------------------------
// echo-request
//      TN(link-local) ==> NUT(link-local)
//----------------------------------------------------------------------
FEM_icmp6_echo_request(pmtu_echo_request, _HETHER_tn2nut,
        {
         _SRC(tnv6());
         _DST(nutv6());},
        {
         payload=pmtu_echo_data;
        }
)
//----------------------------------------------------------------------
// echo-request
//      TN(Global) ==> NUT(Global)
//----------------------------------------------------------------------
FEM_icmp6_echo_request(pmtu_global_echo_request, _HETHER_tn2nut,
        {
         _SRC(TN_GLOBAL_ADDRESS);
         _DST(NUT_GLOBAL_ADDRESS);},
        {
         payload=pmtu_echo_data;
        }
)
//----------------------------------------------------------------------
// echo-reply
//      NUT(link-local) ==> TN(link-local)
//----------------------------------------------------------------------
FEM_icmp6_echo_reply(pmtu_echo_reply, _HETHER_nut2tn,
        {
         _SRC(nutv6());
         _DST(tnv6());
        },
        {
         payload=pmtu_echo_data;
        }
)
//----------------------------------------------------------------------
// echo-reply
//      NUT(Global) ==> TN(Global)
//----------------------------------------------------------------------
FEM_icmp6_echo_reply(pmtu_global_echo_reply, _HETHER_nut2tn,
        {
         _SRC(NUT_GLOBAL_ADDRESS);
         _DST(TN_GLOBAL_ADDRESS);
        },
        {
         payload=pmtu_echo_data;
        }
)
//----------------------------------------------------------------------
Payload pmtu_echo_data {
        data=repeat(0xff,0x10);
}

//----------------------------------------------------------------------
// multicast NS w/ SLLA
//      NUT(link-local) ==> TN(solnode[link-local])
//      target=TN(link-local)
//      w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_multicast_ns, _HETHER_nut2tnsolnode,
        {
		_SRC(oneof(nutv6(),nut2v6(NUT_GLOBAL_UCAST_PRFX,GLOBAL_UCAST_PRFXLEN)));
         _DST(_IPV6_SOLNODE_MCAST(tnv6()));
         HopLimit=255;
        },
        {
         TargetAddress=tnv6();
         option=_SLLOPT_nut;
        }
)
//----------------------------------------------------------------------
// multicast NS w/ SLLA
//      NUT(Global) ==> TN(solnode[Global])
//      target=TN(Global)
//      w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_multicast_global_ns, HETHER_nut2tn_oneof,
        {
         _SRC(oneof(nutv6(),NUT_GLOBAL_ADDRESS));
         _DST(_IPV6_SOLNODE_MCAST(TN_GLOBAL_ADDRESS));
         HopLimit=255;
        },
        {
         TargetAddress=TN_GLOBAL_ADDRESS;
         option=_SLLOPT_nut;
        }
)
//----------------------------------------------------------------------
// unicast NS w/o SLLA
//      NUT(link-local) ==> TN(link-local)
//      target=TN(link-local)
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_ns, _HETHER_nut2tn,
        {
		_SRC(oneof(nutv6(),nut2v6(NUT_GLOBAL_UCAST_PRFX,GLOBAL_UCAST_PRFXLEN)));
         _DST(tnv6());
         HopLimit=255;
        },
        {
         TargetAddress=tnv6();
        }
)
//----------------------------------------------------------------------
// unicast NS w/o SLLA
//      NUT(Global) ==> TN(Global)
//      target=TN(Global)
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_global_ns, _HETHER_nut2tn,
        {
         _SRC(oneof(nutv6(),NUT_GLOBAL_ADDRESS));
         _DST(TN_GLOBAL_ADDRESS);
         HopLimit=255;
        },
        {
         TargetAddress=TN_GLOBAL_ADDRESS;
        }
)
//----------------------------------------------------------------------
// unicast NS w/ SLLA
//      NUT(link-local) ==> TN(link-local)
//      target=TN(link-local)
//      w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_ns_sll, _HETHER_nut2tn,
        {
		_SRC(oneof(nutv6(),nut2v6(NUT_GLOBAL_UCAST_PRFX,GLOBAL_UCAST_PRFXLEN)));
         _DST(tnv6());
         HopLimit=255;
        },
        {
         TargetAddress=tnv6();
         option=_SLLOPT_nut;
        }
)
//----------------------------------------------------------------------
// unicast NS w/ SLLA
//      NUT(Global) ==> TN(Global)
//      target=TN(Global)
//      w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_global_ns_sll, _HETHER_nut2tn,
        {
         _SRC(oneof(nutv6(),NUT_GLOBAL_ADDRESS));
         _DST(TN_GLOBAL_ADDRESS);
         HopLimit=255;
        },
        {
         TargetAddress=TN_GLOBAL_ADDRESS;
         option=_SLLOPT_nut;
        }
)

//----------------------------------------------------------------------
// echo-reply
//      NUT(link-local) ==> TN(link-local, but different LLA)
//----------------------------------------------------------------------
FEM_icmp6_echo_reply(pmtu_echo_reply_to_z2, pmtu_hether_nut2z,
        {
         _SRC(nutv6());
         _DST(tnv6());
        },
        {
         payload=pmtu_echo_data;
        }
)
//----------------------------------------------------------------------
// echo-reply
//      NUT(Global) ==> TN(Global, but different LLA)
//----------------------------------------------------------------------
FEM_icmp6_echo_reply(pmtu_global_echo_reply_to_z2, pmtu_hether_nut2z,
        {
         _SRC(NUT_GLOBAL_ADDRESS);
         _DST(TN_GLOBAL_ADDRESS);
        },
        {
         payload=pmtu_echo_data;
        }
)
//----------------------------------------------------------------------
// unicast NS w/o SLLA
//      NUT(link-local) ==> TN(link-local, but different LLA)
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_ns_to_z, pmtu_hether_nut2z,
        {
		_SRC(oneof(nutv6(),nut2v6(NUT_GLOBAL_UCAST_PRFX,GLOBAL_UCAST_PRFXLEN)));
         _DST(tnv6());
         HopLimit=255;
        },
        {
         TargetAddress=tnv6();
        }
)
//----------------------------------------------------------------------
// unicast NS w/o SLLA
//      NUT(Global) ==> TN(Global, but different LLA)
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_global_ns_to_z, pmtu_hether_nut2z,
        {
         _SRC(oneof(nutv6(),NUT_GLOBAL_ADDRESS));
         _DST(TN_GLOBAL_ADDRESS);
         HopLimit=255;
        },
        {
         TargetAddress=TN_GLOBAL_ADDRESS;
        }
)
//----------------------------------------------------------------------
// unicast NS w/ SLLA
//      NUT(link-local) ==> TN(link-local, but different LLA)
//      target=TN(link-local)
//      w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_ns_sll_to_z, pmtu_hether_nut2z,
        {
		_SRC(oneof(nutv6(),nut2v6(NUT_GLOBAL_UCAST_PRFX,GLOBAL_UCAST_PRFXLEN)));
         _DST(tnv6());
         HopLimit=255;
        },
        {
         TargetAddress=tnv6();
         option=_SLLOPT_nut;
        }
)
//----------------------------------------------------------------------
// unicast NS w/ SLLA
//      NUT(Global) ==> TN(Global, but different LLA)
//      target=TN(Global)
//      w/ SLLA
//----------------------------------------------------------------------
FEM_icmp6_ns(pmtu_unicast_global_ns_sll_to_z, pmtu_hether_nut2z,
        {
         _SRC(oneof(nutv6(),NUT_GLOBAL_ADDRESS));
         _DST(TN_GLOBAL_ADDRESS);
         HopLimit=255;
        },
        {
         TargetAddress=TN_GLOBAL_ADDRESS;
         option=_SLLOPT_nut;
        }
)
