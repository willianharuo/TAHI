/* 
 *
 * Copyright (C) 2003 Yokogawa Electric Corporation , 
 * INTAP(Interoperability Technology Association for Information 
 * Processing, Japan) , IPA (Information-technology Promotion Agency,Japan)
 * Copyright (C) IBM Corporation 2003.
 * All rights reserved.
 *
 * Redistribution and use of this software in source and binary forms, with 
 * or without modification, are permitted provided that the following 
 * conditions and disclaimer are agreed and accepted by the user:
 *
 * 1. Redistributions of source code must retain the above copyright 
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 * notice, this list of conditions and the following disclaimer in the 
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the names of the copyrighters, the name of the project which 
 * is related to this software (hereinafter referred to as "project") nor 
 * the names of the contributors may be used to endorse or promote products 
 * derived from this software without specific prior written permission.
 *
 * 4. No merchantable use may be permitted without prior written 
 * notification to the copyrighters. However, using this software for the 
 * purpose of testing or evaluating any products including merchantable 
 * products may be permitted without any notification to the copyrighters.
 *
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
 * BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
 * COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    Author: Kazuo Hiekata <hiekata@yamato.ibm.com>
 *
 */
 /*-----------------------------------------------------------------------------------*
 *
 *  General
 *
 *-----------------------------------------------------------------------------------*/
#define LLOCAL_PREFIX "fe80::"
#define LINK_LOCAL_MULTICAST "ff02::1"

_HETHER_define(_HETHER_any        , any  , any)
/*-----------------------------------------------------------------------------------*
 *
 *  Link0 "3ffe:501:ffff:100::" Address and Ether Frame Header
 *
 *-----------------------------------------------------------------------------------*/
#define LINK0_GLOBAL_PREFIX  "3ffe:501:ffff:100::"

#define NUT0_LLOCAL_UCAST    nut2v6(LLOCAL_PREFIX, 64)
#define NUT0_GLOBAL_UCAST    nut2v6(LINK0_GLOBAL_PREFIX, 64)
#define NUT0_MAC_ADDR        nutether()

#define HA_GLOBAL_ANYCAST    "3ffe:501:ffff:100:fdff:ffff:ffff:fffe"

#define HA0_LLOCAL_UCAST     "fe80::200:ff:fe00:a1a1"
#define HA0_GLOBAL_UCAST     "3ffe:501:ffff:100:200:ff:fe00:a1a1"
#define HA0_MAC_ADDR         "00:00:00:00:a1:a1"

#define HA1_LLOCAL_UCAST     "fe80::200:ff:fe00:a2a2"
#define HA1_GLOBAL_UCAST     "3ffe:501:ffff:100:200:ff:fe00:a2a2"
#define HA1_MAC_ADDR         "00:00:00:00:a2:a2"

// NUT0 <--> HA0
_HETHER_define(_HETHER_nut0_to_ha0        , NUT0_MAC_ADDR  , ether(HA0_MAC_ADDR))
_HETHER_define(_HETHER_nut0_to_ha0solnode , NUT0_MAC_ADDR  , _ETHER_SOLNODE_MCAST(v6(HA0_GLOBAL_UCAST)))
_HETHER_define(_HETHER_ha0_to_nut0        , ether(HA0_MAC_ADDR)   , NUT0_MAC_ADDR)
_HETHER_define(_HETHER_ha0_to_all         , ether(HA0_MAC_ADDR)   , v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

_HETHER_define(_HETHER_nut0_to_all, NUT0_MAC_ADDR, v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT0 <--> HA1
_HETHER_define(_HETHER_nut0_to_ha1        , NUT0_MAC_ADDR  , ether(HA1_MAC_ADDR))
_HETHER_define(_HETHER_nut0_to_ha1solnode , NUT0_MAC_ADDR  , _ETHER_SOLNODE_MCAST(v6(HA1_GLOBAL_UCAST)))
_HETHER_define(_HETHER_ha1_to_nut0        , ether(HA1_MAC_ADDR)   , NUT0_MAC_ADDR)
_HETHER_define(_HETHER_ha1_to_all         , ether(HA1_MAC_ADDR)   , v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT0 ----> NUT0(solnode for DAD)
_HETHER_define(_HETHER_nut0_dad, NUT0_MAC_ADDR, _ETHER_SOLNODE_MCAST(nut2v6(LINK0_GLOBAL_PREFIX, 64)))
/*-----------------------------------------------------------------------------------*
 *
 *  LinkX "3ffe:501:ffff:102::" Address and Ether Frame Header
 *
 *-----------------------------------------------------------------------------------*/
#define LINKX_GLOBAL_PREFIX  "3ffe:501:ffff:102::"

#define NUT1_LLOCAL_UCAST    nut2v6(LLOCAL_PREFIX, 64)
#define NUT1_GLOBAL_UCAST    nut2v6(LINKX_GLOBAL_PREFIX, 64)
#define NUT1_MAC_ADDR        nutether()

#define R1_LLOCAL_UCAST     "fe80::200:ff:fe00:a4a4"
#define R1_GLOBAL_UCAST     "3ffe:501:ffff:102:200:ff:fe00:a4a4"
#define R1_MAC_ADDR         "00:00:00:00:a4:a4"

#define HA2_LLOCAL_UCAST     "fe80::200:ff:fe00:a3a3"
#define HA2_GLOBAL_UCAST     "3ffe:501:ffff:102:200:ff:fe00:a3a3"
#define HA2_MAC_ADDR         "00:00:00:00:a3:a3"

// NUT1 <--> HA2
_HETHER_define(_HETHER_nut1_to_ha2        , NUT1_MAC_ADDR  , ether(HA2_MAC_ADDR))
_HETHER_define(_HETHER_nut1_to_ha2solnode , NUT1_MAC_ADDR  , _ETHER_SOLNODE_MCAST(v6(HA2_GLOBAL_UCAST)))
_HETHER_define(_HETHER_ha2_to_nut1        , ether(HA2_MAC_ADDR)   , NUT1_MAC_ADDR)
_HETHER_define(_HETHER_ha2_to_all         , ether(HA2_MAC_ADDR)   , v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT1 <--> R1
_HETHER_define(_HETHER_nut1_to_r1        , NUT1_MAC_ADDR  , ether(R1_MAC_ADDR))
_HETHER_define(_HETHER_nut1_to_r1solnode , NUT1_MAC_ADDR   , _ETHER_SOLNODE_MCAST(v6(R1_GLOBAL_UCAST)))
_HETHER_define(_HETHER_r1_to_nut1        , ether(R1_MAC_ADDR)   , NUT1_MAC_ADDR)
_HETHER_define(_HETHER_r1_to_all         , ether(R1_MAC_ADDR)   , v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT1 ----> NUT1(solnode for DAD)
_HETHER_define(_HETHER_nut1_dad, NUT1_MAC_ADDR, _ETHER_SOLNODE_MCAST(nut2v6(LINKX_GLOBAL_PREFIX, 64)))
/*-----------------------------------------------------------------------------------*
 *
 *  LinkY "3ffe:501:ffff:103::" Address and Ether Frame Header
 *
 *-----------------------------------------------------------------------------------*/
#define LINKY_GLOBAL_PREFIX  "3ffe:501:ffff:103::"

#define NUT2_LLOCAL_UCAST    nut2v6(LLOCAL_PREFIX, 64)
#define NUT2_GLOBAL_UCAST    nut2v6(LINKY_GLOBAL_PREFIX, 64)
#define NUT2_MAC_ADDR        nutether()

#define R2_LLOCAL_UCAST     "fe80::200:ff:fe00:a5a5"
#define R2_GLOBAL_UCAST     "3ffe:501:ffff:103:200:ff:fe00:a5a5"
#define R2_MAC_ADDR         "00:00:00:00:a5:a5"

// NUT2 <--> R2
_HETHER_define(_HETHER_nut2_to_r2        , NUT2_MAC_ADDR  , ether(R2_MAC_ADDR))
_HETHER_define(_HETHER_nut2_to_r2solnode , NUT2_MAC_ADDR   , _ETHER_SOLNODE_MCAST(v6(R2_GLOBAL_UCAST)))
_HETHER_define(_HETHER_r2_to_nut2        , ether(R2_MAC_ADDR)   , NUT2_MAC_ADDR)
_HETHER_define(_HETHER_r2_to_all         , ether(R2_MAC_ADDR)   , v62ethermulti(v6(_ALLNODES_MCAST_ADDR)))

// NUT2 ----> NUT2(solnode for DAD)
_HETHER_define(_HETHER_nut2_dad, NUT2_MAC_ADDR, _ETHER_SOLNODE_MCAST(nut2v6(LINKY_GLOBAL_PREFIX, 64)))

/*-----------------------------------------------------------------------------------*
 *
 *  LinkZ "3ffe:501:ffff:104::" Address and Ether Frame Header
 *
 *-----------------------------------------------------------------------------------*/
#define LINKZ_GLOBAL_PREFIX  "3ffe:501:ffff:104::"

#define TN_LLOCAL_UCAST    "fe80::200:ff:fe00:a6a6"
#define TN_GLOBAL_UCAST    "3ffe:501:ffff:104:200:ff:fe00:a6a6"
#define TN_MAC_ADDR        "00:00:00:00:a6:a6"
