/* 
 *
 * Copyright (C) 2003 Yokogawa Electric Corporation , 
 * INTAP(Interoperability Technology Association for Information 
 * Processing, Japan) , IPA (Information-technology Promotion Agency,Japan)
 * Copyright (C) IBM Corporation 2003.
 * All rights reserved.
 *
 * Redistribution and use of this software in source and binary forms, with 
 * or without modification, are permitted provided that the following 
 * conditions and disclaimer are agreed and accepted by the user:
 *
 * 1. Redistributions of source code must retain the above copyright 
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 * notice, this list of conditions and the following disclaimer in the 
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the names of the copyrighters, the name of the project which 
 * is related to this software (hereinafter referred to as "project") nor 
 * the names of the contributors may be used to endorse or promote products 
 * derived from this software without specific prior written permission.
 *
 * 4. No merchantable use may be permitted without prior written 
 * notification to the copyrighters. However, using this software for the 
 * purpose of testing or evaluating any products including merchantable 
 * products may be permitted without any notification to the copyrighters.
 *
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
 * BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
 * COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    Author: Kazuo Hiekata <hiekata@yamato.ibm.com>
 *
 */
/*-----------------------------------------------------------------------------------*
 *  ICMPv6 Parameter Problem
 *-----------------------------------------------------------------------------------*/
//================================================================
//  ICMPv6 Parameter Problem
//  ICMPv6 Parameter Problem: HA0 ----> NUT1
FEM_icmp6_parameter_problem(
	icmpv6_par_prob_ha0_to_nut1,
	_HETHER_r1_to_nut1,
	{
		_SRC(v6(HA0_GLOBAL_UCAST));
		_DST(NUT1_GLOBAL_UCAST);
	},
	{
		Type = 4;
		Code = 2; //unrecognized IPv6 option encountered
		Pointer = 43; // IPv6 hdr (40 bytes) + 3'rd byte of Route hdr
		payload = param_prob;
	}
)

Payload param_prob {
	data = substr(_PACKET_IPV6_NAME(echorequest_tn_to_nut0), 0, 56);
}
/*-----------------------------------------------------------------------------------*
 * Mobile Prefix Solicitation
 *-----------------------------------------------------------------------------------*/
//================================================================
//  Mobile Prefix Solicitation
//  Mobile Prefix Solicitation: NUT1 ----> HA0
FEM_icmp6_mobile_prefix_solicitation(
	mobileprefixsolicitation_nut1_to_ha0,
	_HETHER_nut1_to_r1,
	{
		_SRC(NUT1_GLOBAL_UCAST);
		_DST(v6(HA0_GLOBAL_UCAST));
	},
	{
		Reserved = 0;
	}
)
//================================================================
//  Mobile Prefix Solicitation
//  Mobile Prefix Solicitation: NUT1 ----> HA0
FEM_icmp6_mobile_prefix_solicitation(
	mobileprefixsolicitation_nut2_to_ha0,
	_HETHER_nut2_to_r2,
	{
		_SRC(NUT2_GLOBAL_UCAST);
		_DST(v6(HA0_GLOBAL_UCAST));
	},
	{
		Reserved = 0;
	}
)
/*-----------------------------------------------------------------------------------*
 * Mobile Prefix Advertisement
 *-----------------------------------------------------------------------------------*/
//================================================================
//  Mobile Prefix Advertisement
//  Mobile Prefix Advertisement: HA0 ----> NUT1
FEM_icmp6_mobile_prefix_advertisement(
	mobileprefixadvertisement_ha0_to_nut1,
	_HETHER_r1_to_nut1,
	{
		_SRC(v6(HA0_GLOBAL_UCAST));
		_DST(NUT1_GLOBAL_UCAST);
	},
	{
		option   =  opt_prefixinformation_ha0;
	}
)
//================================================================
//  Mobile Prefix Advertisement
//  Mobile Prefix Advertisement: HA0 ----> NUT1 (w/ Binding Request)
FEM_icmp6_mobile_prefix_advertisement_exth(
	mobileprefixadvertisement_bindingreq_ha0_to_nut1,
	_HETHER_r1_to_nut1,
	{
		_SRC(v6(HA0_GLOBAL_UCAST));
		_DST(NUT1_GLOBAL_UCAST);
	},
	{
		header = _HDR_IPV6_NAME(mobileprefixadvertisement_bindingreq_ha0_to_nut1);
		exthdr = ext_bindingrequest_to_nut2;
		upper  = _ICMPV6_NAME(mobileprefixadvertisement_bindingreq_ha0_to_nut1);
	},
	{
		option  =  opt_prefixinformation_ha0;
	}
)
//================================================================
//  Mobile Prefix Advertisement
//  Mobile Prefix Advertisement: HA0 ----> NUT1
FEM_icmp6_mobile_prefix_advertisement(
	mobileprefixadvertisement_ha1_to_nut1,
	_HETHER_r1_to_nut1,
	{
		_SRC(v6(HA1_GLOBAL_UCAST));
		_DST(NUT1_GLOBAL_UCAST);
	},
	{
		option   =  opt_prefixinformation_ha0;
	}
)
//================================================================
//  Mobile Prefix Advertisement
//  Mobile Prefix Advertisement: HA0 ----> NUT2
FEM_icmp6_mobile_prefix_advertisement(
	mobileprefixadvertisement_ha0_to_nut2,
	_HETHER_r2_to_nut2,
	{
		_SRC(v6(HA0_GLOBAL_UCAST));
		_DST(NUT2_GLOBAL_UCAST);
	},
	{
		option   =  opt_prefixinformation_ha0;
	}
)
//================================================================
//  Mobile Prefix Advertisement
//  Mobile Prefix Advertisement: HA2 ----> NUT0
FEM_icmp6_mobile_prefix_advertisement(
	mobileprefixadvertisement_ha2_to_nut0,
	_HETHER_ha0_to_nut0,
	{
		_SRC(v6(HA2_GLOBAL_UCAST));
		_DST(NUT0_GLOBAL_UCAST);
	},
	{
		option   =  opt_prefixinformation_ha2;
	}
)
/*--------------------------------------------------------------------*
 * HAAD
/*--------------------------------------------------------------------*/
//================================================================
//  Home Agent Address Discovery Request
//  Home Agent Address Discovery Request: NUT1 ----> HA0
FEM_icmp6_haadrequest(
	haadrequest_nut1_to_ha0,
	_HETHER_nut1_to_r1,
	{
		_SRC(NUT1_GLOBAL_UCAST);
		_DST(v6(HA_GLOBAL_ANYCAST));
	},
	{
		Identifier  = any;
	}
)
//================================================================
//  Home Agent Address Discovery Reply
//  Home Agent Address Discovery Reply: HA0 ----> NUT1
FEM_icmp6_haadreply(
	haadreply_ha0_to_nut1,
	_HETHER_r1_to_nut1,
	{
		_SRC(v6(HA0_GLOBAL_UCAST));
		_DST(NUT1_GLOBAL_UCAST);
	},
	{
		Identifier = 1;
		Address	= v6(HA0_GLOBAL_UCAST);
	}
)
//================================================================
//  Home Agent Address Discovery Request
//  Home Agent Address Discovery Request: NUT2 ----> HA0
FEM_icmp6_haadrequest(
	haadrequest_nut2_to_ha0,
	_HETHER_nut2_to_r2,
	{
		_SRC(NUT2_GLOBAL_UCAST);
		_DST(v6(HA_GLOBAL_ANYCAST));
	},
	{
		Identifier  = any;
	}
)
//================================================================
//  Home Agent Address Discovery Reply
//  Home Agent Address Discovery Reply: HA0 ----> NUT2
FEM_icmp6_haadreply(
	haadreply_ha0_to_nut2,
	_HETHER_r2_to_nut2,
	{
		_SRC(v6(HA0_GLOBAL_UCAST));
		_DST(NUT2_GLOBAL_UCAST);
	},
	{
		Identifier = 1;
		Address	= v6(HA0_GLOBAL_UCAST);
	}
)
