#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003 Yokogawa Electric Corporation,
# IPA (Information-technology Promotion Agency, Japan).
# All rights reserved.
# 
# Redistribution and use of this software in source and binary forms, with 
# or without modification, are permitted provided that the following 
# conditions and disclaimer are agreed and accepted by the user:
# 
# 1. Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project which 
# is related to this software (hereinafter referred to as "project") nor 
# the names of the contributors may be used to endorse or promote products 
# derived from this software without specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written 
# notification to the copyrighters. However, using this software for the 
# purpose of testing or evaluating any products including merchantable 
# products may be permitted without any notification to the copyrighters.
# 
# 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING 
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE 
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
# CONTRACT,STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
# THE POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/tunnel/automatic_encapsulation_host.seq,v 1.11 2001/10/05 06:39:22 masaxmasa Exp $
########################################################################
BEGIN { $V6evalTool::TestVersion = '$Name: REL_2_1_1 $'; }
use V6evalTool;
use tunnel;

checkNUT(host);

$IF=$tunnel::IF_ID_0;
$IF1=$tunnel::IF_ID_1;

vCapture($IF);

$ret=makeNCE_TN_LLA();
if( $ret !=0) {
        vLogHTML("<FONT COLOR=#FF0000><H4>NUT can not be initialized !!</H4></FONT>");
        goto error;
}else {
        vLogHTML("<H4>--- TN can make TN's link local address NCE in TN ---</H4>
");
}

$ret=makeNCE_TN_GA();
if( $ret !=0) {
        vLogHTML("<FONT COLOR=#FF0000><H4>NUT can not be initialized !!</H4></FONT>");
        goto error;
}else {
        vLogHTML("<H4>--- TN can make TN's global address NCE in TN ---</H4>");
}

$ret=makeARPTable_LINK0();
if( $ret !=0) {
        vLogHTML("<FONT COLOR=#FF0000><H4>NUT can not convert v4 address to ethernet address !!</H4></FONT>");
        goto error;
}else {
        vLogHTML("<H4>--- NUT can convert v4 address to ethernet address ---</H4>");
}

$ret=ping6_nut2tn_automatic_address();
if( $ret !=0) {
        vLogHTML("<FONT COLOR=#FF0000><H4>NUT can not send Echo Request !!<H4></FONT><BR>");
        goto error;
}else {
}


%ret=vRecv(Link0,5,0,0,
	echo_request_LINK0_nut2tn,
	v6overv4_echo_request_LINK0_nut2tn);
if( $ret{status} !=0) {
	vLogHTML("<FONT COLOR=#FF0000><H4>TN can not receive IPv4 Packet which encapsulated ICMPv6 Echo Request from NUT</H4></FONT><BR>");
	goto error;
}elsif( $ret{recvFrame} eq 'v6overv4_echo_request_LINK0_nut2tn') {
	vLogHTML("<H4>TN can receive Echo Request from NUT</H4><BR>");
	vLogHTML("<H3>OK</H3>");
	exit $V6evalTool::exitPass;
}elsif($ret{recvFrame} eq 'echo_request_LINK0_nut2tn') {
	vLogHTML("<FONT COLOR=#FF0000><H4>TN receive ICMPv6 Echo Request from NUT</H4></FONT><BR>");
	vLogHTML("<FONT COLOR=#FF0000><H4>TN can not receive IPv4 Packet which encapsulated ICMPv6 Echo Request from NUT</H4></FONT><BR>");
	goto error;
}	
	
error:

vLogHTML("<FONT COLOR=#FF0000><H3>NG</H3></FONT>");
exit $V6evalTool::exitFail;


########################################################################
__END__

=head1 NAME

	automatic_encapsulation_host.seq - Verify that encapsulation IPv6 
	datagram in IPv4 used automatic tunnel

=head1 TARGET

	Host

=head1 SYNOPSIS

	automatic_encapsulation_host.seq [-tooloption ...] -p 
	automatic_encapsulation_host.def


=head1 INITIALIZATION

=begin html
<PRE>
	Before this test starts, run <A HREF="initialize.html">initialize.seq</A>.
</PRE>

=end html

=head1 TEST PROCEDURE

	This test verifies that NUT encapsulates an IPv6 packet in 
	automatic tunnel 

	TN			NUT

	---------------------------

	1.
		'ping6' command is executed by remote script 'ping6.rmt'
			dst address : Off-link IPv4 compatible IPv6 address address
	2.
	<< JUDGMENT >>

	 <=== IPv4 packet encapsulating IPv6 packet ===
		Outer Header (IPv4)     
			src address : NUT's IPv4 address        
			dst address : Off-link IPv4 address
		Inner Header (IPv6)     
			src address : NUT's IPv6 address        
			dst address : Off-link IPv4 compatible IPv6 address 
 

=head1 JUDGMENT

	<< PASS >>
		NUT received IPv4 packet encapsulating IPv6 packet
		

	<< FAIL >>	
		NUT did not receive IPv4 packet encapsulating IPv6 packet


=head1 SEE ALSO

	  perldoc V6evalTool

=cut
