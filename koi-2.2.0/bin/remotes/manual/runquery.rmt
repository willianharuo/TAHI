#!/usr/bin/perl
#
# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010
# NTT Advanced Technology, Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: koi/bin/remotes/manual/runquery.rmt,v 1.2 2006/06/26 01:12:30 akisada Exp $
#
# $Id: runquery.rmt,v 1.2 2008/06/03 07:39:54 akisada Exp $
#
################################################################

BEGIN {
	push(@INC, '/usr/local/koi/libdata');
	push(@INC, '/usr/local/koi/bin/remotes/manual');
	push(@INC, '.');
}

END {
}

use kRemote;
use File::Basename;

# internal use
sub wait_stdin($);

my $basename = basename($0, '.rmt');
my $prompt = "$basename> ";

my $fd = select (STDIN);  $| = 1; select($fd);
   $fd = select (STDOUT); $| = 1; select($fd);
   $fd = select (STDERR); $| = 1; select($fd);

my $appType = undef;
foreach my $elem (@ARGV) {
	if ($elem =~ /^QueryAppType=(\S+)/) {
		$appType = $elem;
		$appType =~ s/^QueryAppType=//;
		last;
	}
}

kRemoteInit();

if ($kRemote::kRemoteOpt{'Query0Mode'} eq 'iquery') {
	$appType = 'REQ_IQUERY';
}

if ($kRemote::kRemoteOpt{'Query0AUS'} ne '') {
	$queryAUS = $kRemote::kRemoteOpt{'Query0AUS'};
}
if ($kRemote::kRemoteOpt{'Query0KEY'} ne '') {
	$queryKEY = $kRemote::kRemoteOpt{'Query0KEY'};
}
if ($kRemote::kRemoteOpt{'Query0Value'} ne '') {
	$queryValue = $kRemote::kRemoteOpt{'Query0Value'};
}

my $ip_version = undef;
if ( $kRemote::kRemoteOpt{'Query0Addr0'} =~ /:/ ) {
	$ip_version = 6;
}
else {
	$ip_version = 4;
}

my $numQuerys = scalar grep (/Query[0-9]+Mode/, keys(%kRemote::kRemoteOpt));
for (my $i = 0; $i < $numQuerys; $i++) {
        my $addrPath = "Query" . $i . "Addr[0-9]+";
        my $numAddr = scalar grep (/$addrPath/, keys(%kRemote::kRemoteOpt));

	print $prompt . "\n";
	print $prompt . "Configure your resolv.conf file as follows.\n\n";

        for (my $j = 0;$j < $numAddr;$j++) {
		my $addr = $kRemote::kRemoteOpt{"Query" . $i . "Addr" . $j};
		print "    nameserver $addr\n";
	}
	print "\n";
	print $prompt . "\n";
	print "\n\n";
}

my $time1 = 10;
my $time2 = 30;

if ($appType =~ /^REQ_STATUS/) {
	print $prompt . "\n";
	print $prompt . "Transmit STATUS query.\n";
	print $prompt . "\n";

	wait_stdin($time2);
}
elsif ($appType =~ /^REQ_SIP/) {
	my $sip_proxy = undef;
	if ($ip_version == 6) {
		$sip_proxy = '3ffe:501:ffff:101::20';
	}
	else {
		$sip_proxy = '192.168.1.20';
	}

	print $prompt . "\n";
	print $prompt . "If DNS Client1 (NUT) use a SIP user agent as DDDS application,\n";
	print $prompt . "then set up SIP Proxy address $sip_proxy.\n";
	print $prompt . "\n";

	wait_stdin($time1);

	print $prompt . "\n";
	print $prompt . "Application Unique String (AUS): $queryAUS\n";
	print $prompt . "Converted to the Key: $queryKEY\n";
	print $prompt . "Used domain-name to retrieve Rewrite Rules as\n";
	print $prompt . "NAPTR records: $queryValue.\n";
	print $prompt . "\n";

	wait_stdin($time2);
}
elsif ($appType =~ /^REQ_HTTP/) {

	print $prompt . "\n";
	print $prompt . "DNS client (NUT) needs a HTTP program as DDDS application.\n";
	print $prompt . "\n";

	wait_stdin($time1);

	print $prompt . "\n";
	print $prompt . "Application Unique String (AUS): $queryAUS\n";
	print $prompt . "Key: $queryKEY\n";
	print $prompt . "Used domain-name to retrieve Rewrite Rules as NAPTR records: $queryValue.\n";
	print $prompt . "\n";

	wait_stdin($time2);
}
elsif ($appType =~ /^REQ_THTTP/) {
	my $dns = undef;
	if ($ip_version == 6) {
		$dns = '3ffe:501:ffff:101::20';
	}
	else {
		$dns = '192.168.1.20';
	}

	print $prompt . "\n";
	print $prompt . "DNS client (NUT) needs a THTTP program as DDDS application.\n";
	print $prompt . "\n";

	wait_stdin($time1);

	print $prompt . "\n";
	print $prompt . "Application Unique String (AUS): $queryAUS\n";
	print $prompt . "Key: $queryKEY\n";
	print $prompt . "Used domain-name to retrieve Rewrite Rules as NAPTR records: $queryValue.\n";
	print $prompt . "\n";

	wait_stdin($time2);
}
elsif ($appType =~ /^REQ_RCDS/) {
	my $dns = undef;
	if ($ip_version == 6) {
		$dns = '3ffe:501:ffff:101::20';
	}
	else {
		$dns = '192.168.1.20';
	}

	print $prompt . "\n";
	print $prompt . "DNS client (NUT) needs a Resource Cataloging and Distribution Service (RCDS)\n";
	print $prompt . "program as DDDS application.\n";
	print $prompt . "\n";

	wait_stdin($time1);

	print $prompt . "\n";
	print $prompt . "Application Unique String (AUS): $queryAUS\n";
	print $prompt . "Key: $queryKEY\n";
	print $prompt . "Used domain-name to retrieve Rewrite Rules as NAPTR records: $queryValue.\n";
	print $prompt . "\n";

	wait_stdin($time2);
}
elsif ($appType =~ /^REQ_IQUERY/) {
	print $prompt . "\n";
	print $prompt . "Transmit IQUERY query.\n";
	print $prompt . "\n";

	wait_stdin($time2);
}
else{
	require "queryDNS.rmt";
	execQuery();
}

exit(0);
# NOTREACED

sub wait_stdin($) {
	my ($time) = @_;

	if (exists($kRemote::kRemoteOpt{'ModeRemoteAsync'})) {
		print "\n\n";
		sleep $time;
	}
	else {
		print $prompt . "Press Enter key for continue.\a\n";
		<STDIN>;
		print $prompt . "\n";
		print "\n\n";
	}

}
