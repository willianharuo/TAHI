#!/usr/bin/perl
#
# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010
# NTT Advanced Technology, Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: ikev2.rmt,v 1.7 2009/06/09 02:14:26 akisada Exp $
#
################################################################

BEGIN {
	push(@INC, '/usr/local/koi/libdata');
	push(@INC, '..');
}

use kRemote;
use File::Basename;

my $_ps = '/bin/ps';
my $_grep = '/usr/bin/grep';
my $_killall = '/usr/bin/killall';
my $_setkey = '/sbin/setkey';

my $true = 1;
my $false = 0;
my $spmd = '/usr/local/sbin/spmd';
my $iked = '/usr/local/sbin/iked';
my $remote_racoon2_conf_path = '/tmp/racoon2.conf';
# my $local_racoon2_conf_path = './racoon2.conf';
my $pre_shared_key_base_path = '/tmp/pre_shared_key';
my $spmif_unix_path = '/var/run/racoon2/spmif';
my $spmd_password_path = '/usr/local/etc/racoon2/spmd.pwd';
my $my_id_key_id_path = '/tmp/my_id_key_id';
my $peers_id_key_id_path = '/tmp/peers_id_key_id';
my $resolver = 'off';
my @racoon2_conf = ();
my $timeout = 8;

my $basename = basename($0, '.rmt');
my $prompt = "$basename> ";

my $fd = select (STDIN);  $| = 1; select($fd);
   $fd = select (STDOUT); $| = 1; select($fd);
   $fd = select (STDERR); $| = 1; select($fd);

unless(defined(kRemoteOpen())) {
	print STDERR "fail to open session.\n";
	exit($kRemote::exitFail);
}

unless(defined(kRemoteLogin($timeout))) {
	print STDERR "fail to login.\n";
	exit($kRemote::exitFail);
}

unless(defined(kRemoteSubstituteRootWait())) {
	print STDERR "fail to substitute to Root.\n";
	exit($kRemote::exitFail);
}

my $operation = $kRemote::kRemoteOpt{'operation'};
unless(ikev2($operation)) {
	exit($kRemote::exitFail);
}

unless(defined(kRemoteLogoutWait($timeout))) {
	print STDERR "fail to logout.\n";
	exit($kRemote::exitFail);
}

unless(defined(kRemoteLogoutNoWait($timeout))) {
	print STDERR "fail to logout.\n";
	exit($kRemote::exitFail);
}

kRemoteClose();

exit($kRemote::exitPass);



########################################################################
sub
ikev2($)
{
	my ($operation) = @_;

	unless(defined($operation)) {
		unless(generate_racoon2_conf(\@racoon2_conf)) {
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteWriteFile($remote_racoon2_conf_path, $timeout, @racoon2_conf))) {
			print STDERR "fail to write configuration.\n";
			exit($kRemote::exitFail);
		}

		#unless(defined(kRemoteCommandWait("rm -f $remote_racoon2_conf_path", $timeout))) {
		#	print("fail to remove $remote_racoon2_conf_path.\n");
		#	exit($kRemote::exitFail);
		#}

		#unless(overwrite_racoon2_conf($local_racoon2_conf_path, @racoon2_conf)) {
		#	exit($kRemote::exitFail);
		#}

		#unless(defined(kRemoteCopy($local_racoon2_conf_path, $remote_racoon2_conf_path, $timeout))) {
		#	print STDERR "fail to write configuration.\n";
		#	exit($kRemote::exitFail);
		#}

		unless(defined(kRemoteCommandWait("chown root:wheel $remote_racoon2_conf_path", $timeout))) {
			print("fail to change file owner and group of $remote_racoon2_conf_path.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("chmod 0600 $remote_racoon2_conf_path", $timeout))) {
			print("fail to change file mode of $remote_racoon2_conf_path.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("ls -l $remote_racoon2_conf_path", $timeout))) {
			print("fail to list of $remote_racoon2_conf_path.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_ps -ax | $_grep -e spmd -e iked", $timeout))) {
			print("fail to get process status.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$spmd -f $remote_racoon2_conf_path", $timeout))) {
			print("fail to execute spmd.\n");
			exit($kRemote::exitFail);
		}

		sleep(3);

		unless(defined(kRemoteCommandWait("$iked -f $remote_racoon2_conf_path", $timeout))) {
			print("fail to execute iked.\n");
			exit($kRemote::exitFail);
		}

		sleep(3);

		unless(defined(kRemoteCommandWait("$_ps -ax | $_grep -e spmd -e iked", $timeout))) {
			print("fail to get process status.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_ps -ax | $_grep -e spmd -e iked", $timeout))) {
			print("fail to get process status.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_setkey -D", $timeout))) {
			print("fail to get SAD entries.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_setkey -DP", $timeout))) {
			print("fail to get SPD entries.\n");
			exit($kRemote::exitFail);
		}

		return($true);
	}

	if($operation eq 'stop') {
		unless(defined(kRemoteCommandWait("$_setkey -D", $timeout))) {
			print("fail to get SAD entries.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_setkey -DP", $timeout))) {
			print("fail to get SPD entries.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_ps -ax | $_grep -e spmd -e iked", $timeout))) {
			print("fail to get process status.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_killall spmd", $timeout))) {
			print("fail to kill processes by name.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_ps -ax | $_grep -e spmd -e iked", $timeout))) {
			print("fail to get process status.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_setkey -F", $timeout))) {
			print("fail to flush SAD entries.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_setkey -FP", $timeout))) {
			print("fail to flush SPD entries.\n");
			exit($kRemote::exitFail);
		}

		sleep(3);

		unless(defined(kRemoteCommandWait("$_setkey -D", $timeout))) {
			print("fail to get SAD entries.\n");
			exit($kRemote::exitFail);
		}

		unless(defined(kRemoteCommandWait("$_setkey -DP", $timeout))) {
			print("fail to get SPD entries.\n");
			exit($kRemote::exitFail);
		}

		return($true);
	}

	if($operation eq 'initiate') {
		#for my $key (sort(keys(%kRemote::kRemoteOpt))) {
		#	print $prompt . "$key:  $kRemote::kRemoteOpt{$key}\n";
		#}

		my $host = $kRemote::kRemoteOpt{'target'};
		my $address_family = $kRemote::kRemoteOpt{'selector.dst.address_family'};
		my $_ping = ($address_family eq 'inet6') ? 'ping6' : 'ping';
		unless(defined(kRemoteCommandWait("$_ping -n -c 1 $host", $timeout))) {
			if ($address_family eq 'inet6') {
				print("fail to send ICMPv6 ECHO_REQUEST packets to network hosts.\n");
			}
			else {
				print("fail to send ICMP ECHO_REQUEST packets to network hosts.\n");
			}
			exit($kRemote::exitFail);
		}


		return($true);
	}

	print("unknown operation -- $operation\n");
	return($false);
}



sub
generate_racoon2_conf($)
{
	my ($conf) = @_;

	my $num = undef;
	my $address = undef;
	my $port = undef;
	my $provide = undef;



	#
	# interface
	#
	push(@$conf, 'interface');
	push(@$conf, '{');

	$num = $kRemote::kRemoteOpt{'ikev2.interface.ike.num'};
	if($num) {
		push(@$conf, '    ike');
		push(@$conf, '    {');

		for(my $d = 0; $d < $num; $d ++) {
			my $prefix = sprintf("%s.%d", 'ikev2.interface.ike', $d);

			$address = $kRemote::kRemoteOpt{"$prefix.address"};
			$port = $kRemote::kRemoteOpt{"$prefix.port"};
			push(@$conf, "        \"$address\" port $port;");
		}

		push(@$conf, '    };');
	}

	push(@$conf, '    spmd');
	push(@$conf, '    {');
	push(@$conf, "        unix    \"$spmif_unix_path\";");
	push(@$conf, '    };');
	push(@$conf, "    spmd_password   \"$spmd_password_path\";");
	push(@$conf, '};');
	push(@$conf, '');



	#
	# resolver
	#
	push(@$conf, 'resolver');
	push(@$conf, '{');
	push(@$conf, '    resolver    off;');
	push(@$conf, '};');
	push(@$conf, '');



	#
	# remote
	#
	$num = $kRemote::kRemoteOpt{'ikev2.remote.num'};
	if($num) {
		for(my $d = 0; $d < $num; $d ++) {
			my $prefix = sprintf("%s.%d", 'ikev2.remote', $d);
			my $ipaddr = undef;
			my $sub_num = undef;
			my $index = $kRemote::kRemoteOpt{"$prefix.remote_index"};

			push(@$conf, "remote $index");
			push(@$conf, '{');
			push(@$conf, '    acceptable_kmp');
			push(@$conf, '    {');
			push(@$conf, '        ikev2;');
			push(@$conf, '    };');

			push(@$conf, '    ikev2');
			push(@$conf, '    {');

			my $nonce_size = $kRemote::kRemoteOpt{"$prefix.ikev2.nonce_size.nonce_size"};
			if(defined($nonce_size)) {
				push(@$conf, "        nonce_size $nonce_size;");
			}

			my $initial_contact = $kRemote::kRemoteOpt{"$prefix.ikev2.initial_contact.initial_contact"};
			if(defined($initial_contact)) {
				push(@$conf, "        initial_contact $initial_contact;");
			}

			my $send_cert_req = $kRemote::kRemoteOpt{"$prefix.ikev2.send_cert_req.send_cert_req"};
			if(defined($send_cert_req)) {
				push(@$conf, "        send_cert_req $send_cert_req;");
			}

			# set local ID value
			push(@$conf, '        my_id');
			push(@$conf, '        {');

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.my_id.ipaddr.num"}) {
				# ipaddr
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.ipaddr.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						$ipaddr = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.ipaddr.$d"};
						push(@$conf, "            ipaddr \"$ipaddr\";");
					}
				}
			}

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.my_id.fqdn.num"}) {
				# fqdn
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.fqdn.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						my $fqdn = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.fqdn.$d"};
						push(@$conf, "            fqdn \"$fqdn\";");
					}
				}
			}

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.my_id.rfc822addr.num"}) {
				# rfc822 addr
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.rfc822addr.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						my $rfc822addr = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.rfc822addr.$d"};
						push(@$conf, "            email \"$rfc822addr\";");
					}
				}
			}

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.my_id.keyid.num"}) {
				# key id
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.keyid.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						my $keyid = $kRemote::kRemoteOpt{"$prefix.ikev2.my_id.keyid.$d"};
						push(@$conf, "            keyid \"$my_id_key_id_path\";");

						unless (generate_id_key_id($my_id_key_id_path, $keyid)) {
							exit($kRemote::exitFail);
						}
					}
				}
			}

			push(@$conf, '        };');

			# set remote ID value
			push(@$conf, '        peers_id');
			push(@$conf, '        {');

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.ipaddr.num"}) {
				# ipaddr
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.ipaddr.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						$ipaddr = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.ipaddr.$d"};
						push(@$conf, "            ipaddr \"$ipaddr\";");
					}
				}
			}

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.fqdn.num"}) {
				# fqdn
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.fqdn.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						my $fqdn = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.fqdn.$d"};
						push(@$conf, "            fqdn \"$fqdn\";");
					}
				}
			}

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.rfc822addr.num"}) {
				# rfc822 addr
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.rfc822addr.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						my $rfc822addr = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.rfc822addr.$d"};
						push(@$conf, "            email \"$rfc822addr\";");
					}
				}
			}

			if ($kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.keyid.num"}) {
				# key id
				$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.keyid.num"};
				if ($sub_num) {
					for (my $d = 0; $d < $sub_num; $d++) {
						my $keyid = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_id.keyid.$d"};
						push(@$conf, "            keyid \"$peers_id_key_id_path\";");

						unless (generate_id_key_id($peers_id_key_id_path, $keyid)) {
							exit($kRemote::exitFail);
						}
					}
				}
			}


			push(@$conf, '        };');

			#
			$address = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_ipaddr.address"};
			$port = $kRemote::kRemoteOpt{"$prefix.ikev2.peers_ipaddr.port"};
			push(@$conf, "        peers_ipaddr    \"$address\" port $port;");

			my $kmp_sa_lifetime_time = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_sa_lifetime_time"};
			push(@$conf, "        kmp_sa_lifetime_time $kmp_sa_lifetime_time;");

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_enc_alg.num"};
			if($sub_num) {
				push(@$conf, '        kmp_enc_alg');
				push(@$conf, '        {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $kmp_enc_alg = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_enc_alg.$d"};

					push(@$conf, "            $kmp_enc_alg;");
				}

				push(@$conf, '        };');
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_prf_alg.num"};
			if($sub_num) {
				push(@$conf, '        kmp_prf_alg');
				push(@$conf, '        {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $kmp_prf_alg = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_prf_alg.$d"};

					push(@$conf, "            $kmp_prf_alg;");
				}

				push(@$conf, '        };');
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_hash_alg.num"};
			if($sub_num) {
				push(@$conf, '        kmp_hash_alg');
				push(@$conf, '        {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $kmp_hash_alg = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_hash_alg.$d"};

					push(@$conf, "            $kmp_hash_alg;");
				}

				push(@$conf, '        };');
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_dh_group.num"};
			if($sub_num) {
				push(@$conf, '        kmp_dh_group');
				push(@$conf, '        {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $kmp_dh_group = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_dh_group.$d"};

					push(@$conf, "            $kmp_dh_group;");
				}

				push(@$conf, '        };');
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_auth_method.num"};
			if($sub_num) {
				push(@$conf, '        kmp_auth_method');
				push(@$conf, '        {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $kmp_auth_method = $kRemote::kRemoteOpt{"$prefix.ikev2.kmp_auth_method.$d"};
					push(@$conf, "            $kmp_auth_method;");
				}

				push(@$conf, '        };');
			}

			my $need_pfs = $kRemote::kRemoteOpt{"$prefix.ikev2.need_pfs"};
			if (defined($need_pfs) &&
				($need_pfs eq 'on' || $need_pfs eq 'off')) {
				push(@$conf, "        need_pfs    $need_pfs;");
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ikev2.request.num"};
			if ($sub_num) {
				push(@$conf, '        request');
				push(@$conf, '        {');

				for (my $d = 0; $d < $sub_num; $d ++) {
					my $request	= $kRemote::kRemoteOpt{"$prefix.ikev2.request.$d"};
					push(@$conf, "            $request;");
				}

				push(@$conf, '        };');
			}

			if (defined($kRemote::kRemoteOpt{"$prefix.provide"})) {
				$provide	= $kRemote::kRemoteOpt{"$prefix.provide"};
				push(@$conf, '        provide');
				push(@$conf, '        {');
				push(@$conf, "            addresspool $provide;");
				push(@$conf, '        };');
			}

			my $pre_shared_key_path = sprintf("%s.%s", $pre_shared_key_base_path, $index);
			my $pre_shared_key_local = $kRemote::kRemoteOpt{"$prefix.ikev2.pre_shared_key.local"};
			my $pre_shared_key_remote = $kRemote::kRemoteOpt{"$prefix.ikev2.pre_shared_key.remote"};

			push(@$conf, "        pre_shared_key  \"$pre_shared_key_path\";");

			push(@$conf, '    };');
			push(@$conf, '};');
			push(@$conf, '');

			unless(generate_pre_shared_key($pre_shared_key_path, $pre_shared_key_local, $pre_shared_key_remote)) {
				return($false);
			}
		}
	}



	#
	# selector
	#
	$num = $kRemote::kRemoteOpt{'ikev2.selector.num'};
	if($num) {
		for(my $d = 0; $d < $num; $d ++) {
			my $prefix = sprintf("%s.%d", 'ikev2.selector', $d);
			my $index = $kRemote::kRemoteOpt{"$prefix.selector_index"};
			my $direction = $kRemote::kRemoteOpt{"$prefix.direction"};
			my $src_address = $kRemote::kRemoteOpt{"$prefix.src.address"};
			my $dst_address = $kRemote::kRemoteOpt{"$prefix.dst.address"};
			my $upper_layer_protocol_protocol = $kRemote::kRemoteOpt{"$prefix.upper_layer_protocol.protocol"};
			my $policy_index = $kRemote::kRemoteOpt{"$prefix.policy_index"};

			push(@$conf, "selector $index");
			push(@$conf, '{');
			push(@$conf, "    direction   $direction;");
			push(@$conf, "    src \"$src_address\";");
			push(@$conf, "    dst \"$dst_address\";");
			push(@$conf, "    upper_layer_protocol    \"$upper_layer_protocol_protocol\";");
			push(@$conf, "    policy_index    $policy_index;");
			push(@$conf, '};');
			push(@$conf, '');
		}
	}



	#
	# policy
	#
	$num = $kRemote::kRemoteOpt{'ikev2.policy.num'};
	if($num) {
		for(my $d = 0; $d < $num; $d ++) {
			my $sub_num = undef;

			my $prefix = sprintf("%s.%d", 'ikev2.policy', $d);
			my $index = $kRemote::kRemoteOpt{"$prefix.policy_index"};
			my $ipsec_mode = $kRemote::kRemoteOpt{"$prefix.ipsec_mode"};
			my $remote_index = $kRemote::kRemoteOpt{"$prefix.remote_index"};

			my $my_sa_ipaddr = $kRemote::kRemoteOpt{"$prefix.my_sa_ipaddr"};
			my $peers_sa_ipaddr = $kRemote::kRemoteOpt{"$prefix.peers_sa_ipaddr"};

			push(@$conf, "policy $index");
			push(@$conf, '{');
			push(@$conf, '    action  auto_ipsec;');
			push(@$conf, "    ipsec_mode  $ipsec_mode;");
			push(@$conf, '    ipsec_level require;');
			if (defined($my_sa_ipaddr) && length($my_sa_ipaddr) > 0) {
				push(@$conf, "    my_sa_ipaddr $my_sa_ipaddr;");
			}
			if (defined($peers_sa_ipaddr) && length($peers_sa_ipaddr) > 0) {
				push(@$conf, "    peers_sa_ipaddr $peers_sa_ipaddr;");
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ipsec_index.num"};
			if($sub_num) {
				push(@$conf, '    ipsec_index');
				push(@$conf, '    {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $ipsec_index = $kRemote::kRemoteOpt{"$prefix.ipsec_index.$d"};
					push(@$conf, "        $ipsec_index;");
				}

				push(@$conf, '    };');
			}

			push(@$conf, "    remote_index    $remote_index;");
			push(@$conf, '};');
			push(@$conf, '');
		}
	}



	#
	# ipsec
	#
	$num = $kRemote::kRemoteOpt{'ikev2.ipsec.num'};
	if($num) {
		for(my $d = 0; $d < $num; $d ++) {
			my $sub_num = undef;
			my $prefix = sprintf("%s.%d", 'ikev2.ipsec', $d);
			my $index = $kRemote::kRemoteOpt{"$prefix.ipsec_index"};
			my $ipsec_sa_lifetime_time = $kRemote::kRemoteOpt{"$prefix.ipsec_sa_lifetime_time"};
			my $ext_sequence = $kRemote::kRemoteOpt{"$prefix.ext_sequence"};

			push(@$conf, "ipsec $index");
			push(@$conf, '{');

			push(@$conf, "    ipsec_sa_lifetime_time $ipsec_sa_lifetime_time;");

			if (defined($ext_sequence) &&
				($ext_sequence eq 'on' || $ext_sequence eq 'off')) {
				push(@$conf, "    ext_sequence    $ext_sequence;");
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.sa_index.num"};
			if($sub_num) {
				push(@$conf, '    sa_index');
				push(@$conf, '    {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $sa_index = $kRemote::kRemoteOpt{"$prefix.sa_index.$d"};
					push(@$conf, "        $sa_index;");
				}

				push(@$conf, '    };');
			}

			push(@$conf, '};');
			push(@$conf, '');
		}
	}



	#
	# sa
	#
	$num = $kRemote::kRemoteOpt{'ikev2.sa.num'};
	if($num) {
		for(my $d = 0; $d < $num; $d ++) {
			my $sub_num = undef;
			my $prefix = sprintf("%s.%d", 'ikev2.sa', $d);
			my $index = $kRemote::kRemoteOpt{"$prefix.sa_index"};
			my $sa_protocol = $kRemote::kRemoteOpt{"$prefix.sa_protocol"};

			push(@$conf, "sa $index");
			push(@$conf, '{');
			push(@$conf, "    sa_protocol $sa_protocol;");

			$sub_num = $kRemote::kRemoteOpt{"$prefix.esp_enc_alg.num"};
			if($sub_num) {
				push(@$conf, '    esp_enc_alg');
				push(@$conf, '    {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $esp_enc_alg = $kRemote::kRemoteOpt{"$prefix.esp_enc_alg.$d"};
					push(@$conf, "        $esp_enc_alg;");
				}

				push(@$conf, '    };');
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.esp_auth_alg.num"};
			if($sub_num) {
				push(@$conf, '    esp_auth_alg');
				push(@$conf, '    {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $esp_auth_alg = $kRemote::kRemoteOpt{"$prefix.esp_auth_alg.$d"};
					push(@$conf, "        $esp_auth_alg;");
				}

				push(@$conf, '    };');
			}

			$sub_num = $kRemote::kRemoteOpt{"$prefix.ah_auth_alg.num"};
			if($sub_num) {
				push(@$conf, '    ah_auth_alg');
				push(@$conf, '    {');

				for(my $d = 0; $d < $sub_num; $d ++) {
					my $ah_auth_alg = $kRemote::kRemoteOpt{"$prefix.ah_auth_alg.$d"};
					push(@$conf, "        $ah_auth_alg;");
				}

				push(@$conf, '    };');
			}

			push(@$conf, '};');
		}
	}


	#
	# addresspool
	#
	$num = $kRemote::kRemoteOpt{'ikev2.addresspool.num'};
	if($num && defined($provide)) {
		for(my $d = 0; $d < $num; $d ++) {
			my $sub_num = undef;
			my $prefix = sprintf("%s.%d", 'ikev2.addresspool', $d);
			my $saddr = $kRemote::kRemoteOpt{"$prefix.saddr"};
			my $eaddr = $kRemote::kRemoteOpt{"$prefix.eaddr"};

			push(@$conf, "addresspool common_addresspool_index");
			push(@$conf, '{');
			push(@$conf, "    $saddr - $eaddr;");
			push(@$conf, '};');
		}
	}

	return($true);
}



sub
generate_pre_shared_key($$$)
{
	my ($path, $local, $remote) = @_;

	if($local ne $remote) {
		print("racoon2 doesn\'t support different pre-shared keys between initiator and responder.\n");
		exit($kRemote::exitNS);
	}

	# XXX: use kRemoteCopy() for handling binary pre-shared key
	unless(defined(kRemoteCommandWait("echo -n $local > $path", $timeout))) {
		print("fail to write out pre_shared_key to $path.\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("cat -n $path", $timeout))) {
		print("fail to print $path.\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("chown root:wheel $path", $timeout))) {
		print("fail to change file owner and group of $path.\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("chmod 0600 $path", $timeout))) {
		print("fail to change file mode of $path.\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("ls -l $path", $timeout))) {
		print("fail to list of $path.\n");
		exit($kRemote::exitFail);
	}

	return($true);
}



sub generate_id_key_id($$)
{
	my ($path, $id) = @_;

	unless (defined(kRemoteCommandWait("touch $path", $timeout))) {
		print("fail to touch file $path\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("perl -e 'open(OUT, \">$path\"); print(OUT pack(\"H*\", \"$id\")); close(OUT);'", $timeout))) {
		print("fail to set keyid value to $path.\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("chown root:wheel $path", $timeout))) {
		print("fail to change file owner and group of $path.\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("chmod 0600 $path", $timeout))) {
		print("fail to change file mode of $path.\n");
		exit($kRemote::exitFail);
	}

	unless(defined(kRemoteCommandWait("ls -l $path", $timeout))) {
		print("fail to list of $path.\n");
		exit($kRemote::exitFail);
	}

	return($true);
}



#sub
#overwrite_racoon2_conf($@)
#{
#	my ($path, @conf) = @_;
#
#	unless(defined(open(RACOON2_CONF, ">$path"))) {
#		print("$path: $!\n");
#		return($false);
#	}
#
#	for(my $d = 0; $d <= $#conf; $d ++) {
#		print(RACOON2_CONF "$conf[$d]\n");
#	}
#
#	close(RACOON2_CONF);
#
#	return($true);
#}
