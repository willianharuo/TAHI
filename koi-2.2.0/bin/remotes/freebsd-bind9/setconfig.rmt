#!/usr/bin/perl
#
# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010
# NTT Advanced Technology, Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: koi/bin/remotes/freebsd-bind9/setconfig.rmt,v 1.3 2007/04/19 09:29:02 akisada Exp $
#
# $Id: setconfig.rmt,v 1.2 2008/06/03 07:39:52 akisada Exp $
#
################################################################

BEGIN {
	push(@INC, '/usr/local/koi/libdata');
	push(@INC, '.');
}

END {
}

use kRemote;

################################
# Configuration for NUT        #
################################
my $directory = "/etc/namedb";
my $pid_file  = "/var/run/named/pid";
my $dump_file = "/var/dump/named_dump.db";
my $statistics_file = "/var/stats/named.stats";
my $master_dir = "master";
my $slave_dir  = "slave";
my $conf_file_name = $directory . "/" . "named.conf";
my $root_file_name = $directory . "/" . "named.root";
my $rc_named = "/etc/rc.d/named";
my $named = "/usr/sbin/named";
my $rndcconf_file_name = $directory . "/" . "rndc.conf";
my $rndckey_file_name = $directory . "/" . "rndc.key";

################################
# Parameter                    #
################################
my $timeout = 20;

################################
# Shared                       #
################################
#zonefile_hash: zone_name -> zonefile_name
my %zonefile_hash = ();

#states_zonefile_hash: zone_name -> zonestates
my %states_zonefile_hash = ();
my $namedconf = '';
my $namedroot = '';

################################
# START                        #
################################
#------------------------------#
# open session                 #
#------------------------------#
my $ret = undef;
$ret = kRemoteOpen();
unless (defined($ret)) {
	print STDERR "fail to open session.\n";
	exit(1);
}

#------------------------------#
# prepare named.conf           #
#------------------------------#
$ret = undef;
if(defined($kRemote::kRemoteOpt{'ModeSetNamedConf'})){
	$ret = makeNamedConf();
	unless (defined($ret)) {
		print STDERR "fail to make named.conf.\n";
		exit(1);
	}
}

#------------------------------#
# prepare zone file            #
#------------------------------#
$ret = undef;
if(defined($kRemote::kRemoteOpt{'ModeSetZoneFiles'})){
	$ret = makeZonefiles();
	unless (defined($ret)) {
		print STDERR "fail to make zone file.\n";
		exit(1);
	}
}

#------------------------------#
# prepare named.root           #
#------------------------------#
$ret = undef;
if(defined($kRemote::kRemoteOpt{'ModeSetNamedRoot'})){
	$ret = makeNamedRoot();
	unless (defined($ret)) {
		print STDERR "fail to make zone file.\n";
		exit(1);
	}
}

#------------------------------#
# Login                        #
#------------------------------#
$ret = undef;
$ret = kRemoteLogin($timeout);
unless (defined($ret)) {
	print STDERR "fail to login.\n";
	exit(1);
}

#------------------------------#
# switch to Root               #
#------------------------------#
$ret = undef;
$ret = kRemoteSubstituteRoot();
unless ( defined($ret)) {
	print STDERR "fail to substitute to Root.\n";
	exit(1);
}


#------------------------------#
# Kill  Named                  #
#------------------------------#
if(defined($kRemote::kRemoteOpt{'ModeSetNamedConf'}) ||
   defined($kRemote::kRemoteOpt{'ModeSetNamedRoot'}) ){
	$ret = undef;
	$ret = kRemoteCommand("killall -KILL named", $timeout);
	unless ( defined($ret)) {
		print STDERR "fail to kill Named.\n";
		exit(1);
	}
}

#------------------------------#
# Write Configuration files    #
#------------------------------#

if(defined($kRemote::kRemoteOpt{'ModeSetNamedConf'})){
	$ret = undef;
	$ret = kRemoteCommand("cat <<EOS > $conf_file_name\n$namedconf", $timeout);
	unless (defined($ret)) {
		print STDERR "fail to write configuration.\n";
		exit(1);
	}
}

if(defined($kRemote::kRemoteOpt{'ModeSetNamedRoot'})){
	$ret = undef;
	$ret = kRemoteCommand("cat <<EOS > $root_file_name\n$namedroot", $timeout);
	unless (defined($ret)) {
		print STDERR "fail to write configuration.\n";
		exit(1);
	}
}

if(defined($kRemote::kRemoteOpt{'ModeSetZoneFiles'})){
	#makedir
	my $master_dir_path = $directory . "/" . $master_dir;
	my $master_jnl_path = $master_dir_path . "/*.jnl";
	my $slave_dir_path = $directory . "/" . $slave_dir;
	my $slave_file_path = $slave_dir_path . "/*";
	
	$ret = undef;
	$ret = kRemoteCommand("rm -f  $master_jnl_path $slave_file_path", $timeout);
	unless (defined($ret)) {
		print STDERR "fail to write configuration.\n";
		exit(1);
	}
	$ret = undef;
	$ret = kRemoteCommand("mkdir  $master_dir_path $slave_dir_path", $timeout);
	unless (defined($ret)) {
		print STDERR "fail to write configuration.\n";
		exit(1);
	}
	#write zone
	foreach my $zone_key (keys %states_zonefile_hash){
		my $filepath=$directory . "/" . $zonefile_hash{$zone_key};
		my $zonestate=$states_zonefile_hash{$zone_key};
		$ret = undef;
		$ret = kRemoteCommand("cat <<'EOS' > $filepath\n$zonestate\n", $timeout);
		unless (defined($ret)) {
			print STDERR "fail to write configuration.\n";
			exit(1);
		}
	}
}

if(defined($kRemote::kRemoteOpt{'ModeSetNsUpdate'})){
	#prepare NSupdate

	my $numCommands = scalar grep (/NsupCommand[0-9]+Command/,keys %kRemote::kRemoteOpt);

	my $nsupdateStr = "server 127.0.0.1\n";
	for (my $i = 0;$i < $numCommands;$i++) {
		my $commandPath = "NsupCommand" . $i;


		my $commandCommand = $kRemote::kRemoteOpt{$commandPath . "Command"};
		my $commandName = $kRemote::kRemoteOpt{$commandPath . "Name"};
		my $commandTtl = $kRemote::kRemoteOpt{$commandPath . "Ttl"};
		my $commandType = $kRemote::kRemoteOpt{$commandPath . "Type"};
		my $commandValue = $kRemote::kRemoteOpt{$commandPath . "Value"};

		$nsupdateStr .= "update $commandCommand $commandName ";
		$nsupdateStr .= "$commandTtl $commandType $commandValue\n";

	}
	$nsupdateStr .= "send\n";
	$nsupdateStr .= "EOS\n";
	#run nsupdate
	$ret = undef;
	$ret = kRemoteCommand("nsupdate <<EOS\n$nsupdateStr\n", $timeout);
	unless (defined($ret)) {
		print STDERR "fail to execute nsupdate.\n";
		exit(1);
	}
}

if(defined($kRemote::kRemoteOpt{'ModeSetRndc'})){

	my $rndc_str = "rndc-confgen | tee $rndcconf_file_name  | grep '^# [^A-Z]' ";
	$rndc_str .= "| sed -e 's/^#//' > $rndckey_file_name";

	$ret = undef;
	$ret = kRemoteCommand("$rndc_str", $timeout);
	unless (defined($ret)) {
		print STDERR "fail to make rndc.conf.\n";
		exit(1);
	}

}

#------------------------------#
# Restart or Reload Named      #
#------------------------------#
$ret = undef;
if(defined($kRemote::kRemoteOpt{'ModeSetNamedConf'}) ||
   defined($kRemote::kRemoteOpt{'ModeSetNamedRoot'})
){
	$ret = kRemoteCommand("$named -c $conf_file_name", $timeout);
	unless ( defined($ret)) {
		print STDERR "fail to start Named.\n";
		exit(1);
	}
	
}elsif(defined($kRemote::kRemoteOpt{'ModeSetZoneFiles'})){
	$ret = kRemoteCommand("$rc_named forcereload", $timeout);
	unless ( defined($ret)) {
		print STDERR "fail to restart Named.\n";
		exit(1);
	}
}elsif(defined($kRemote::kRemoteOpt{'ModeExecRndcFlush'})){
	$ret = kRemoteCommand("rndc -c $rndcconf_file_name -k $rndckey_file_name flush", $timeout);
	unless ( defined($ret)) {
		print STDERR "fail to flush rndc.\n";
		exit(1);
	}
}else{
	#do nothing
}

#------------------------------#
# logout root                  #
#------------------------------#
$ret = undef;
$ret = kRemoteLogoutWait($timeout);
unless ( defined($ret)) {
	print STDERR "fail to logout.\n";
	exit(1);
}

#------------------------------#
# logout                       #
#------------------------------#
$ret = undef;
$ret = kRemoteLogout($timeout);
unless ( defined($ret)) {
	print STDERR "fail to logout.\n";
	exit(1);
}

#------------------------------#
# close session                #
#------------------------------#
kRemoteClose();
# $ret = undef;
# $ret = kRemoteClose();
# unless ( defined($ret)) {
# 	print STDERR "fail to close session.\n";
# 	exit(1);
# }

################################
# END                          #
################################
exit(0);

#------------------------------#
# makeNamedConf                #
#------------------------------#
sub makeNamedConf(){
	#------------------------------#
	# check options                #
	#------------------------------#
	my $option_notify = '';
	my $option_resursion = '';
	my $option_edns_udp_size = '';
	my $option_forwarders = '';
	my $option_request_ixfr = '';
	my $option_provide_ixfr = '';
	my $option_allow_recursion = '';

	if(defined($kRemote::kRemoteOpt{'ConfOptNotify'})){
		$option_notify = "notify yes;";
	}else{
		$option_notify = "notify no;";
	}

	if(defined($kRemote::kRemoteOpt{'ConfOptRecursion'})){
		$option_resursion = "recursion yes;";
	}else{
		$option_resursion = "recursion no;";
	}

	if(defined($kRemote::kRemoteOpt{'ConfOptRequestIxfr'})){
		$option_request_ixfr = "request-ixfr yes;";
	}else{
		$option_request_ixfr = "request-ixfr no;";
	}
	if(defined($kRemote::kRemoteOpt{'ConfOptProvideIxfr'})){
		$option_provide_ixfr = "provide-ixfr yes;";
	}else{
		$option_provide_ixfr = "provide-ixfr no;";
	}
	
	if(defined($kRemote::kRemoteOpt{'ConfOptEdnsUdpSize'})){
		$option_edns_udp_size = "edns-udp-size   $kRemote::kRemoteOpt{'ConfOptEdnsUdpSize'};";
	}
	
	if(defined($kRemote::kRemoteOpt{'ConfOptForwarders'})){
		my $forwarders = $kRemote::kRemoteOpt{'ConfOptForwarders'};
		$option_forwarders = "forwarders {$forwarders;};";
	}

	if(defined($kRemote::kRemoteOpt{'ConfOptAllowRecursion'})){
		my $allow_recursion = $kRemote::kRemoteOpt{'ConfOptAllowRecursion'};
		$option_allow_recursion = "allow-recursion {$allow_recursion;};";
	}

	#------------------------------#
	# make zone sentence           #
	#------------------------------#
	my $numZones = scalar grep (/ConfZone[0-9]+Name/,keys %kRemote::kRemoteOpt);

	my $states_zones = '';
	for (my $i = 0;$i < $numZones;$i++) {
		my $confZonePath = "ConfZone" . $i;

		my $zoneName = $kRemote::kRemoteOpt{$confZonePath . "Name"};
		my $zoneType = $kRemote::kRemoteOpt{$confZonePath . "Type"};
		my $zoneAllowQuery = $kRemote::kRemoteOpt{$confZonePath . "AllowQuery"};
		my $zoneAllowTransfer = $kRemote::kRemoteOpt{$confZonePath . "AllowTransfer"};
		my $zoneAllowUpdate = $kRemote::kRemoteOpt{$confZonePath . "AllowUpdate"};
		my $zoneAlsoNotify = $kRemote::kRemoteOpt{$confZonePath . "AlsoNotify"};

		my $zone_name = $zoneName;
		my $zone_allow_query = undef;
		my $zone_allow_transfer = undef;
		my $zone_allow_update = undef;
		my $zone_also_notify = undef;
		my $zone_file = '';

		my ($zone_type,$zone_file,$zomeMasters);
		if($zoneType eq 'master'){
			$zone_type = "type master";
			$zone_file = "file \"$master_dir/$zone_name\"";
		}elsif($zoneType eq 'slave'){
			$zone_type = "type slave";
			$zomeMasters = $kRemote::kRemoteOpt{$confZonePath . "Masters"};
			$zone_file = "file \"$slave_dir/$zone_name\"";
		}else {
			print STDERR "zone type error:$zoneType.\n";
			return undef;
		}

		if(defined($zoneAllowQuery)){
			if($zoneAllowQuery  eq 'any'){
				$zone_allow_query = "allow-query     {any;}";
			}else{
				$zone_allow_query = "allow-query     {$zoneAllowQuery;}";
			}
		}

		if(defined($zoneAllowTransfer)){
			if($zoneAllowTransfer eq 'any'){
				$zone_allow_transfer = "allow-transfer     {any;}";
			}else{
				$zone_allow_transfer = "allow-transfer     {$zoneAllowTransfer;}";
			}
		}

		if(defined($zoneAllowUpdate)){
			if($zoneAllowUpdate eq 'any'){
				$zone_allow_update = "allow-update     {any;}";
			}else{
				$zone_allow_update = "allow-update     {$zoneAllowUpdate;}";
			}
		}

		if(defined($zoneAlsoNotify)){
			if($zoneAlsoNotify eq 'any'){
				$zone_also_notify = "also-notify     {any;}";
			}else{
				$zone_also_notify = "also-notify     {$zoneAlsoNotify;}";
			}
		}
		
		my $states_zone .= "zone \"$zone_name\" {\n";
		$states_zone .= "    $zone_type;\n";
		$states_zone .= "    masters {$zomeMasters;};\n" if(defined($zomeMasters));
		$states_zone .= "    $zone_allow_query;\n" if(defined($zone_allow_query));
		$states_zone .= "    $zone_allow_transfer;\n" if(defined($zone_allow_transfer));
		$states_zone .= "    $zone_allow_update;\n"  if(defined($zone_allow_update));;
		$states_zone .= "    $zone_also_notify;\n" if(defined($zone_also_notify));
		$states_zone .= "    $zone_file;\n";
		$states_zone .= "};\n";

		$states_zones .= $states_zone;
         } #for

	#debug
#	print("################################\n");
#	printf("$states_zones");
#	print("################################\n");


	my $controls = '';
	if(defined($kRemote::kRemoteOpt{'ModeSetRndc'})){
		$controls = "include \"$rndckey_file_name\";\n";
		$controls .= "controls {\n";
		$controls .= "        inet 127.0.0.1 allow { 127.0.0.1; } keys { rndc-key; };\n";
		$controls .= "        inet ::1 allow { ::1; } keys { rndc-key; };\n";
		$controls .= "};\n";
	}

$namedconf = <<EOF;
$controls
options {
        directory       "$directory";
        pid-file        "$pid_file";
        dump-file       "$dump_file";
        statistics-file "$statistics_file";
        listen-on       { any;};
        listen-on-v6    { any;};
        $option_notify
        $option_resursion
        $option_request_ixfr
        $option_provide_ixfr
        $option_allow_recursion
        $option_edns_udp_size
        $option_forwarders
};
zone "." {
        type hint;
        file "named.root";
};
$states_zones

EOS
EOF

	#debug
#	print("################################\n");
#	printf("$namedconf");
#	print("################################\n");
	
	return 0;
}

#------------------------------#
# makeZonefiles                #
#------------------------------#
sub makeZonefiles(){
	$numZones = scalar grep (/ZoneZone[0-9]+Name/,keys %kRemote::kRemoteOpt);

	for (my $i = 0;$i < $numZones;$i++) {
		my $zoneZonePath = "ZoneZone" . $i;
		my $zoneName = $kRemote::kRemoteOpt{$zoneZonePath . "Name"};
		my $zoneTTL = $kRemote::kRemoteOpt{$zoneZonePath . "Ttl"};
		my $zoneType = $kRemote::kRemoteOpt{$zoneZonePath . "Type"};
		if($zoneType eq 'master'){
			$zonefile_hash{$zoneName} = "$master_dir/$zoneName";
		}elsif($zoneType eq 'slave'){
			$zonefile_hash{$zoneName} = "$slave_dir/$zoneName";
		}else {
			print STDERR "zone type error:$zoneType.\n";
			return undef;
		}

		my $states_zonefile = "\$TTL    $zoneTTL\n";

		my $zoneRecString = $zoneZonePath . "Rec";
		my $numRecord = scalar grep (/$zoneRecString[0-9]+Name/,keys %kRemote::kRemoteOpt);
		
		for (my $j = 0;$j < $numRecord;$j++) {
			my $zoneRecPath = $zoneRecString . $j;
			my $name  = $kRemote::kRemoteOpt{$zoneRecPath . "Name"};
			my $type  = $kRemote::kRemoteOpt{$zoneRecPath . "Type"};
			my $class = $kRemote::kRemoteOpt{$zoneRecPath . "Class"};
			my $ttl   = '';
			if ($zoneTTL != $kRemote::kRemoteOpt{$zoneRecPath . "Ttl"}) {
				$ttl = $kRemote::kRemoteOpt{$zoneRecPath . "Ttl"};
			}

			if ($type eq 'SOA') {
				my $mname = $kRemote::kRemoteOpt{$zoneRecPath . "Mname"};
				my $rname = $kRemote::kRemoteOpt{$zoneRecPath . "Rname"};
				my $serial = $kRemote::kRemoteOpt{$zoneRecPath . "Serial"};
				my $refresh = $kRemote::kRemoteOpt{$zoneRecPath . "Refresh"};
				my $retry = $kRemote::kRemoteOpt{$zoneRecPath . "Retry"};
				my $expire = $kRemote::kRemoteOpt{$zoneRecPath . "Expire"};
				my $minimum = $kRemote::kRemoteOpt{$zoneRecPath . "Minimum"};

				$states_zonefile .= "$name $ttl $class $type $mname $rname (\n";
				$states_zonefile .= "    $serial\n";
				$states_zonefile .= "    $refresh\n";
				$states_zonefile .= "    $retry\n";
				$states_zonefile .= "    $expire\n";
				$states_zonefile .= "    $minimum\n";
				$states_zonefile .= ")\n";
			}elsif ($type eq 'NS') {
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $value\n";
			}elsif ($type eq 'MX') {
				my $preference = $kRemote::kRemoteOpt{$zoneRecPath . "Preference"};
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $preference    $value\n";
			}elsif ($type eq 'A') {
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $value\n";
			}elsif ($type eq 'AAAA') {
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $value\n";
			}elsif ($type eq 'CNAME') {
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $value\n";
			}elsif ($type eq 'HINFO') {
				my $cpu = $kRemote::kRemoteOpt{$zoneRecPath . "Cpu"};
				my $os = $kRemote::kRemoteOpt{$zoneRecPath . "Os"};
				$states_zonefile .= "$name $ttl $class $type    $cpu    $os\n";
			}elsif ($type eq 'PTR') {
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $value\n";
			}elsif ($type eq 'TXT') {
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $value\n";
			}elsif ($type eq 'WKS') {
				my $address = $kRemote::kRemoteOpt{$zoneRecPath . "Address"};
				my $protocol = $kRemote::kRemoteOpt{$zoneRecPath . "Protocol"};
				my $bitmap = $kRemote::kRemoteOpt{$zoneRecPath . "Bitmap"};
				$states_zonefile .= "$name $ttl $class $type    $address $protocol $bitmap\n";
			}elsif ($type eq 'SRV') {
				my $priority = $kRemote::kRemoteOpt{$zoneRecPath . "Priority"};
				my $weight = $kRemote::kRemoteOpt{$zoneRecPath . "Weight"};
				my $port = $kRemote::kRemoteOpt{$zoneRecPath . "Port"};
				my $value = $kRemote::kRemoteOpt{$zoneRecPath . "Value"};
				$states_zonefile .= "$name $ttl $class $type    $priority $weight $port $value\n";
			}elsif ($type eq 'NAPTR') {
				my $order = $kRemote::kRemoteOpt{$zoneRecPath . "Order"};
				my $preference = $kRemote::kRemoteOpt{$zoneRecPath . "Preference"};
				my $flags = $kRemote::kRemoteOpt{$zoneRecPath . "Flags"};
				my $services = $kRemote::kRemoteOpt{$zoneRecPath . "Services"};
				my $regexp = $kRemote::kRemoteOpt{$zoneRecPath . "Regexp"};
				my $replacement = $kRemote::kRemoteOpt{$zoneRecPath . "Replacement"};
				$states_zonefile .= "$name $ttl $class $type    $order ";
				$states_zonefile .= "$preference $flags $services $regexp $replacement\n";
			}else {
				print STDERR "record type error:$type.\n";
				return undef;
			} #if
		} #foreach
		$states_zonefile .= "'EOS'\n";
		$states_zonefile_hash{$zoneName} = $states_zonefile;

		#debug
#		print("################################\n");
#		printf("$states_zonefile");
#		print("################################\n");
		
	} #foreach
	return 0;
}

#------------------------------#
# makeNamedRoot                #
#------------------------------#
sub makeNamedRoot(){
	my $numRoots = scalar grep (/RootZone[0-9]+Name/,keys %kRemote::kRemoteOpt);

	for (my $i = 0;$i < $numRoots;$i++) {
		my $rootZonePath = "RootZone" . $i;
		my $rootName = $kRemote::kRemoteOpt{$rootZonePath . "Name"};
		my $ttl = $kRemote::kRemoteOpt{$rootZonePath . "Ttl"};
		my $class = $kRemote::kRemoteOpt{$rootZonePath . "Class"};
		my $type = $kRemote::kRemoteOpt{$rootZonePath . "Type"};
		my $value = $kRemote::kRemoteOpt{$rootZonePath . "Value"};
		$namedroot .= "$rootName   $ttl $class $type $value\n";
	}
	$namedroot .= "EOS\n";
	return 0;
}
