#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/CL/CL_RFC1034_5_3_3_delegation_invalid.seq,v 1.1.1.1 2006/06/02 05:15:41 akisada Exp $
# $Id: CL_RFC1034_5_3_3_delegation_invalid.seq,v 1.1.1.1 2006/06/02 05:15:41 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# Query configuration          #
#------------------------------#
my $QueryConfig_1={ 
#mode
	'ModeRemoteAsync' => 'yes',
	'ModeRequiredTestMode' => 'client',
	'ModeManualNoPause' => 'yes',
#query
	'Query0Mode' => 'dns',
	'Query0Addr0' => $TN_NET1_NODE2_ADDR,
	'Query0Protocol' => 'UDP',
	'Query0Type' => 'A',
	'Query0Class' => 'IN',
	'Query0Value' => 'A.example.com',   
};

################################
# configuration                #
################################
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT
};

$dns_session_config[1] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE3_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT
};

my @dns_session = ();
my @dns_one_session;
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();
my @exp_dns_msg_1 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                }
        ]
};

$dns_session[1] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => undef,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1
                }
        ]
};

################################
# send packet definition       #
################################
#--------------------------
# 2nd ( TN(NS1)->NUT )
#--------------------------
$gen_dns_msg_0[0]->{'header'} = {

        # 2nd packet header
        'id'      => undef,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 1,
        'arcount' => 1,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {

        # 2nd packet question
        'qname'  => Gen_DNS_Name('A.example.com.'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

$gen_dns_msg_0[0]->{'authority'}->[0] = {

        # 2nd packet
        'name'     => Gen_DNS_Name( 'invalid', 0xC016 ),
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 6,
        'rdata'    => Gen_DNS_Name( 'NS2',     0xC01F ),
};

$gen_dns_msg_0[0]->{'additional'}->[0] = {

        # 2nd packet
        'name'     => Gen_DNS_Name( '', 0xC033 ),
        'type'     => $ADDR_TYPE,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => $ADDR_LENGTH,
        'rdata'    => Gen_DNS_RDATA_A($TN_NET1_NODE3_ADDR),
};

################################
# expected packet definition   #
################################
#-----------------------
# 1st ( NUT->TN(NS1) )
#-----------------------
$exp_dns_msg_0[0]->{'header'} = {

        # 1st packet header
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => undef,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'A.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#-------------------------
# 3rd ( NUT->TN(NS2) )
#-------------------------
$exp_dns_msg_1[0]->{'header'} = {

        # 3rd packet header
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => undef,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_1[0]->{'question'}->[0] = {

        # 3rd packet
        'qname'  => 'A.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

################################
# start tests                  #
################################
my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# Send Query from Nut          #
#------------------------------#
my $remoteRet = DNSRemote("runquery.rmt",$QueryConfig_1);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

Print_Message(
        "=",
        [
                "Run query command on NUT\n",
		"\tNAME SERVER ADDRESS : 192.168.1.20\n",
                "\tQNAME               : A.example.com\n",
                "\tQTYPE               : A\n",
		"\tQCLASS              : IN\n",
		"\tTRANSPORT PROTOCOL  : UDP\n",
        ]
);

#------------------------------#
# 1st packet (receive)         #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}

#Print_Message( "=", ["Receive 1st message\n"] );

#------------------------------#
# Judgment (1st packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (1st packet)\n",
"1. Received standard query QNAME=A.example.com from NUT to Server1(TN).\n",
        ]
);

my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["1st packet PASS\n"] );

#------------------------------#
# 2nd packet (send)            #
#------------------------------#
#-------------------------------
# Copy Header RD and ID from NUT query
#-------------------------------
$gen_dns_msg_0[0]->{'header'}->{'id'} = $recv_data->{'header'}->{'id'};
$gen_dns_msg_0[0]->{'header'}->{'rd'} = $recv_data->{'header'}->{'rd'};

$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}

Print_Message(
        "=",
        [
                "Send 2nd message\n",
                "Check whether NUT send DNS query to DNS Server2 or not\n",
        ]
);

#------------------------------#
# 3rd packet (receive)         #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[0]
);

#------------------------------#
# Judgment (3rd packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (3rd packet)\n",
"3. Not received standard query QNAME=A.example.com from NUT to Server2(TN)\n"
        ]
);

if ( defined($ret) ) {
        Debug_Print("ERROR: receive DNS message\n");
        DNSExit($FAIL);
}

Print_Message( "=", ["Don't receive message\n"] );

Print_Message( "=", ["3rd packet PASS\n"] );



#NOTREACHED

DNSExit($OK);
__END__
##################################################################

=head1 NAME

	CL_RFC1034_5_3_3_delegation_invalid - Analyze the response (delegation is invalid)


=head1 VERIFICATION POINTS

	Verify that a NUT checks the query which has invalid delegation.

=begin html
	<UL>
	<DD><li>If the response shows a delegation, the resolver should check to see<BR>
	<DD>that the delegation is "closer" to the answer than the servers in SLIST are.
	</li>
	</ul> 

=end html

=head1 TARGET

	Client (with recursive function)

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./CL_RFC1034_5_3_3_delegation_invalid.seq">CL_RFC1034_5_3_3_delegation_invalid.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<ul>
	<li><STRONG>Network Topology</STRONG></li> 
	<PRE>
        AP Server1(TN):A.example.com     DNS Server1(TN)           DNS Server2(TN)
          |3ffe:501:ffff:101::10           |3ffe:501:ffff:101::20    |3ffe:501:ffff:101::30
          |192.168.1.10                    |192.168.1.20             |192.168.1.30
          |                                |                         |
Net-y   --+--------+-----------------------+-------------------------+--- 3ffe:501:ffff:101::/64 
                   |                                                      192.168.1/24
                   |
                   |
                 ROUTER1(TN)
                   |3ffe:501:ffff:100::1
                   |192.168.0.1
                   |
Net-z   --+--------+----------------------------------------------------- 3ffe:501:ffff:100::/64 
          |                                                               192.168.0/24
        DNS Client1(NUT)
           3ffe:501:ffff:100:XXXX
           192.168.0.10
	<BR>
	XXXX: EUI64 address
	</PRE>
	<p></p>
	<li><STRONG>Setup</STRONG></li>
	<PRE>
	Set the DNS Server1(TN) address on NUT as above mentioned Network Topology.
	</PRE>
	<p></p>
	<LI><STRONG>Pre-Sequence</STRONG></LI><p><PRE>
	In order to send the query for A type(IN class) of AP Server1(TN):A.example.com to the DNS Server1(TN), 
	NUT is configured.
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

=begin html
<PRE>
	This test sequence is following.
<BR>
    DNS Client1 (NUT)                        DNS Server1 (TN)                               DNS Server2 (TN)
        |                                              |                                              |
        |--------------------------------------------->|                                              |
        |           1. Send standard query             |                                              |
        |              QNAME=A.example.com             |                                              |
        |                                              |                                              |
        |<---------------------------------------------|                                              |
        |           2. Standard query response         |                                              |
        |              Not include Answer section      |                                              |
        |              (invalid delegation)            |                                              |
        |                                              |                                              |
        |----------------------------------------------|------------------------------------------> X |
        |           3. Send standard query             |                                              |
        |              QNAME=A.example.com             |                                              |
        v                                              v                                              v
<BR>
	1. NUT send standard query to DNS Server1(TN).
                  Judgment (Check *1)
	2. TN send standard query response to NUT.
	3. NUT send standard query to DNS Server2(TN).*Don't specify the DNS Server2.*Send query automatically.
                  Judgment (Check *3)
<ul>
Packet Description<br>
1st Packet
	<table border="1">
	  <tbody>
	    <tr>
	      <td colspan="3">
	      <center>1. Standard query from DNS Client1 (NUT) to DNS Server1 (TN) </center>
	      </td>
	    </tr>
	    <tr>
	      <td rowspan="2">IP Header</td>
	      <td>Source Address</td>
	      <td>NUT_NETZ</td>
	    </tr>
	    <tr>
	      <td>Destination Address</td>
	      <td>SV_NETY</td>
	    </tr>
	    <tr>
	      <td colspan="1" rowspan="2">UDP Header<br>
	      </td>
	      <td>Src Port<br>
	      </td>
	      <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>Dst Port<br>
	      </td>
	      <td>53<br>
 	     </td>
	    </tr>
 	   <tr>
 	     <td colspan="1" rowspan="13">DNS Header<br>
 	     </td>
 	     <td>ID</td>
	      <td><i>any</i></td>
	    </tr>
	    <tr>
	      <td>QR<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>OPCODE<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>AA<br>
	      </td>
	      <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>TC</td>
	      <td>0</td>
	    </tr>
	    <tr>
	      <td>RD</td>
	      <td><i>any</i></td>
	    </tr>
	    <tr>
	      <td>RA<br>
	      </td>
	      <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>Z<br>
	      </td>
	      <td>any<br>
	      </td>
	    </tr>
	    <tr>
	      <td>RCODE<br>
	      </td>
 	     <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>QDCOUNT<br>
	      </td>
	      <td>1<br>
	      </td>
 	   </tr>
	    <tr>
	      <td>ANCOUNT<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>NSCOUNT<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>ARCOUNT<br>
	      </td>
	      <td>any<br>
	      </td>
	    </tr>
	    <tr>
	      <td colspan="1" rowspan="3">DNS Question section<br>
	      </td>
	      <td>QNAME</td>
	      <td>A.example.com<br>
	      </td>
	    </tr>
	    <tr>
	      <td>QTYPE<br>
	      </td>
	      <td>A (0x0001)<br>
	      </td>
	    </tr>
	    <tr>
	      <td>QCLASS<br>
	      </td>
	      <td>IN (0x0001)<br>
	      </td>
	    </tr>
	  </tbody>
	</table>
2nd packet.
	<TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>2. Standard query response from DNS Server1 (TN) to Client1 (NUT)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>SV_NETY</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>Same as 1st Packet's Src Port</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>Same as 1st Packet's ID</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>Same as 1st Packet's RD</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>A.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
<!--
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>A.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.10</TD>
		</TR>
-->
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>invalid.com (invalid + Pointer 0xC016)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>6</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS2.invalid.com (NS2 + Pointer 0xC01F)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS2.invalid.com (Pointer 0xC033)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.30</TD>
		</TR>
		</TBODY>
	</TABLE>
<!--
3rd Packet
	<table border="1">
	  <tbody>
	    <tr>
	      <td colspan="3">
	      <center>3. Standard query from DNS Client1 (NUT) to DNS Server2 (TN) </center>
	      </td>
	    </tr>
	    <tr>
	      <td rowspan="2">IP Header</td>
	      <td>Source Address</td>
	      <td>NUT_NETZ</td>
	    </tr>
	    <tr>
	      <td>Destination Address</td>
	      <td>SV2_NETY</td>
	    </tr>
	    <tr>
	      <td colspan="1" rowspan="2">UDP Header<br>
	      </td>
	      <td>Src Port<br>
	      </td>
	      <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>Dst Port<br>
	      </td>
	      <td>53<br>
 	     </td>
	    </tr>
 	   <tr>
 	     <td colspan="1" rowspan="13">DNS Header<br>
 	     </td>
 	     <td>ID</td>
	      <td><i>any</i></td>
	    </tr>
	    <tr>
	      <td>QR<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>OPCODE<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>AA<br>
	      </td>
	      <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>TC</td>
	      <td>0</td>
	    </tr>
	    <tr>
	      <td>RD</td>
	      <td><i>any</i></td>
	    </tr>
	    <tr>
	      <td>RA<br>
	      </td>
	      <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>Z<br>
	      </td>
	      <td>any<br>
	      </td>
	    </tr>
	    <tr>
	      <td>RCODE<br>
	      </td>
 	     <td><i>any</i><br>
	      </td>
	    </tr>
	    <tr>
	      <td>QDCOUNT<br>
	      </td>
	      <td>1<br>
	      </td>
 	   </tr>
	    <tr>
	      <td>ANCOUNT<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>NSCOUNT<br>
	      </td>
	      <td>0<br>
	      </td>
	    </tr>
	    <tr>
	      <td>ARCOUNT<br>
	      </td>
	      <td>any<br>
	      </td>
	    </tr>
	    <tr>
	      <td colspan="1" rowspan="3">DNS Question section<br>
	      </td>
	      <td>QNAME</td>
	      <td>A.example.com<br>
	      </td>
	    </tr>
	    <tr>
	      <td>QTYPE<br>
	      </td>
	      <td>A (0x0001)<br>
	      </td>
	    </tr>
	    <tr>
	      <td>QCLASS<br>
	      </td>
	      <td>IN (0x0001)<br>
	      </td>
	    </tr>
	  </tbody>
	</table>
-->
NUT_NETZ : DNS Client1(NUT)'s address
SV_NETY : DNS Server1(TN)'s address
SV2_NETY : DNS Server2(TN)'s address
</ul>
</PRE>

=end html

=head1 JUDGMENT

	1. Received standard query QNAME=A.example.com from NUT to Server1(TN).
	3. Not received standard query QNAME=A.example.com from NUT to Server2(TN)

=head1 TERMINATION

	If NUT has cache function, clear the cache.

=head1 REFERENCE

=begin html
<PRE>
	RFC1034 DOMAIN NAMES - CONCEPTS AND FACILITIES
	5.3.3. Algorithm
</PRE>

=end html

=cut
