#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/CL/CL_RFC2181_5_2_diff_nonauth.seq,v 1.1.1.1 2006/06/02 05:15:41 akisada Exp $
# $Id: CL_RFC2181_5_2_diff_nonauth.seq,v 1.1.1.1 2006/06/02 05:15:41 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# Query configuration          #
#------------------------------#
my $QueryConfig_1={ 
#mode
	'ModeRemoteAsync' => 'yes',
	'ModeRequiredTestMode' => 'client',
	'ModeManualNoPause' => 'yes',
#query
	'Query0Mode' => 'dns',
	'Query0Addr0' => $TN_NET1_NODE2_ADDR,
	'Query0Protocol' => 'UDP',
	'Query0Type' => 'A',
	'Query0Class' => 'IN',
	'Query0Value' => 'A.example.com',   
};

my $QueryConfig_3={ 
#mode
	'ModeRequiredTestMode' => 'client',
	'ModeManualNoPause' => 'yes',
#query
	'Query0Mode' => 'dns',
	'Query0Addr0' => $TN_NET1_NODE2_ADDR,
	'Query0Protocol' => 'UDP',
	'Query0Type' => 'A',
	'Query0Class' => 'IN',
	'Query0Value' => 'A.example.com',   
};

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

$dns_session_config[1] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE3_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

$dns_session_config[2] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

my @dns_session;

#--------------------
# DNS Server1
#--------------------
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();
my @exp_dns_msg_1 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                },
        ]
};

$dns_session[1] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => undef,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1
                }
        ]
};

$dns_session[2] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => undef,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1
                }
        ]
};

$dns_session[3] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => undef,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1
                }
        ]
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 1st message
#------------------

$exp_dns_msg_0[0]->{'header'} = {
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => undef,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'A.example.com.',
        'qtype'  => 0x0001,             #A
        'qclass' => 0x0001,
};

#------------------
# 3rd message
#------------------

$exp_dns_msg_1[0]->{'header'} = {
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => undef,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_1[0]->{'question'}->[0] = {
        'qname'  => 'A.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 2nd message
#------------------
$gen_dns_msg_0[0]->{'header'} = {
        'id'      => undef,    # copy from 1st message
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => undef,    # copy from 1st message
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 2,
        'nscount' => 1,
        'arcount' => 1,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => Gen_DNS_Name('A.example.com.'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

$gen_dns_msg_0[0]->{'answer'}->[0] = {
        'name'     => Gen_DNS_Name( '', 0xC00C ),
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => Gen_DNS_RDATA_A('192.168.1.10'),
};

$gen_dns_msg_0[0]->{'answer'}->[1] = {
        'name'     => Gen_DNS_Name( '', 0xC00C ),
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 172800,
        'rdlength' => 4,
        'rdata'    => Gen_DNS_RDATA_A('192.168.1.11'),
};

$gen_dns_msg_0[0]->{'authority'}->[0] = {
        'name'     => Gen_DNS_Name( '',    0xC00E ),
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 6,
        'rdata'    => Gen_DNS_Name( 'NS2', 0xC00E ),
};

$gen_dns_msg_0[0]->{'additional'}->[0] = {
        'name'     => Gen_DNS_Name( '', 0xC04B ),
        'type'     => $ADDR_TYPE,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => $ADDR_LENGTH,
        'rdata'    => Gen_DNS_RDATA_A($TN_NET1_NODE3_ADDR),
};

################################
# start tests                  #
################################

my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# Send Query from Nut          #
#------------------------------#
my $remoteRet = DNSRemote("runquery.rmt",$QueryConfig_1);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

Print_Message(
        "=",
        [
                "Run query command on NUT\n",
		"\tNAME SERVER ADDRESS : 192.168.1.20\n",
                "\tQNAME               : A.example.com\n",
                "\tQTYPE               : A\n",
		"\tQCLASS              : IN\n",
		"\tTRANSPORT PROTOCOL  : UDP\n",
        ]
);

#------------------------------#
# 1st test (receive)           #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}

#Print_Message( "=", ["Receive 1st message\n"] );

#------------------------------#
# Judgment (1st packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (1st packet)\n",
"1. Received standard query QNAME=A.example.com from NUT to Server1(TN).\n",
        ]
);
my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["1st packet PASS\n"] );

#------------------------------#
# 2nd packet (send)            #
#------------------------------#
#-------------------------------
# Copy Header RD and ID from NUT query
#-------------------------------
$gen_dns_msg_0[0]->{'header'}->{'id'} = $recv_data->{'header'}->{'id'};
$gen_dns_msg_0[0]->{'header'}->{'rd'} = $recv_data->{'header'}->{'rd'};

$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}

#Print_Message( "=", ["Send 2nd message\n"] );

{
		use kCommon;
	unless (defined(kRemoteAsyncWait())) {
		DNSExit($FAIL);
	}
}

#------------------------------#
# 3rd packet (receive) A       #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 10,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[0]
);

if ( defined($ret) ) {
        #Print_Message( "=", ["Receive 3rd A message\n"] );

        #------------------------------#
        # Judgment                     #
        #------------------------------#
        Print_Message(
                "#",
                [
                        "Judgment (3rd A packet)\n",
"3A. Received standard query QNAME=A.example.com from NUT to Server2(TN).\n"
                ]
        );
        $recv_data =
          $dns_session[1]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

        $ret = undef;
        $ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_1[0] );

        unless ( defined($ret) ) {
                DNSExit($FAIL);
        }

        Print_Message( "=", ["3rd A packet PASS\n"] );
} else {
	#------------------------------#
	# Send Query from Nut          #
	#------------------------------#
	$remoteRet = undef;
	$remoteRet = DNSRemote("runquery.rmt",$QueryConfig_3);
	unless ( defined($remoteRet) ) {
		Debug_Print("ERROR:DNSRemote\n");
		DNSExit($FAIL);
	}
        #------------------------------#
        # 3rd packet (receive)B        #
        #------------------------------#
        $ret = undef;
        $ret = DNSRecv(
                1, 10,
                $dns_session[2]->{'socket_ref'},
                $dns_session[2]->{'dns_one_session'}->[0]
        );

        unless ( defined($ret) ) {
                Debug_Print("ERROR: Can't receive DNS message\n");
                DNSExit($FAIL);
        }

        #Print_Message( "=", ["Receive 3rd B message\n"] );

        #------------------------------#
        # Judgment                     #
        #------------------------------#
        Print_Message(
                "#",
                [
                        "Judgment (3rd B packet)\n",
"3B. Not received standard query QNAME=A.example.com from NUT to Server1(TN) or Server2(TN).\n",
                ]
        );
        $recv_data =
          $dns_session[2]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

        $ret = undef;
        $ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_1[0] );

        unless ( defined($ret) ) {
                DNSExit($FAIL);
        }

        Print_Message( "=", ["3rd A packet PASS\n"] );
}    #if


#NOTREACHED

DNSExit($OK);
__END__
######################################################################

=head1 NAME

	CL_RFC2181_5_2_diff_nonauth - Differing TTLs from non-authoritative source

=head1 VERIFICATION POINTS

	Verify that a NUT treats as an error, when receive response containing RRs 
	from an RRSet with differing TTLs from a non-authoritative source.

=begin html
	<UL>
	<DD><LI>Should a client receive a response containing RRs from an RRSet with
	<DD>differing TTLs, it should treat this as an error.  If the RRSet
	<DD>concerned is from a non-authoritative source for this data, the
	<DD>client should simply ignore the RRSet, and if the values were
	<DD>required, seek to acquire them from an authoritative source.  Clients
	<DD>that are configured to send all queries to one, or more, particular
	<DD>servers should treat those servers as authoritative for this purpose.
	</LI>
	</ul> 

=end html

=head1 TARGET

	Client (with Caching function)

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./CL_RFC2181_5_2_diff_nonauth.seq">CL_RFC2181_5_2_diff_nonauth.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
        AP Server1(TN):A.example.com     DNS Server1(TN)           DNS Server2(TN)
          |3ffe:501:ffff:101::10           |3ffe:501:ffff:101::20    |3ffe:501:ffff:101::30
          |192.168.1.10                    |192.168.1.20             |192.168.1.30
          |                                |                         |
Net-y   --+--------+-----------------------+-------------------------+--- 3ffe:501:ffff:101::/64 
                   |                                                      192.168.1/24
                   |
                   |
                 ROUTER1(TN)
                   |3ffe:501:ffff:100::1
                   |192.168.0.1
                   |
Net-z   --+--------+----------------------------------------------------- 3ffe:501:ffff:100::/64 
          |                                                               192.168.0/24
        DNS Client1(NUT)
           3ffe:501:ffff:100:XXXX
           192.168.0.10
	<BR>
	XXXX: EUI64 address
	</PRE>
	<P></P>
	<LI><STRONG>Setup</STRONG></LI>
	<PRE>
	Set the DNS Server1(TN) address on NUT as above mentioned Network Topology.
	</PRE>
	<P></P>
	<LI><STRONG>Pre-Sequence</STRONG></LI><P><PRE>
	In order to send the query for A type(IN class) of AP Server1(TN):A.example.com to the DNS Server1(TN), 
	NUT is configured.
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

    DNS Client1 (NUT)                        DNS Server1 (TN)                               DNS Server2 (TN)
        |                                              |                                              |
        |--------------------------------------------->|                                              |
        |           1. Send standard query             |                                              |
        |              QNAME=A.example.com             |                                              |
        |                                              |                                              |
        |<---------------------------------------------|                                              |
        |           2. Standard query response         |                                              |
        |              RRs with differing TTLs         |                                              |
        |                                              |                                              |
        |----------------------------------------------|--------------------------------------------->|
        |           3A. Send standard query            |                                              |
        |              QNAME=A.example.com             |                                              |
        |                                              |                                              |
        |--------------------------------------------->|--------------------------------------------->|
        |           3B. Send standard query            |                                              |
        |              QNAME=A.example.com             |                                              |
        v                                              v                                              v

	1. NUT send standard query to DNS Server1(TN). (Judgment *1)
	2. TN send standard query response to NUT.
	3A. NUT send standard query to DNS Server2(TN). *Don't specify the DNS Server2.
           *Send query automatically. (Judgment *3A)
	3B. NUT send standard query. (Judgment *3B)

        *3A or 3B is executed.

=begin html
	<UL>
	<LI>Packet Description</LI><BR>
	<BR>
	1st Packet
	<TABLE BORDER="1">
	  <TBODY>
	    <TR>
	      <TD colspan="3">
	      <center>1. Standard query from DNS Client1 (NUT) to DNS Server1 (TN) </center>
	      </TD>
	    </TR>
	    <TR>
	      <TD rowspan="2">IP Header</TD>
	      <TD>Source Address</TD>
	      <TD>NUT_NETZ</TD>
	    </TR>
	    <TR>
	      <TD>Destination Address</TD>
	      <TD>SV_NETY</TD>
	    </TR>
	    <TR>
	      <TD colspan="1" rowspan="2">UDP Header<BR>
	      </TD>
	      <TD>Src Port<BR>
	      </TD>
	      <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>Dst Port<BR>
	      </TD>
	      <TD>53<BR>
 	     </TD>
	    </TR>
 	   <TR>
 	     <TD colspan="1" rowspan="13">DNS Header<BR>
 	     </TD>
 	     <TD>ID</TD>
	      <TD><i>any</i></TD>
	    </TR>
	    <TR>
	      <TD>QR<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>OPCODE<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>AA<BR>
	      </TD>
	      <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>TC</TD>
	      <TD>0</TD>
	    </TR>
	    <TR>
	      <TD>RD</TD>
	      <TD><i>any</i></TD>
	    </TR>
	    <TR>
	      <TD>RA<BR>
	      </TD>
	      <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>Z<BR>
	      </TD>
	      <TD>any<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>RCODE<BR>
	      </TD>
 	     <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>QDCOUNT<BR>
	      </TD>
	      <TD>1<BR>
	      </TD>
 	   </TR>
	    <TR>
	      <TD>ANCOUNT<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>NSCOUNT<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>ARCOUNT<BR>
	      </TD>
	      <TD>any<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD colspan="1" rowspan="3">DNS Question section<BR>
	      </TD>
	      <TD>QNAME</TD>
	      <TD>A.example.com<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>QTYPE<BR>
	      </TD>
	      <TD>A (0x0001)<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>QCLASS<BR>
	      </TD>
	      <TD>IN (0x0001)<BR>
	      </TD>
	    </TR>
	  </TBODY>
	</TABLE>
	<BR>
	2nd packet.
	<P></P>
	<TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>2. Standard query response from DNS Server1 (TN) to Client1 (NUT)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>SV_NETY</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>Same as 1st Packet's Src Port</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>Same as 1st Packet's ID</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>Same as 1st Packet's RD</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>A.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>A.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.10</TD>
		</TR>
		<TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>A.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>2 day (172800)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.11</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>example.com (Pointer 0xC00E)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>6</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS2.example.com (NS2 + Pointer 0xC00E)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS2.example.com (Pointer 0xC04B)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.30</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	3rd packet.
	<P></P>
	<TABLE border="1">
	  <TBODY>
	    <TR>
	      <TD colspan="3">
	      <center>3A. Standard query from DNS Client1 (NUT) to DNS Server2 (TN) </center>
	      </TD>
	    </TR>
	    <TR>
	      <TD rowspan="2">IP Header</TD>
	      <TD>Source Address</TD>
	      <TD>NUT_NETZ</TD>
	    </TR>
	    <TR>
	      <TD>Destination Address</TD>
	      <TD>SV2_NETY</TD>
	    </TR>
	    <TR>
	      <TD colspan="1" rowspan="2">UDP Header<BR>
	      </TD>
	      <TD>Src Port<BR>
	      </TD>
	      <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>Dst Port<BR>
	      </TD>
	      <TD>53<BR>
 	     </TD>
	    </TR>
 	   <TR>
 	     <TD colspan="1" rowspan="13">DNS Header<BR>
 	     </TD>
 	     <TD>ID</TD>
	      <TD><i>any</i></TD>
	    </TR>
	    <TR>
	      <TD>QR<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>OPCODE<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>AA<BR>
	      </TD>
	      <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>TC</TD>
	      <TD>0</TD>
	    </TR>
	    <TR>
	      <TD>RD</TD>
	      <TD><i>any</i></TD>
	    </TR>
	    <TR>
	      <TD>RA<BR>
	      </TD>
	      <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>Z<BR>
	      </TD>
	      <TD>any<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>RCODE<BR>
	      </TD>
 	     <TD><i>any</i><BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>QDCOUNT<BR>
	      </TD>
	      <TD>1<BR>
	      </TD>
 	   </TR>
	    <TR>
	      <TD>ANCOUNT<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>NSCOUNT<BR>
	      </TD>
	      <TD>0<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>ARCOUNT<BR>
	      </TD>
	      <TD>any<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD colspan="1" rowspan="3">DNS Question section<BR>
	      </TD>
	      <TD>QNAME</TD>
	      <TD>A.example.com<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>QTYPE<BR>
	      </TD>
	      <TD>A (0x0001)<BR>
	      </TD>
	    </TR>
	    <TR>
	      <TD>QCLASS<BR>
	      </TD>
	      <TD>IN (0x0001)<BR>
	      </TD>
	    </TR>
	  </TBODY>
	</TABLE>
        <BR>
        <BR>
        Exp.
        <BR>
        <TABLE BORDER="1">
                <TBODY>
                <TR>
                        <TD>NUT_NETZ</TD>
                        <TD>DNS Client1's (NUT) Net-z address</TD>
                </TR>
                <TR>
                        <TD>SV_NETY</TD>
                        <TD>DNS Server1's (TN) Net-y address</TD>
                </TR>
                <TR>
                        <TD>SV2_NETY</TD>
                        <TD>DNS Server2's (TN) Net-y address</TD>
                </TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	1. Received standard query QNAME=A.example.com from NUT to Server1(TN).
	3A. Received standard query QNAME=A.example.com from NUT to Server2(TN).
	3B. Received standard query QNAME=A.example.com from NUT to Server1(TN) or Server2(TN).
	*3A or 3B is judged.

=head1 TERMINATION

	If NUT has cache function, clear the cache.

=head1 REFERENCE

=begin html
<PRE>
	RFC2181 Clarifications to the DNS Specification
	5.2. TTLs of RRs in an RRSet
</PRE>

=end html

=cut
