#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/CL/CL_RFC3403_4_NAPTR_flag.seq,v 1.1.1.1 2006/06/02 05:15:42 akisada Exp $
# $Id: CL_RFC3403_4_NAPTR_flag.seq,v 1.1.1.1 2006/06/02 05:15:42 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# Query configuration          #
#------------------------------#
my $QueryConfig_1={ 
#mode
	'ModeRemoteAsync' => 'yes',
	'ModeRequiredTestMode' => 'client',
	'ModeManualNoPause' => 'yes',
#query
	'QueryAppType' => $APP_TYPE,		   
	'Query0Mode' => 'dns',
	'Query0Addr0' => $TN_NET1_NODE2_ADDR,
	'Query0Protocol' => 'UDP',
	'Query0Tries' => $RETRANSMIT_COUNT_CLIENT,
	'Query0AUS' => 'http://www.example.com/dns/test.pdf',   
	'Query0KEY' => 'http',
	'Query0Type' => 'NAPTR',
	'Query0Class' => 'IN',
	'Query0Value' => 'http.uri.arpa',   
};

################################
# configuration                #
################################
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT
};

$dns_session_config[1] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT
};

my @dns_session   = ();
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();
my @exp_dns_msg_1 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
			      {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                }
        ]
};

$dns_session[1] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
			      {
                        'gen_dns_msg' => undef,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1,
                }
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#--------------------------
# 2nd ( TN(NS1)->NUT )
#--------------------------
$gen_dns_msg_0[0]->{'header'} = {
        'id'      => undef,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 1,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 1,
        'nscount' => 1,
        'arcount' => 2,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {
        # 2nd packet question
        'qname'  => Gen_DNS_Name('http.uri.arpa.'),
        'qtype'  => 0x0023, #NAPTR
        'qclass' => 0x0001,
};

$gen_dns_msg_0[0]->{'answer'}->[0] = {
        # 2nd packet answer
        'name'     => Gen_DNS_Name( '', 0xC00C ),
        'type'     => 0x0023, #NAPTR
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 29,
        'rdata'    => Gen_DNS_RDATA_NAPTR(
					  100,               #ORDER
					  90,                #PREFERENCE
					  '',               #FLAG
					  '',         #SERVICES
					  '!^http://([^/:]+)!1!i', #REGEXP
					  Gen_DNS_Name(''),        #REPLACEMENT
					 ),
};

$gen_dns_msg_0[0]->{'authority'}->[0] = {

        # 2nd packet
        'name'     => Gen_DNS_Name( '',    0xC011 ),
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 17,
        'rdata'    => Gen_DNS_Name('NS1.example.com'),
};

$gen_dns_msg_0[0]->{'additional'}->[0] = {

        # 2nd packet
        'name'     => Gen_DNS_Name( '', 0xC054 ),
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => Gen_DNS_RDATA_A('192.168.1.20'),
};

$gen_dns_msg_0[0]->{'additional'}->[1] = {

        # 2nd packet
        'name'     => Gen_DNS_Name( '', 0xC054 ),
        'type'     => 0x001c, #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => Gen_DNS_RDATA_AAAA('3ffe:501:ffff:101::20'),
};

################################
# expected packet definition   #
################################
#-----------------------
# 1st ( NUT->TN(NS1) )
#-----------------------
$exp_dns_msg_0[0]->{'header'} = {

        # 1st packet header
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'http.uri.arpa.',
        'qtype'  => 0x0023, #NAPTR
        'qclass' => 0x0001,
};

#-----------------------
# 3rd ( NUT->TN(NS1) )
#-----------------------
$exp_dns_msg_1[0]->{'header'} = {

        # 1st packet header
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_1[0]->{'question'}->[0] = {
        'qname'  => 'www.example.com.',
        'qtype'  => 0x0023, #NAPTR
        'qclass' => 0x0001,
};

################################
# start tests                  #
################################
Print_Message(
        "=",
        [
                "Setup\n",
		"\tConfigure your resolve.conf as follows:\n",
		"\t\t192.168.1.20 (IPv4) or 3ffe:501:ffff:101::20 (IPv6)\n\n",
                "\tDNS client (NUT) needs a HTTP program as DDDS application.\n\n",
		"\tApplication Unique String (AUS): http://www.example.com/dns/test.pdf\n",
		"\tKey: http\n",
		"\tUsed domain-name to retrieve Rewrite Rules as NAPTR records: http.uri.arpa.\n",
        ]
);

my $ret = DNSStartConnect( $dns_param, \@dns_session );

unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# Send Query from Nut          #
#------------------------------#
my $remoteRet = DNSRemote("runquery.rmt",$QueryConfig_1);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

Print_Message(
        "=",
        [
                "Invoke some application on NUT\n",
                "\tEx\n",
                "\tRequest URL http://www.example.com/dns/test.pdf by HTTP client\n",
        ]
);

#------------------------------#
# 1st test (receive)           #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}

Print_Message( "=", ["Receive 1st message\n"] );

#------------------------------#
# Judgment (1st test)          #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (1st packet)\n",
                "1. check Standard query format for NAPTR type.\n",
        ]
);

my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["1st packet PASS\n"] );

#------------------------------#
# 2nd packet (send)            #
#------------------------------#
#-------------------------------
# Copy Header RD and ID from NUT query
#-------------------------------
$gen_dns_msg_0[0]->{'header'}->{'id'} = $recv_data->{'header'}->{'id'};
$gen_dns_msg_0[0]->{'header'}->{'rd'} = $recv_data->{'header'}->{'rd'};

$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}

###XYZ temporaly
# Print_Message(
#         "=",
#         [
#                 "Send 3rd message\n",
#                 "dig  -t NAPTR www.example.com\n",
#         ]
# );

#------------------------------#
# 3rd packet (receive)         #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 30,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}

#Print_Message( "=", ["Receive 3rd message\n"] );

#------------------------------#
# Judgment (3rd packet)        #
#------------------------------#
Print_Message(
        "#",
        [
		"Judgment (3rd packet)\n",
		"3. Received a query message in response to TN sent NAPTR resource record.\n"
        ]
);

$recv_data = $dns_session[1]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_1[0] );

unless ( defined($ret) ) {
         DNSExit($FAIL);
}

Print_Message( "=", ["3rd packet PASS\n"] );
Print_Message( "=", ["Flag \"\" test is PASS\n"] );

#NOTREACHED

DNSExit($OK);
__END__
#####################################################################################

=head1 NAME

	CL_RFC3403_4_NAPTR_flag - Flag "" to control rewriting and interpretation

=head1 VERIFICATION POINTS

	Verify a NUT process when NUT received message that includes multiple 
	Naming Authority Pointer (NAPTR) Resource Records (RR) containing 
	different flags.

=begin html
	<UL>
        <DD><LI>FLAGS
	<UL>
	<DD>   A <character-string> containing flags to control aspects of the
        <DD>   rewriting and interpretation of the fields in the record.  Flags
        <DD>   are single characters from the set A-Z and 0-9.  The case of the
        <DD>   alphabetic characters is not significant.  The field can be empty.
	<BR>
	<BR>
        <DD>   It is up to the Application specifying how it is using this
        <DD>   Database to define the Flags in this field.  It must define which
        <DD>   ones are terminal and which ones are not.
	</UL>
	</LI>
	<BR>
	<DD><LI>If this flag is not present then this rule is non-terminal.  If a
        <DD>Rule is non-terminal then clients MUST use the Key produced by this
        <DD>Rewrite Rule as the new Key in the DDDS loop (i.e., causing the
        <DD>client to query for new NAPTR records at the domain-name that is the
        <DD>result of this Rule).
	</LI>
	</UL>

=end html

=head1 TARGET

	Client (ADVANCED)

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./CL_RFC3403_4_NAPTR_flag.seq">CL_RFC3403_4_NAPTR_flag.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<ul>
	<li><STRONG>Network Topology</STRONG></li> 
	<PRE>
        AP Server1(TN):A.example.com     DNS Server1(TN)
          |3ffe:501:ffff:101::10           |3ffe:501:ffff:101::20
          |192.168.1.10                    |192.168.1.20
          |                                |
Net-y   --+--------+-----------------------+-------- 3ffe:501:ffff:101::/64 
                   |                                 192.168.1/24
                   |
                   |
                 ROUTER1(TN)
                   |3ffe:501:ffff:100::1
                   |192.168.0.1
                   |
Net-z   --+--------+-------------------------------- 3ffe:501:ffff:100::/64 
          |                                          192.168.0/24
        DNS Client1(NUT)
           3ffe:501:ffff:100:XXXX
           192.168.0.10
	<BR>
	XXXX: EUI64 address
	</PRE>
	<p></p>
	<li><STRONG>Setup</STRONG></li>
	<PRE>
	Set the DNS Server1 (TN)'s address on DNS Client1 (NUT) as above mentioned Network Topology.
	DNS client (NUT) needs a HTTP program as DDDS application.
        <BR>
	Application Unique String (AUS): http://www.example.com/dns/test.pdf
	Key: http
	Used domain-name to retrieve Rewrite Rules as NAPTR records: http.uri.arpa.
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

    DNS Client1 (NUT)                               DNS Server1 (TN)
        |                                               |
        | Invoke some application                       |
        |    on NUT (Ex. HTTP)                          |
        |                                               |
        |---------------------------------------------->|
        | 1. Send standard query                        |
        |    QNAME="http.uri.arpa."                     |
        |    QTYPE=NAPTR                                |  
        |                                               |
        |<----------------------------------------------|
        | 2. Send standard query response               |
        |                                               |
        |---------------------------------------------->|
        | 3. Send standard query                        |
        |    QNAME="www.example.com"                    |
        |    QTYPE=NAPTR                                |  
        |                                               |
        v                                               v

	1. DNS Client (NUT) sends a standard query with QNAME = "http.uri.arpa." type = NAPTR 
	2. DNS Server1 (NUT) transmits a response to DNS Client1 (NUT) with: 

           $ORIGIN http.uri.arpa. 
           ;;       order pref flags service  regexp                       replacement
	   IN NAPTR 100   90   ""    ""       "!^http://([^/:]+)!1!i"      .

	3. DNS Client (NUT) sends a standard query with QNAME = "www.example.com." type = NAPTR. Judgment (Check *3)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (NUT) to Server1 (TN) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV1_NETY</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>http.uri.arpa.</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>NAPTR (0x0023)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (TN) to Client1 (NUT)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>SV1_NETY</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>Value that NUT uses</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>Value that NUT uses</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>http.uri.arpa.</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>NAPTR (0x0023)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="11">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>http.uri.arpa. (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NAPTR (0x0023)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>86400sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>29</TD>
		</TR>
		<TR>
			<TD>ORDER</TD>
			<TD>100</TD>
		</TR>
		<TR>
			<TD>PREFERENCE</TD>
			<TD>90</TD>
		</TR>
		<TR>
			<TD>FLAGS</TD>
			<TD><B>(not present)</B></TD>
		</TR>
		<TR>
			<TD>SERVICES</TD>
			<TD><B>(not present)</B></TD>
		</TR>
		<TR>
			<TD>REGEXP</TD>
			<TD>!^http://([^/:]+)!1!i</TD>
		</TR>
		<TR>
			<TD>REPLACEMENT</TD>
			<TD>.</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>uri.arpa. (Pointer 0xC011)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>86400sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>17</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS1.example.com</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS1.example.com (Pointer 0xC054)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>86400sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.20</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS1.example.com (Pointer 0xC054)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>86400sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:101::20</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>3rd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (NUT) to Server1 (TN) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV1_NETY</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>www.example.com.</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>NAPTR (0x0023)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Client1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>SV1_NETY</TD>
			<TD>DNS Server1's (TN) Net-y address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	3. Received a query message in response to TN sent NAPTR resource record.  

=head1 TERMINATION

	If NUT has cache function, clear the cache.

=head1 REFERENCE

=begin html
<PRE>
	RFC3403 Dynamic Delegation Discovery System (DDDS)
                Part Three: The Domain Name System (DNS) Database
	        4. NAPTR RR Format 
	RFC3404 Dynamic Delegation Discovery System (DDDS)
	        Part Four: The Uniform Resource Identifiers (URI)
	                      Resolution Application
	        5.3 Resolving an HTTP URI Scheme
</PRE>

=end html

=cut
