#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/SV/SV_RFC1034_4_3_2_23B46_2.seq,v 1.1.1.1 2006/06/02 05:15:43 akisada Exp $
# $Id: SV_RFC1034_4_3_2_23B46_2.seq,v 1.1.1.1 2006/06/02 05:15:43 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# NUT configuration            #
#------------------------------#
my $NutConfig={ 
##mode
	                     'ModeRequiredTestMode' => 'recursive',
	                     'ModeSetNamedConf' => 'yes',
	                     'ModeSetZoneFiles' => 'yes',
	                     'ConfOptRecursion' => 'yes',
	                     'ConfZone0Name' => 'example.com',
	                     'ConfZone0Type' => 'master',
	                     'ConfZone0AllowQuery' => 'any',
	                     'ConfZone0AllowTransfer' => 'any',
##zone
#SOA
	                     'ZoneZone0Name' => 'example.com',
	                     'ZoneZone0Ttl' => 86400,
	                     'ZoneZone0Type' => 'master',
	                     'ZoneZone0Rec0Name' => 'example.com.',
	                     'ZoneZone0Rec0Type' => 'SOA',
	                     'ZoneZone0Rec0Class' => 'IN',
	                     'ZoneZone0Rec0Ttl' => 86400,
	                     'ZoneZone0Rec0Mname' => 'NS1.example.com.',
	                     'ZoneZone0Rec0Rname' => 'root.example.com.',
	                     'ZoneZone0Rec0Serial' => 2005081600,
	                     'ZoneZone0Rec0Refresh' => 3600,
	                     'ZoneZone0Rec0Retry' => 900,
	                     'ZoneZone0Rec0Expire' => 604800,
	                     'ZoneZone0Rec0Minimum' => 3600,
#@  NS
	                     'ZoneZone0Rec1Name' => 'example.com.',
	                     'ZoneZone0Rec1Type' => 'NS',
	                     'ZoneZone0Rec1Class' => 'IN',
	                     'ZoneZone0Rec1Ttl' => 86400,
	                     'ZoneZone0Rec1Value' => 'NS1.example.com.',
#NS1 A
	                     'ZoneZone0Rec2Name' => 'NS1',
	                     'ZoneZone0Rec2Type' => 'A',
	                     'ZoneZone0Rec2Class' => 'IN',
	                     'ZoneZone0Rec2Ttl' => 86400,
	                     'ZoneZone0Rec2Value' => '192.168.0.10',
#sub NS
	                     'ZoneZone0Rec3Name' => 'sub',
	                     'ZoneZone0Rec3Type' => 'NS',
	                     'ZoneZone0Rec3Class' => 'IN',
	                     'ZoneZone0Rec3Ttl' => 86400,
	                     'ZoneZone0Rec3Value' => 'NS6.sub.example.com.',
#NS6.sub A
	                     'ZoneZone0Rec4Name' => 'NS6.sub',
	                     'ZoneZone0Rec4Type' => 'A',
	                     'ZoneZone0Rec4Class' => 'IN',
	                     'ZoneZone0Rec4Ttl' => 86400,
	                     'ZoneZone0Rec4Value' => '192.168.0.30',
#NS6.sub AAAA
	                     'ZoneZone0Rec5Name' => 'NS6.sub',
	                     'ZoneZone0Rec5Type' => 'AAAA',
	                     'ZoneZone0Rec5Class' => 'IN',
	                     'ZoneZone0Rec5Ttl' => 86400,
	                     'ZoneZone0Rec5Value' => '3ffe:501:ffff:100::30',
	                    };

my $remoteRet = DNSRemote("setconfig.rmt",$NutConfig);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_CL_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

#--------------------
# DNS Server1
#--------------------
my @dns_session   = ();
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                },
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 1st message()
#------------------
#------------------
# Client1(TN) -> NUT
#------------------
$gen_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 0,        #RD=0
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => Gen_DNS_Name('A.sub.example.com'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 2nd message
#------------------
$exp_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => 1,
        'z'       => undef,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 1,
        'arcount' => 2,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'A.sub.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

$exp_dns_msg_0[0]->{'authority'}->[0] = {
        'name'     => 'sub.example.com.',
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 6,
        'rdata'    => 'NS6.sub.example.com.'
};

$exp_dns_msg_0[0]->{'additional'}->[0] = {
        'name'     => 'NS6.sub.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.0.30',
};

$exp_dns_msg_0[0]->{'additional'}->[1] = {
        'name'     => 'NS6.sub.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:100::30',
};

################################
# start tests                  #
################################

my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# 1st packet (send)            #
#------------------------------#
$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 1st message\n"] );

#------------------------------#
# 2nd packet (receive@NS2)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 2nd message\n"] );

#------------------------------#
# Judgment (2nd packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (2nd packet)\n",
"2. Received standard query response which include the NSs RRs in authority section and glue RRs in additional Section.\n",
        ]
);

my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["2nd packet PASS\n"] );

DNSExit($OK);
__END__

######################################################################

=head1 NAME

	SV_RFC1034_4_3_2_23B46_2 - And QNAME is not found in the cache.

=head1 VERIFICATION POINTS

	Verify that whether NUT's following behavior. 

	Recursion service is avairable but not requested via the RD bit in the query.
	Search the available zones for the zone which is the nearest ancestor to QNAME.
	Such a zone is found. A match take QNAME out of the authoritative data, QNAME 
	has a referral. Copy the NS RRs for the subzone into the authority section of
	the reply. Starting matching down in the cache. And QNAME is not found in the cache.

=head1 TARGET

	Server

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./SV_RFC1034_4_3_2_23B46_2.seq">SV_RFC1034_4_3_2_23B46_2.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<DD><LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
Net-y   -----------+-------------------------------------------------------------------- 3ffe:501:ffff:101::/64
                   |                                                                     192.168.1/24
                   |
                   |
                   |                         sub.example.com zone
                 Router (TN)             DNS Server6 (TN)
                   |3ffe:501:ffff:100::1     |NS6.sub.example.com
                   |192.168.0.1              |3ffe:501:ffff:100::30
                   |                         |192.168.0.30
                   |                         |
Net-z   --+--------+-----------------+-------+--- 3ffe:501:ffff:100::/64
          |                          |          192.168.0/24
          |                          |
        DNS Server1 (NUT)          DNS Client1 (TN)
           3ffe:501:ffff:100::XXXX    3ffe:501:ffff:100::20 
           192.168.0.10               192.168.0.20
	<BR>
	XXXX: EUI64
	</PRE>
	<DD><LI><STRONG>Setup</STRONG></LI><BR>
	<BR>
	<DD>Set the DNS Server1's (NUT) address as above mentioned Network Topology.<BR>
	<DD>Configure the Server1's (NUT) zone file to response query from TN.<BR>
	<BR>
	<DD>Enable <B>recursive</B> mode.<BR>
	<BR>
	<DD>Example of root server list:</BR>
	<BR>
	<DD>&nbsp;&nbsp;For IPv4:
	<PRE>
.                       3600000         IN      NS      A.ROOT.NET.
A.ROOT.NET.             3600000                 A       192.168.1.20
	</PRE>
	<DD>&nbsp;&nbsp;For IPv6:
	<PRE>
.                       3600000         IN      NS      A.ROOT.NET.
A.ROOT.NET.             3600000                 AAAA    3ffe:501:ffff:101::20
	</PRE>
	<DD>Example of example.com zone file:<BR>
	<PRE>
$TTL    86400           ; TTL of 1 day
@ IN SOA NS1.example.com. root.example.com. (
	2005081600	; serial
	3600		; refresh every 1 hr
	900		; retry every 15 min
	604800		; expire after a week
	3600		; Minimum TTL of a 1 hr
)
;
	IN	NS	NS1.example.com.
NS1	IN	A	192.168.0.10
;
sub	IN	NS	NS6.sub.example.com.
NS6.sub	IN	A	192.168.0.30
	IN	AAAA	3ffe:501:ffff:100::30
;
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.


    DNS Client1 (TN)             DNS Server1 (NUT)
        |                              |
        |----------------------------->|
        | 1. Send standard query       |
        |  RD = 0                      |
        |  QNAME = A.sub.example.com   |
        |  QTYPE = A                   |
        |                              |
        |<-----------------------------|
        | 2. Standard query response   |
        |  AA = 0                      |
        |  RD = 0                      |
        |  RA = 1                      |
        |  QNAME = A.sub.example.com   |
        |  QTYPE = A                   |
        |  AUTHORITY Name              |
        |        = sub.example.com     |
        |  AUTHORITY Type              |
        |        = NS (0x0002)         |
        |  AUTHORITY Name Server       |
        |        = NS6.sub.example.com |
        |  ADDITIONAL Name             |
        |        = NS6.sub.example.com |
        |  ADDITIONAL Type             |
        |        = A (0x0001)          |
        |  ADDITIONAL Address          |
        |        = 192.168.0.30        |
        |  ADDITIONAL Name             |
        |        = NS6.sub.example.com |
        |  ADDITIONAL Type             |
        |        = AAAA (0x001C)       |
        |  ADDITIONAL Address          |
        |      = 3ffe:501:ffff:101::30 |
        |                              |
        v                              v

        This test sequence is following.

	1. DNS Client1 (TN) send standard query QNAME=A.sub.example.com, QTYPE=A to NUT.
        2. DNS Server1 (NUT) transmits error response which include NS RRs in authority section and 
	   all glue record of NS RRs in additional section. (Judgment *2)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (TN) to Server1 (NUT) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>1000</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>A.sub.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (NUT) to Client1 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>1000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD><B><I>AA</I></B></TD>
			<TD><B>0</B></TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD><B><I>RD</I></B></TD>
			<TD><B>0</B></TD>
		</TR>
		<TR>
			<TD><B><I>RA</I></B></TD>
			<TD><B>1</B></TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>A.sub.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6"><B><I>DNS Authority section</I></B></TD>
			<TD>NAME</TD>
			<TD>sub.example.com (Pointer 0xC00D)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>6</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS6.sub.example.com (NS6 + Pointer 0xC00D)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6"><B><I>DNS Additional section</I></B></TD>
			<TD>NAME</TD>
			<TD>NS6.sub.example.com (Pointer 0xC02F)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.30</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6"><B><I>DNS Additional section</I></B></TD>
			<TD>NAME</TD>
			<TD>NS6.sub.example.com (Pointer 0xC02F)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:100::30</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Server1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>CL1_NETZ</TD>
			<TD>DNS Client1's (TN) Net-z address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	2. Received standard query response which include the NSs RRs in authority section and
	   glue RRs in additional Section.


=head1 TERMINATION

	None

=head1 REFERENCE

	RFC1034 DOMAIN NAMES - CONCEPTS AND FACILITIES
	4. NAME SERVERS
	4.3.2. Algorithm

=cut
