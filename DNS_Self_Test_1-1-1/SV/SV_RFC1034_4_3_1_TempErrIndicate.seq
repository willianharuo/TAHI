#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/SV/SV_RFC1034_4_3_1_TempErrIndicate.seq,v 1.2 2007/08/30 04:42:12 akisada Exp $
# $Id: SV_RFC1034_4_3_1_TempErrIndicate.seq,v 1.2 2007/08/30 04:42:12 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# NUT configuration            #
#------------------------------#
my $NutConfig={ 
##mode
               'ModeRequiredTestMode' => 'recursive',
               'ModeSetNamedConf' => 'yes',
               'ModeSetZoneFiles' => 'yes',
               'ConfOptRecursion' => 'yes',
               'ConfZone0Name' => 'example.com',
               'ConfZone0Type' => 'master',
               'ConfZone0AllowQuery' => 'any',
               'ConfZone0AllowTransfer' => 'any',
##zone
#SOA
               'ZoneZone0Name' => 'example.com',
               'ZoneZone0Ttl' => 86400,
               'ZoneZone0Type' => 'master',
               'ZoneZone0Rec0Name' => 'example.com.',
               'ZoneZone0Rec0Type' => 'SOA',
               'ZoneZone0Rec0Class' => 'IN',
               'ZoneZone0Rec0Ttl' => 86400,
               'ZoneZone0Rec0Mname' => 'NS1.example.com.',
               'ZoneZone0Rec0Rname' => 'root.example.com.',
               'ZoneZone0Rec0Serial' => 2005081600,
               'ZoneZone0Rec0Refresh' => 3600,
               'ZoneZone0Rec0Retry' => 900,
               'ZoneZone0Rec0Expire' => 604800,
               'ZoneZone0Rec0Minimum' => 3600,
#@ NS
               'ZoneZone0Rec1Name' => 'example.com.',
               'ZoneZone0Rec1Type' => 'NS',
               'ZoneZone0Rec1Class' => 'IN',
               'ZoneZone0Rec1Ttl' => 86400,
               'ZoneZone0Rec1Value' => 'NS1.example.com.',
#NS1 A
               'ZoneZone0Rec2Name' => 'NS1',
               'ZoneZone0Rec2Type' => 'A',
               'ZoneZone0Rec2Class' => 'IN',
               'ZoneZone0Rec2Ttl' => 86400,
               'ZoneZone0Rec2Value' => '192.168.0.10',
              };

my $remoteRet = DNSRemote("setconfig.rmt",$NutConfig);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_CL_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

$dns_session_config[1] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET1_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_CL_PORT,
};

#--------------------
# DNS Server1
#--------------------
my @dns_session   = ();
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();
my @gen_dns_msg_1 = ();
my @exp_dns_msg_1 = ();
my @gen_dns_msg_2 = ();
my @exp_dns_msg_2 = ();
my @gen_dns_msg_3 = ();
my @exp_dns_msg_3 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                }
        ]
};
$dns_session[1] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_1,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1
                }
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 1st message()
#------------------
#------------------
# Client1(TN) -> NUT
#------------------
$gen_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => Gen_DNS_Name('B.example.org'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 2nd message
#------------------
$exp_dns_msg_1[0]->{'header'} = {
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => undef,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_1[0]->{'question'}->[0] = {
        'qname'  => 'B.example.org.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#------------------
# 4th message
#------------------
$exp_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => 1,
        'z'       => undef,
        'rcode'   => 2,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'B.example.org.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

################################
# start tests                  #
################################

my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# 1st packet (send)            #
#------------------------------#
$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 1st message\n"] );

#------------------------------#
# 2nd packet (receive@NS2)     #
#------------------------------#
$ret = undef;

my $i         = 0;
my $recv_data = undef;
while (1) {
        $ret = DNSRecv(
                1, 10,
                $dns_session[1]->{'socket_ref'},
                $dns_session[1]->{'dns_one_session'}->[0]
        );
        my $num = $1 + 1;
        if ( defined($ret) ) {
                #Print_Message( "=", ["Receive 2nd message\n"] );

                #------------------------------#
                # Judgment (2nd packet)        #
                #------------------------------#
                Print_Message(
                        "#",
                        [
                                "Judgment (2nd($num) packet)\n",
                                "2. Received a standard query to recursive.\n",
                        ]
                );

                $recv_data =
                  $dns_session[1]->{'dns_one_session'}->[0]->{'dec_dns_msg'}
                  ->[$i];

                $ret = undef;
                $ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_1[0] );

                unless ( defined($ret) ) {
                        DNSExit($FAIL);
                }

                Print_Message( "=", ["2nd($num) packet PASS\n"] );
                Print_Message( "=", ["Don't Send 3rd message\n"] );

                $i++;
        } else {
                Debug_Print("ERROR: Can't receive DNS message\n");
                last;
        }
}

#------------------------------#
# 4th packet (receive@Client)  #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 4th message\n"] );

#------------------------------#
# Judgment (4th packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (4th packet)\n",
                "4. Received a error response from which RCODE is 2.\n",
        ]
);

$recv_data = undef;
$recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}
Print_Message( "=", ["4th packet PASS\n"] );

DNSExit($OK);
__END__

######################################################################

=head1 NAME

	SV_RFC1034_4_3_1_TempErrIndicate - A name error indicating

=head1 VERIFICATION POINTS

	Verify that a NUT answers a temporary error indicating that the name server got
	a temporary error response.

=head1 TARGET

	Server

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./SV_RFC1034_4_3_1_TempErrIndicate.seq">SV_RFC1034_4_3_1_TempErrIndicate.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<DD><LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
                                 . domain
        AP Server1 (TN)          DNS Server2
          |A.example.org           |A.ROOT.NET
          |3ffe:501:ffff:101::10   |3ffe:501:ffff:101::20 
          |192.168.1.10            |192.168.1.20
          |                        |
Net-y   --+--------+---------------+---------------------------------------------------- 3ffe:501:ffff:101::/64
                   |                                                                     192.168.1/24
                   |
                   |
                 Router (TN)
                   |3ffe:501:ffff:100::1
                   |192.168.0.1
                   |
                   |
Net-z   --+--------+-----------------+-------- 3ffe:501:ffff:100::/64
          |                          |          192.168.0/24
          |                          |
        DNS Server1 (NUT)          DNS Client1 (TN)
           3ffe:501:ffff:100::XXXX    3ffe:501:ffff:100::20 
           192.168.0.10               192.168.0.20
	<BR>
	XXXX: EUI64
	</PRE>
	<DD><LI><STRONG>Setup</STRONG></LI><BR>
	<BR>
	<DD>Set the DNS Server1's (NUT) address as above mentioned Network Topology.<BR>
	<DD>Configure the Server1's (NUT) zone file to response query from TN.<BR>
	<BR>
	<DD>Enable recursive mode.<BR>
	<BR>
	<DD>Example of root server list:</BR>
	<BR>
	<DD>&nbsp;&nbsp;For IPv4:
	<PRE>
.                       3600000         IN      NS      A.ROOT.NET.
A.ROOT.NET.             3600000                 A       192.168.1.20
	</PRE>
	<DD>&nbsp;&nbsp;For IPv6:
	<PRE>
.                       3600000         IN      NS      A.ROOT.NET.
A.ROOT.NET.             3600000                 AAAA    3ffe:501:ffff:101::20
	</PRE>
	<DD>Example of example.com zone file:<BR>
	<PRE>
$TTL    86400           ; TTL of 1 day
@ IN SOA NS1.example.com. root.example.com. (
	2005081600	; serial
	3600		; refresh every 1 hr
	900		; retry every 15 min
	604800		; expire after a week
	3600		; Minimum TTL of a 1 hr
)
;
	IN	NS	NS1.example.com.
NS1	IN	A	192.168.0.10
;
A	IN	A	192.168.1.10
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

                                                                   <--- TN --->


    DNS Client1 (TN)             DNS Server1 (NUT)                  DNS Server2
        |                              |                                 |
        |----------------------------->|                                 |
        | 1. Send standard query       |                                 |
        |  RD = 1                      |                                 |
        |  QNAME = B.example.org       |                                 |
        |  QTYPE = A                   |                                 |
        |                              |                                 |
        |                              |-------------------------------->|
        |                              | 2. Recv standard query          |
        |                              |  QNAME = B.example.org          |
        |                              |  QTYPE = A                      |
        |                              |                                 |
        |                              |               X<----------------|
        |                              | 3. No standard query response   |
        |                              |                                 |
        |                              |              :                  |
        |                              |         Repeat 2 & 3            |
        |                              |              :                  |
        |                              |                                 |
        |<-----------------------------|
        | 4. Standard query response   |
        |  RD = 1                      |
        |  RA = 1                      |
        |  RCODE = Server Failure (2)  |
        |  QNAME = B.example.org       |
        |  QTYPE = A                   |
        |                              |
        v                              v

        This test sequence is following.

	1. DNS Client1 (TN) send standard query QNAME=B.example.com, QTYPE=A to NUT.
        2. DNS Server1 (NUT) transmits standard query to DNS Server1 (TN). (Judgment *2)
	3. DNS Server2 (TN) doesn't send standard query response.
        4. DNS Server1 (NUT) transmits error response RCODE=2 (Server Failure) to DNS Client1 (TN). It may 
	   include ANSWER Type=CNAME. (Judgment *8)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (TN) to Server1 (NUT) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>1000</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>A.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Server1 (NUT) to Server2 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV2_NETY</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>B.example.org</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>8th packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (NUT) to Client1 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>1000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD><B><I>RA</I></B></TD>
			<TD><B>1</B></TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD><B><I>RCODE</I></B></TD>
			<TD><B>2</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>B.example.org</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Server1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>CL1_NETZ</TD>
			<TD>DNS Client1's (TN) Net-z address</TD>
		</TR>
		<TR>
			<TD>SV2_NETY</TD>
			<TD>DNS Server2's (TN) Net-y address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	2. Received a standard query to recursive. 
	4. Received a error response from which RCODE is 2.

=head1 TERMINATION

	None

=head1 REFERENCE

	RFC1034 DOMAIN NAMES - CONCEPTS AND FACILITIES
	4. NAME SERVERS
	4.3.1. Queries and responses

=cut
