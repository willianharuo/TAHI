#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/SV/SV_RFC1996_3_9_master_NOTIFY_continue_service.seq,v 1.2 2007/07/11 08:07:21 akisada Exp $
# $Id: SV_RFC1996_3_9_master_NOTIFY_continue_service.seq,v 1.2 2007/07/11 08:07:21 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# NUT configuration            #
#------------------------------#
my $NutConfigA={ 
##mode
	'ModeRequiredTestMode' => 'nonrecursive',
	'ModeSetNamedConf' => 'yes',
        'ModeSetZoneFiles' => 'yes',
##named.conf
        'ConfOptNotify' => 'yes',
	'ConfOptProvideIxfr' => 'yes',
	'ConfZone0Name' => 'sec.example.com',
	'ConfZone0Type' => 'master',
	'ConfZone0AllowTransfer' => "$TN_NET0_NODE3_ADDR",
	'ConfZone0AlsoNotify' => "$TN_NET0_NODE3_ADDR",
        'ConfZone0AllowUpdate' => "localhost",
##zone
#SOA
	'ZoneZone0Name' => 'sec.example.com',
	'ZoneZone0Ttl' => 86400,
        'ZoneZone0Type' => 'master',
	'ZoneZone0Rec0Name' => 'sec.example.com.',
	'ZoneZone0Rec0Type' => 'SOA',
	'ZoneZone0Rec0Class' => 'IN',
	'ZoneZone0Rec0Ttl' => 86400,
	'ZoneZone0Rec0Mname' => 'NS1.sec.example.com.',
	'ZoneZone0Rec0Rname' => 'root.sec.example.com.',
	'ZoneZone0Rec0Serial' => 2,
	'ZoneZone0Rec0Refresh' => 3600,
	'ZoneZone0Rec0Retry' => 900,
	'ZoneZone0Rec0Expire' => 604800,
	'ZoneZone0Rec0Minimum' => 3600,
#@ NS
	'ZoneZone0Rec1Name' => 'sec.example.com.',
	'ZoneZone0Rec1Type' => 'NS',
	'ZoneZone0Rec1Class' => 'IN',
	'ZoneZone0Rec1Ttl' => 86400,
	'ZoneZone0Rec1Value' => 'NS1.sec.example.com.',
#@ NS
	'ZoneZone0Rec2Name' => 'sec.example.com.',
	'ZoneZone0Rec2Type' => 'NS',
	'ZoneZone0Rec2Class' => 'IN',
	'ZoneZone0Rec2Ttl' => 86400,
	'ZoneZone0Rec2Value' => 'NS2.sec.example.com.',
#NS1 A
	'ZoneZone0Rec3Name' => 'NS1',
	'ZoneZone0Rec3Type' => 'A',
	'ZoneZone0Rec3Class' => 'IN',
	'ZoneZone0Rec3Ttl' => 86400,
	'ZoneZone0Rec3Value' => '192.168.0.10',
#NS1 AAAA
	'ZoneZone0Rec4Name' => 'NS1',
	'ZoneZone0Rec4Type' => 'AAAA',
	'ZoneZone0Rec4Class' => 'IN',
	'ZoneZone0Rec4Ttl' => 86400,
	'ZoneZone0Rec4Value' => '3ffe:501:ffff:100::10',
#NS2 A
	'ZoneZone0Rec5Name' => 'NS2',
	'ZoneZone0Rec5Type' => 'A',
	'ZoneZone0Rec5Class' => 'IN',
	'ZoneZone0Rec5Ttl' => 86400,
	'ZoneZone0Rec5Value' => '192.168.0.30',
#NS2 AAAA
	'ZoneZone0Rec6Name' => 'NS2',
	'ZoneZone0Rec6Type' => 'AAAA',
	'ZoneZone0Rec6Class' => 'IN',
	'ZoneZone0Rec6Ttl' => 86400,
	'ZoneZone0Rec6Value' => '3ffe:501:ffff:100::30',
#CL1 A
	'ZoneZone0Rec7Name' => 'CL1',
	'ZoneZone0Rec7Type' => 'A',
	'ZoneZone0Rec7Class' => 'IN',
	'ZoneZone0Rec7Ttl' => 86400,
	'ZoneZone0Rec7Value' => '192.168.0.20',
};

my $remoteRetA = DNSRemote("setconfig.rmt",$NutConfigA);
unless (defined($remoteRetA)) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = {'dns_session_config' => \@dns_session_config};

$dns_session_config[0] = {  
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE3_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
#        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_PROTO'  => 'TCP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_CL_PORT,
};
$dns_session_config[1] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE3_ADDR,
        'TN_ADDR_PORT'   => $TN_CL_PORT,
        'TN_ADDR_PROTO'  => 'TCP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

#--------------------
# DNS Server1
#--------------------
my @dns_session   = ();
my @exp_dns_msg_0 = ();
my @gen_dns_msg_1 = ();
my @exp_dns_msg_1 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => undef,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                },
        ]
};
$dns_session[1] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_1,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1
                },
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 2nd message()
#------------------
$gen_dns_msg_1[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_1[0]->{'question'}->[0] = {
        'qname'  => Gen_DNS_Name('CL2.sec.example.com'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 1st message
#------------------
#1st packet header
$exp_dns_msg_0[0]->{'header'} = {
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 4,
        'aa'      => 1,
        'tc'      => 0,
        'rd'      => 0, 
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => undef,
        'nscount' => undef,
        'arcount' => undef,
};

#1st packet question
$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'sec.example.com.',
        'qtype'  => 0x0006,   #SOA 
        'qclass' => 0x0001,
};

#------------------
# 3rd message
#------------------
#3rd packet header
$exp_dns_msg_1[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 1,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 1,
        'nscount' => 2,
        'arcount' => 4,
};

#3rd packet question
$exp_dns_msg_1[0]->{'question'}->[0] = {
        'qname'  => 'CL2.sec.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

$exp_dns_msg_1[0]->{'answer'}->[0] = {
        'name'     => 'CL2.sec.example.com.', 
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'  => '192.168.0.21',
};

$exp_dns_msg_1[0]->{'authority'}->[0] = {
        'name'     => 'sec.example.com.',
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 6,
        'rdata'    => 'NS1.sec.example.com.'
};

$exp_dns_msg_1[0]->{'authority'}->[1] = {
        'name'     => 'sec.example.com.',
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 6,
        'rdata'    => 'NS2.sec.example.com.'
};

$exp_dns_msg_1[0]->{'additional'}->[0] = {
        'name'     => 'NS1.sec.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.0.10',
};

$exp_dns_msg_1[0]->{'additional'}->[1] = {
        'name'     => 'NS1.sec.example.com.',
        'type'     => 0x001C,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:100::10',
};

$exp_dns_msg_1[0]->{'additional'}->[2] = {
        'name'     => 'NS2.sec.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.0.30',
};

$exp_dns_msg_1[0]->{'additional'}->[3] = {
        'name'     => 'NS2.sec.example.com.',
        'type'     => 0x001C,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:100::30',
};

################################
# start tests                  #
################################

my $ret = DNSStartConnect($dns_param, \@dns_session);
unless (defined($ret)) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

my $NutConfigB={
#mode
		'ModeRemoteAsync' => 'yes',
		'ModeSetNsUpdate' => 'yes',
#nsupdate
		'NsupCommand0Command' => 'add',
		'NsupCommand0Name' => 'CL2.sec.example.com',
		'NsupCommand0Ttl' => '86400',
		'NsupCommand0Type' => 'A',
		'NsupCommand0Value' => '192.168.0.21',
};

my $remoteRetB = DNSRemote("setconfig.rmt",$NutConfigB);
unless (defined($remoteRetB)) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

Print_Message(
        "=",
        [
                "Run query command on NUT\n",
                "\tQNAME : sec.example.com\n",
                "\tQTYPE : SOA\n",
        ]
);

$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless (defined($ret)) {
        DNSExit($FAIL);
}

#------------------------------#
# Judgment (1st packet)        #
#------------------------------#
Print_Message(
        "#",
       [
                "Judgment (1st packet)\n",
                "1.DNS Server1 (NUT) sends a NOTIFY request to DNS Server2 (TN).\n", 
        ]
);
my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg($recv_data, $exp_dns_msg_0[0]);

unless (defined($ret)) {
        DNSExit($FAIL);
}

Print_Message( "=", ["1st packet PASS\n"] );

# RemoteAsyncWait();

#------------------------------#
# 2nd packet (send)            #
#------------------------------#
$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[0]
);

unless (defined($ret)) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}

#------------------------------#
# 3rd packet (receive@NS3)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[0]
);
 
unless (defined($ret)) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
Print_Message("=", ["Receive 3rd message\n"]);

#------------------------------#
# Judgment (3rd packet)       #
#------------------------------#
$recv_data = undef;
$recv_data = $dns_session[1]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg($recv_data, $exp_dns_msg_1[0]);

unless(defined($ret)){
        DNSExit($FAIL);
}

Print_Message("=", ["3rd packet PASS\n"]);

####################
# for BIND9
#  request-ixfr yes
#  notify yes
####################

DNSExit($OK);
__END__

######################################################################

=head1 NAME

	SV_RFC1996_3_9_master_NOTIFY_continue_service - a master continue to offer name service during the NOTIFY transaction.

=head1 VERIFICATION POINTS

	If TCP is used, both master and slave must continue to offer
	name service during the transaction, even when the TCP transaction is
	not making progress.  The NOTIFY request is sent once, and a
	"timeout" is said to have occurred if no NOTIFY response is received
	within a reasonable interval.

=begin html
	<UL>
	<DD>The interval between transmissions, and the total number of
	<DD>retransmissions, should be operational parameters specifiable by
	<DD>the name server administrator, perhaps on a per-zone basis.
	<DD>Reasonable defaults are a 60 second interval (or timeout if
	<DD>using TCP), and a maximum of 5 retransmissions (for UDP).  It is
	<DD>considered reasonable to use additive or exponential backoff for
	<DD>the retry interval.
	</UL>

=end html

=head1 TARGET

	Server (AXFR/IXFR server)

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./SV_RFC1996_3_9_master_NOTIFY_continue_service.seq">SV_RFC1996_3_9_master_NOTIFY_continue_service.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<DD><LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
Net-z   --+------------------------+--------------------------- 3ffe:501:ffff:100::/64
          |                        |                            192.168.0/24
          |                        |
	sec.example.com domain
        DNS Server1 (NUT)         DNS Server2 (TN)
           3ffe:501:ffff:100::10    3ffe:501:ffff:100::30
           192.168.0.10             192.168.0.30
	<BR>
	</PRE>
	<DD><LI><STRONG>Setup</STRONG></LI><BR>
	<BR>
	<DD>Set the DNS Server1's (NUT) address as above mentioned Network Topology.<BR>
	<DD>Configure the Server1's: (NUT) 
	<DD><DD><LI>zone file to response query from TN.<BR>
	<DD><DD><LI>configuration file as slave server about sec.example.com zone.<BR>
	<DD><DD><LI>Enable zone transfer function.<BR>
	<DD><DD><LI>Enable Notify mechanism function.<BR>
	<BR>
	<DD>Example of DNS server configuration on DNS Server1 (NUT):
	<PRE>
	<DD><DD><LI>For IPv4 transport
zone "sec.example.com" {
	type master;
	allow-transfer { 192.168.0.30; };
	also-notify    { 192.168.0.30; };
	file "master/sec.example.com";
};
	<DD><DD><LI>For IPv6 transport
zone "sec.example.com" {
	type master;
	allow-transfer { 3ffe:501:ffff:100::30; };
	also-notify    { 3ffe:501:ffff:100::30; };
	file "master/sec.example.com";
};
	</PRE>
	<DD>Transferred sec.example.com zone information:<BR>
	<PRE>
$TTL    86400	; TTL of 1 day
@ IN SOA NS1.sec.example.com. root.sec.example.com. (
	1	; serial
	180	; refresh every 3 min
	30	; retry every 30 sec
	360	; expire after 6 min
	30	; Minimum TTL of 30 sec
)
;
	IN	NS	NS1.sec.example.com.
	IN	NS	NS2.sec.example.com.
NS1	IN	A	192.168.0.10
	IN	AAAA	3ffe:501:ffff:100::10
NS2	IN	A	192.168.0.30
	IN	AAAA	3ffe:501:ffff:100::30
;
CL1	IN	A	192.168.0.20
	</PRE>
	</UL>

=end html

=head1 PRE-TEST SEQUENCE

=begin html
        <UL>
        <DD>Update sec.example.com zone like following on DNS Server1 (NUT)
        <PRE>
$TTL    86400           ; TTL of 1 day
@ IN SOA NS1.sec.example.com. root.sec.example.com. (
        2               ; serial
        3600            ; refresh every 1 hr
        900             ; retry every 15 min
        604800          ; expire after a week
        3600            ; Minimum TTL of a 1 hr
)
;
        IN      NS      NS1.sec.example.com.
        IN      NS      NS2.sec.example.com.
NS1     IN      A       192.168.0.10
NS1     IN      AAAA    3ffe:501:ffff:100::10
NS2     IN      A       192.168.0.30
NS2     IN      AAAA    3ffe:501:ffff:100::30
;
CL1     IN      A       192.168.0.20
CL2     IN      A       192.168.0.21
        </PRE>
        </UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

    DNS Server1 (NUT)            DNS Server2 (TN)
        |                              |
        |----------------------------->|
        | 1. NOTIFY requests           |
        |    (in TCP)                  |
        |                              |
        |  QR = 0                      |
        |  OPCODE = NOTIFY (4)         |
        |  QDCOUNT >  0                |
        |  ANCOUNT >= 0                |
        |  NSCOUNT >= 0                |
        |  ARCOUNT >= 0                |
        |  QNAME = sec.example.com     |
        |  QTYPE = SOA (0x0006)        |
        |                              |
        |<-----------------------------|
        | 2. Send standard query       |
        |                              |
        |  QNAME = CL2.sec.example.com |
        |  QTYPE = A                   |
        |                              |
        |----------------------------->|
        |                              |
        | 3. Standard query response   |
        |  QNAME = CL2.sec.example.com |
        |  QTYPE = A                   |
        |  ANSWER Name                 |
        |        = CL2.sec.example.com |
        |  ANSWER Type                 |
        |        = A (0x0001)          |
        |  ANSWER Address              |
        |        = 192.168.0.21        |
        |                              |
        v                              v

        This test sequence is following.

	1. DNS Server1 (NUT) sends a NOTIFY request to DNS Server2 (TN). (Judgment *1)
	2. DNS Server2 (TN) sends a standard request QNAME=CL2.sec.example.com QTYPE=A to DNS Server1 (TN).
	3. DNS Server1 (NUT) sends a standard reply CL2.sec.example.com A 192.168.0.21 to DNS Server2 (TN). (Judgment *3)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
<!-- =============================================================== -->
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>A NOTIFY request from DNS Server1 (NUT) to Server2 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV2_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">TCP Header</TD>
			<TD>Src Port</TD>
			<TD>any</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>any</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD><B>OPCODE</B></TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>&gt;=0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>&gt;=0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>&gt;=0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
<!-- =============================================================== -->
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>A standard request from DNS Server2 (TN) to Server1 (NUT)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>SV2_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">TCP Header</TD>
			<TD>Src Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD><B>OPCODE</B></TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>CL2.sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
<!-- =============================================================== -->
	<DD>3rd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>A standard response from DNS Server1 (NUT) to Server2 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV2_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">TCP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD><B>OPCODE</B></TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>4</TD>
		</TR>
<!-- /////////////////////////////////////////////////////////////// -->
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>CL2.sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
<!-- /////////////////////////////////////////////////////////////// -->
                <TR>
                        <TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
                        <TD>NAME</TD>
			<TD>CL2.sec.example.com (Pointer 0xC00C)</TD>
                </TR>
                <TR>
                        <TD>TYPE</TD>
                        <TD>A (0x0001)</TD>
                </TR>
                <TR>
                        <TD>CLASS</TD>
                        <TD>IN (0x0001)</TD>
                </TR>
                <TR>
                        <TD>TTL</TD>
                        <TD>1 day (86400)</TD>
                </TR>
                <TR>
                        <TD>RDLENGTH</TD>
                        <TD>4</TD>
                </TR>
                <TR>
                        <TD>ADDRESS</TD>
                        <TD>192.168.0.21</TD>
                </TR>
<!-- /////////////////////////////////////////////////////////////// -->
                <TR>
                        <TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
                        <TD>NAME</TD>
                        <TD>sec.example.com (Pointer 0xC010)</TD>
                </TR>
                <TR>
                        <TD>TYPE</TD>
                        <TD>NS (0x0002)</TD>
                </TR>
                <TR>
                        <TD>CLASS</TD>
                        <TD>IN (0x0001)</TD>
                </TR>
                <TR>
                        <TD>TTL</TD>
                        <TD>1 day (86400)</TD>
                </TR>
                <TR>
                        <TD>RDLENGTH</TD>
                        <TD>6</TD>
                </TR>
                <TR>
                        <TD>NSDNAME</TD>
                        <TD>NS1.sec.example.com. (NS1 + Pointer 0xC010)</TD>
                </TR>
<!-- /////////////////////////////////////////////////////////////// -->
                <TR>
                        <TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
                        <TD>NAME</TD>
                        <TD>sec.example.com</TD>
                </TR>
                <TR>
                        <TD>TYPE</TD>
                        <TD>NS (0x0002)</TD>
                </TR>
                <TR>
                        <TD>CLASS</TD>
                        <TD>IN (0x0001)</TD>
                </TR>
                <TR>
                        <TD>TTL</TD>
                        <TD>1 day (86400)</TD>
                </TR>
                <TR>
                        <TD>RDLENGTH</TD>
                        <TD>6</TD>
                </TR>
                <TR>
                        <TD>NSDNAME</TD>
                        <TD>NS2.sec.example.com. (NS2 + Pointer 0xC010)</TD>
                </TR>
<!-- /////////////////////////////////////////////////////////////// -->
                <TR>
                        <TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
                        <TD>NAME</TD>
                        <TD>NS1.sec.example.com (Pointer 0xC041)</TD>
                </TR>
                <TR>
                        <TD>TYPE</TD>
                        <TD>A (0x0001)</TD>
                </TR>
                <TR>
                        <TD>CLASS</TD>
                        <TD>IN (0x0001)</TD>
                </TR>
                <TR>
                        <TD>TTL</TD>
                        <TD>1 day (86400)</TD>
                </TR>
                <TR>
                        <TD>RDLENGTH</TD>
                        <TD>4</TD>
                </TR>
                <TR>
                        <TD>NSDNAME</TD>
                        <TD>192.168.0.10</TD>
                </TR>
<!-- /////////////////////////////////////////////////////////////// -->
                <TR>
                        <TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
                        <TD>NAME</TD>
                        <TD>NS1.sec.example.com (Pointer 0xC041)</TD>
                </TR>
                <TR>
                        <TD>TYPE</TD>
                        <TD>AAAA (0x001C)</TD>
                </TR>
                <TR>
                        <TD>CLASS</TD>
                        <TD>IN (0x0001)</TD>
                </TR>
                <TR>
                        <TD>TTL</TD>
                        <TD>1 day (86400)</TD>
                </TR>
                <TR>
                        <TD>RDLENGTH</TD>
                        <TD>16</TD>
                </TR>
                <TR>
                        <TD>NSDNAME</TD>
                        <TD>3ffe:501:ffff:100::10</TD>
                </TR>
<!-- /////////////////////////////////////////////////////////////// -->
                <TR>
                        <TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
                        <TD>NAME</TD>
                        <TD>NS2.sec.example.com (Pointer 0xC053)</TD>
                </TR>
                <TR>
                        <TD>TYPE</TD>
                        <TD>A (0x0001)</TD>
                </TR>
                <TR>
                        <TD>CLASS</TD>
                        <TD>IN (0x0001)</TD>
                </TR>
                <TR>
                        <TD>TTL</TD>
                        <TD>1 day (86400)</TD>
                </TR>
                <TR>
                        <TD>RDLENGTH</TD>
                        <TD>4</TD>
                </TR>
                <TR>
                        <TD>NSDNAME</TD>
                        <TD>192.168.0.30</TD>
                </TR>
<!-- /////////////////////////////////////////////////////////////// -->
                <TR>
                        <TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
                        <TD>NAME</TD>
                        <TD>NS2.sec.example.com (Pointer 0xC053)</TD>
                </TR>
                <TR>
                        <TD>TYPE</TD>
                        <TD>AAAA (0x001C)</TD>
                </TR>
                <TR>
                        <TD>CLASS</TD>
                        <TD>IN (0x0001)</TD>
                </TR>
                <TR>
                        <TD>TTL</TD>
                        <TD>1 day (86400)</TD>
                </TR>
                <TR>
                        <TD>RDLENGTH</TD>
                        <TD>16</TD>
                </TR>
                <TR>
                        <TD>NSDNAME</TD>
                        <TD>3ffe:501:ffff:100::30</TD>
                </TR>
<!-- /////////////////////////////////////////////////////////////// -->
		</TBODY>
	</TABLE>
	<BR>
<!-- =============================================================== -->
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Server1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>SV2_NETZ</TD>
			<TD>DNS Server7's (TN) Net-z address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	1. DNS Server1 (NUT) sends a NOTIFY request to DNS Server2 (TN).
	3. DNS Server1 (NUT) sends a standard reply CL2.sec.example.com A 192.168.0.21 to DNS Server2 (TN).

=head1 TERMINATION

	None

=head1 REFERENCE

	RFC1996 DNS NOTIFY
	3. NOTIFY Message

=cut
