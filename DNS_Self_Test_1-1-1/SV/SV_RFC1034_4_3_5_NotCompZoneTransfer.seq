#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/SV/SV_RFC1034_4_3_5_NotCompZoneTransfer.seq,v 1.3 2007/07/12 00:17:55 akisada Exp $
# $Id: SV_RFC1034_4_3_5_NotCompZoneTransfer.seq,v 1.3 2007/07/12 00:17:55 akisada Exp $
#
######################################################################

# XXX: should be support TCP SOA exchange

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# NUT configuration            #
#------------------------------#
my $NutConfig={ 
##mode
	              'ModeRequiredTestMode' => 'nonrecursive',
	              'ModeSetNamedConf' => 'yes',
	              'ModeSetZoneFiles' => 'yes',
	              'ConfOptRecursion' => 'yes',
	              'ConfZone0Name' => 'example.com',
	              'ConfZone0Type' => 'master',
	              'ConfZone0AllowQuery' => 'any',
	              'ConfZone0AllowTransfer' => 'any',
	              'ConfZone1Name' => 'sec.example.com',
	              'ConfZone1Type' => 'slave',
	              'ConfZone1Masters' => $TN_NET0_NODE4_ADDR,
	              'ConfZone1AllowQuery' => 'any',
	              'ConfZone1AllowTransfer' => 'any',
##zone
#SOA
	              'ZoneZone0Name' => 'example.com',
	              'ZoneZone0Ttl' => 86400,
                      'ZoneZone0Type' => 'master',
	              'ZoneZone0Rec0Name' => 'example.com.',
	              'ZoneZone0Rec0Type' => 'SOA',
	              'ZoneZone0Rec0Class' => 'IN',
	              'ZoneZone0Rec0Ttl' => 86400,
	              'ZoneZone0Rec0Mname' => 'NS1.example.com.',
	              'ZoneZone0Rec0Rname' => 'root.example.com.',
	              'ZoneZone0Rec0Serial' => 2005081600,
	              'ZoneZone0Rec0Refresh' => 3600,
	              'ZoneZone0Rec0Retry' => 900,
	              'ZoneZone0Rec0Expire' => 604800,
	              'ZoneZone0Rec0Minimum' => 3600,
#@ NS
	              'ZoneZone0Rec1Name' => 'example.com.',
	              'ZoneZone0Rec1Type' => 'NS',
	              'ZoneZone0Rec1Class' => 'IN',
	              'ZoneZone0Rec1Ttl' => 86400,
	              'ZoneZone0Rec1Value' => 'NS1.example.com.',
#NS1 A
	              'ZoneZone0Rec2Name' => 'NS1',
	              'ZoneZone0Rec2Type' => 'A',
	              'ZoneZone0Rec2Class' => 'IN',
	              'ZoneZone0Rec2Ttl' => 86400,
	              'ZoneZone0Rec2Value' => '192.168.0.10',
#A A
	              'ZoneZone0Rec3Name' => 'A',
	              'ZoneZone0Rec3Type' => 'A',
	              'ZoneZone0Rec3Class' => 'IN',
	              'ZoneZone0Rec3Ttl' => 86400,
	              'ZoneZone0Rec3Value' => '192.168.1.10',
	             };

# my $remoteRet = DNSRemote("setconfig.rmt",$NutConfig);
# unless ( defined($remoteRet) ) {
#         Debug_Print("ERROR:DNSRemote\n");
#         DNSExit($FAIL);
# }

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

my $ttl = 30;

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_CL_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

$dns_session_config[1] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE4_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
	'TN_ADDR_PROTO'  => 'UDP',
# 	'TN_ADDR_PROTO'  => 'TCP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_CL_PORT,
};

$dns_session_config[2] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE4_ADDR,
        'TN_ADDR_PORT'   => $TN_SV_PORT,
        'TN_ADDR_PROTO'  => 'TCP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_CL_PORT,
};

#--------------------
# DNS Server1
#--------------------
my @dns_session   = ();
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();
my @gen_dns_msg_1 = ();
my @exp_dns_msg_1 = ();
my @gen_dns_msg_2 = ();
my @exp_dns_msg_2 = ();
my @gen_dns_msg_3 = ();
my @exp_dns_msg_3 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                },
                {
                        'gen_dns_msg' => \@gen_dns_msg_1,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_1
                }
        ]
};

$dns_session[1] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_2,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_2
                },
                {
                        'gen_dns_msg' => undef,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_2
                },
        ]
};

$dns_session[2] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_3,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_3
                },
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 2nd message()
#------------------
#------------------
# NS7(TN) -> NUT
#------------------
$gen_dns_msg_2[0]->{'header'} = {    # 2nd packet header
        'id'      => undef,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 1,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 1,
        'nscount' => 1,
        'arcount' => 2,
};

$gen_dns_msg_2[0]->{'question'}->[0] = {    # 2nd packet question
        'qname'  => Gen_DNS_Name('sec.example.com'),
        'qtype'  => 0x0006,                            #SOA
        'qclass' => 0x0001,
};

$gen_dns_msg_2[0]->{'answer'}->[0] = {                 # 2nd packet answer
        'name'     => Gen_DNS_Name( '', 0xC00C ),
        'type'     => 0x0006,           #SOA
        'class'    => 0x0001,
        'ttl'      => $ttl,             #TTL=300
        'rdlength' => 33,
        'rdata'    => Gen_DNS_RDATA_SOA(
                Gen_DNS_Name( 'NS7',  0xC00c ),        #mname
                Gen_DNS_Name( 'root', 0xC00c ),        #rname
                2005121901,
                180,                                   #REFRESH
                $ttl,                                  #RETRY
                360,                                   #EXPIRE
                $ttl                                   #MINIMUM
        ),
};

$gen_dns_msg_2[0]->{'authority'}->[0] = {              # 2nd packet
        'name'     => Gen_DNS_Name( '', 0xC00c ),
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => $ttl,
        'rdlength' => 2,
        'rdata'    => Gen_DNS_Name( '', 0xC02D ),
};

$gen_dns_msg_2[0]->{'additional'}->[0] = {             # 2nd packet
        'name'     => Gen_DNS_Name( '', 0xC02D ),
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => $ttl,
        'rdlength' => 4,
        'rdata'    => Gen_DNS_RDATA_A('192.168.0.31'),
};

$gen_dns_msg_2[0]->{'additional'}->[1] = {             # 2nd packet
        'name'     => Gen_DNS_Name( '', 0xC02D ),
        'type'     => 0x001c,           #AAAA
        'class'    => 0x0001,
        'ttl'      => $ttl,
        'rdlength' => 16,
        'rdata'    => Gen_DNS_RDATA_AAAA('3ffe:501:ffff:100::31'),
};

#------------------
# 4th message()
#------------------
#------------------
# NS7(TN) -> NUT
#------------------
$gen_dns_msg_3[0]->{'header'} = {    # 4th packet header
        'id'      => undef,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 1,
        'tc'      => 0,
        'rd'      => undef,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 7,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_3[0]->{'question'}->[0] = {    # 4th packet question
        'qname'  => Gen_DNS_Name('sec.example.com'),
        'qtype'  => 0x00fc,                            #AXFR
        'qclass' => 0x0001,
};

$gen_dns_msg_3[0]->{'answer'}->[0] = {                 # 4th packet answer
        'name'     => Gen_DNS_Name( '', 0xC00C ),
        'type'     => 0x0006,           #SOA
        'class'    => 0x0001,
        'ttl'      => $ttl,             #TTL=300
        'rdlength' => 33,
        'rdata'    => Gen_DNS_RDATA_SOA(
                Gen_DNS_Name( 'NS7',  0xC00c ),        #mname
                Gen_DNS_Name( 'root', 0xC00c ),        #rname
                2005121901,
                180,                                   #REFRESH
                $ttl,                                  #RETRY
                360,                                   #EXPIRE
                $ttl                                   #MINIMUM
        ),
};

$gen_dns_msg_3[0]->{'answer'}->[1] = {                 # 4th packet answer
        'name'     => Gen_DNS_Name( '', 0xC00C ),
        'type'     => 0x0002,           #NS
        'class'    => 0x0001,
        'ttl'      => $ttl,             #TTL=300
        'rdlength' => 2,
        'rdata'    => Gen_DNS_Name( '', 0xC02D ),
};

$gen_dns_msg_3[0]->{'answer'}->[2] = {                 # 4th packet answer
        'name'     => Gen_DNS_Name( 'CL1', 0xC00C ),
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => $ttl,                #TTL=300
        'rdlength' => 4,
        'rdata'    => Gen_DNS_RDATA_A('192.168.0.21'),
};

$gen_dns_msg_3[0]->{'answer'}->[3] = {                 # 4th packet answer
        'name'     => Gen_DNS_Name( '', 0xC05C ),
        'type'     => 0x001c,           #AAAA
        'class'    => 0x0001,
        'ttl'      => $ttl,             #TTL=300
        'rdlength' => 16,
        'rdata'    => Gen_DNS_RDATA_AAAA('3ffe:501:ffff:100::21'),
};

$gen_dns_msg_3[0]->{'answer'}->[4] = {                 # 4th packet answer
        'name'     => Gen_DNS_Name( '', 0xC02D ),
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => $ttl,             #TTL=300
        'rdlength' => 4,
        'rdata'    => Gen_DNS_RDATA_A('192.168.0.31'),
};

$gen_dns_msg_3[0]->{'answer'}->[5] = {                 # 4th packet answer
        'name'     => Gen_DNS_Name( '', 0xC02D ),
        'type'     => 0x001c,           #AAAA
        'class'    => 0x0001,
        'ttl'      => $ttl,             #TTL=300
        'rdlength' => 16,
        'rdata'    => Gen_DNS_RDATA_AAAA('3ffe:501:ffff:100::31'),
};

$gen_dns_msg_3[0]->{'answer'}->[6] = {                 # 4th packet answer
        'name'     => Gen_DNS_Name( '', 0xC00C ),
        'type'     => 0x0006,           #SOA
        'class'    => 0x0001,
        'ttl'      => $ttl,             #TTL=300
        'rdlength' => 24,
        'rdata'    => Gen_DNS_RDATA_SOA(
                Gen_DNS_Name( '', 0xC02D ),            #mname
                Gen_DNS_Name( '', 0xC033 ),            #rname
                2005121901,
                180,                                   #REFRESH
                $ttl,                                  #RETRY
                360,                                   #EXPIRE
                $ttl                                   #MINIMUM
        ),
};

#------------------
# 5th message()
#------------------
#------------------
# Client(TN) -> NUT
#------------------
$gen_dns_msg_0[0]->{'header'} = {                      # 5th packet header
        'id'      => 0x1000,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {    # 5th packet question
        'qname'  => Gen_DNS_Name('CL1.sec.example.com'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#------------------
# 10th message
#------------------
#------------------
# Client(TN) -> NUT
#------------------
$gen_dns_msg_1[0]->{'header'} = {           # 5th packet header
        'id'      => 0x1001,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_1[0]->{'question'}->[0] = {    # 5th packet question
        'qname'  => Gen_DNS_Name('CL1.sec.example.com'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 1st message
#------------------
$exp_dns_msg_2[0]->{'header'} = {
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => undef,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_2[0]->{'question'}->[0] = {
        'qname'  => 'sec.example.com.',
        'qtype'  => 0x0006,               #SOA
        'qclass' => 0x0001,
};

#------------------
# 3rd message
#------------------
$exp_dns_msg_3[0]->{'header'} = {
        'id'      => undef,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => undef,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => undef,
        'arcount' => undef,
};

$exp_dns_msg_3[0]->{'question'}->[0] = {
        'qname'  => 'sec.example.com.',
        'qtype'  => 0x00fc,               #AXFR
        'qclass' => 0x0001,
};

#------------------
# 6th message
#------------------
$exp_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 1,
        'nscount' => 1,
        'arcount' => 2,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'CL1.sec.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

$exp_dns_msg_0[0]->{'answer'}->[0] = {
        'name'     => 'CL1.sec.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => $ttl,
        'rdlength' => 4,
        'rdata'    => '192.168.0.21',
};

$exp_dns_msg_0[0]->{'authority'}->[0] = {
        'name'     => 'sec.example.com.',
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => $ttl,
        'rdlength' => 6,
        'rdata'    => 'NS7.sec.example.com.'
};

$exp_dns_msg_0[0]->{'additional'}->[0] = {
        'name'     => 'NS7.sec.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => $ttl,
        'rdlength' => 4,
        'rdata'    => '192.168.0.31',
};

$exp_dns_msg_0[0]->{'additional'}->[1] = {
        'name'     => 'NS7.sec.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => $ttl,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:100::31',
};

#------------------
# 11th message
#------------------
$exp_dns_msg_1[0]->{'header'} = {
        'id'      => 0x1001,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 0,
        'ra'      => undef,
        'z'       => undef,
        'rcode'   => 2,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => undef,
};

$exp_dns_msg_1[0]->{'question'}->[0] = {
        'qname'  => 'CL1.sec.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

################################
# start tests                  #
################################

my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

my $remoteRet = DNSRemote("setconfig.rmt",$NutConfig);
unless (defined($remoteRet)) {
	Debug_Print("ERROR:DNSRemote\n");
	DNSExit($FAIL);
}

#------------------------------#
# 1st packet (receive@NS7)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 1st message\n"] );

#------------------------------#
# Judgment (1st packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (1st packet)\n",
                "1. Received standard query with Type=SOA.\n",
        ]
);

my $recv_data = $dns_session[1]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_2[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["1st packet PASS\n"] );

#------------------------------#
# 2nd packet (send From NS7)   #
#------------------------------#
#-------------------------------
# Copy Header RD and ID from NUT query
#-------------------------------
$gen_dns_msg_2[0]->{'header'}->{'id'} = $recv_data->{'header'}->{'id'};
$gen_dns_msg_2[0]->{'header'}->{'rd'} = $recv_data->{'header'}->{'rd'};

$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 2nd message\n"] );

#------------------------------#
# 3rd packet (receive@NS7)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[2]->{'socket_ref'},
        $dns_session[2]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 3rd message\n"] );

#------------------------------#
# Judgment (3rd packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (3rd packet)\n",
                "3. Received standard query with Type=AXFR using TCP\n",
        ]
);

$recv_data = undef;
$recv_data = $dns_session[2]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_3[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["3rd packet PASS\n"] );

#------------------------------#
# 4th packet (send From NS7)   #
#------------------------------#
#-------------------------------
# Copy Header RD and ID from NUT query
#-------------------------------
$gen_dns_msg_3[0]->{'header'}->{'id'} = $recv_data->{'header'}->{'id'};
$gen_dns_msg_3[0]->{'header'}->{'rd'} = $recv_data->{'header'}->{'rd'};

$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[2]->{'socket_ref'},
        $dns_session[2]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 4th message\n"] );

sleep(3);

#------------------------------#
# 5th packet (send)            #
#------------------------------#
$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 5th message\n"] );

#------------------------------#
# 6th packet (receive@Client)  #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 6th message\n"] );

#------------------------------#
# Judgment (6th packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (6th packet)\n",
"6. Received standard query response including Answer address 192.168.0.21.\n",
        ]
);

$recv_data = undef;
$recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["6th packet PASS\n"] );

#wait until REFRESH expire
Print_Message( "-", ["Waiting 5 min\n"] );

#sleep($ttl);
#Packet_Clear(0,0,0,0);

#------------------------------#
# 7th packet (receive@NS7)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 360,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[1]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 7th message\n"] );

#------------------------------#
# Judgment (7th packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (7th packet)\n",
"7. Received standard query with Type=SOA after REFRESH time expired.\n",
        ]
);

$recv_data = undef;
$recv_data = $dns_session[1]->{'dns_one_session'}->[1]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_2[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["7th packet PASS\n"] );

#------------------------------#
# 8th packet (send From NS7)   #
#------------------------------#
Print_Message( "=", ["Don't Send 8th message\n"] );

#------------------------------#
# 9th packet (receive@NS7)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[1]->{'socket_ref'},
        $dns_session[1]->{'dns_one_session'}->[1]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 9th message\n"] );

#------------------------------#
# Judgment (9th packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (9th packet)\n",
"9. Received standard query with Type=SOA every RETRY seconds.\n",
        ]
);

$recv_data = undef;
$recv_data = $dns_session[1]->{'dns_one_session'}->[1]->{'dec_dns_msg'}->[1];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_2[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["9th packet PASS\n"] );

#wait until EXPIRE
Print_Message( "-", ["Waiting 8 min\n"] );
sleep(480);
Packet_Clear( 0, 0, 0, 0 );

#------------------------------#
# 10th packet (send)            #
#------------------------------#
$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[1]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 10th message\n"] );

#------------------------------#
# 11th packet (receive@Client)  #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[1]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 11th message\n"] );

#------------------------------#
# Judgment (11th packet)       #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (11th packet)\n",
                "11. Received error response including RCODE=2.\n",
        ]
);

$recv_data = undef;
$recv_data = $dns_session[0]->{'dns_one_session'}->[1]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_1[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["11th packet PASS\n"] );

DNSExit($OK);
__END__

######################################################################

=head1 NAME

	SV_RFC1034_4_3_5_NotCompZoneTransfer - Zone transfer is not completed case.

=head1 VERIFICATION POINTS

	Verify that a NUT starts zone maintenance and transfers as follows:

=begin html
	<UL>
	<DD><LI>Whenever a new zone is loaded in a secondary, the secondary waits REFRESH seconds 
	<DD>before checking with the primary for a new serial. 
	<DD><LI>If this check cannot be completed, new checks are started every RETRY seconds. 
	<DD>The check is a simple query to the primary for the SOA RR of the zone.
	<DD><LI>If the secondary finds it impossible to perform a serial check for the EXPIRE interval, 
	<DD>it must assume that its copy of the zone is obsolete an discard it.
	<DD><LI>In spite of a server's best efforts, it may be unable to load zone data
	<DD>from a master file due to syntax errors, etc., or be unable to refresh a
	<DD>zone within the its expiration parameter.  In this case, the name server
	<DD>should answer queries as if it were not supposed to possess the zone.
	<DD>
	</UL>

=end html

=head1 TARGET

	Server (Secondary)

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./SV_RFC1034_4_3_5_NotCompZoneTransfer.seq">SV_RFC1034_4_3_5_NotCompZoneTransfer.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<DD><LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
Net-y   -----------+--------------------------------------------- 3ffe:501:ffff:101::/64
                   |                                              192.168.1/24
                   |
                   |                     sec.example.com domain
                 Router (TN)             DNS Server7
                   |3ffe:501:ffff:100::1   |3ffe:501:ffff:100::31
                   |192.168.0.1            |192.168.0.31
                   |                       |
                   |                       |
Net-z   --+--------+-----------------+-----+--------------------- 3ffe:501:ffff:100::/64
          |                          |                             192.168.0/24
          |                          |                         
        DNS Server1 (NUT)          DNS Client1 (TN)
           3ffe:501:ffff:100::XXXX    3ffe:501:ffff:100::20 
           192.168.0.10               192.168.0.20
	<BR>
	XXXX: EUI64
	</PRE>
	<DD><LI><STRONG>Setup</STRONG></LI><BR>
	<BR>
	<DD>Set the DNS Server1's (NUT) address as above mentioned Network Topology.<BR>
	<DD>Configure the Server1's: (NUT) 
	<DD><DD><LI>zone file to response query from TN.<BR>
	<DD><DD><LI>configuration file as secondary server about sec.example.com zone<BR>
	<BR>
	<DD>Example of root server list:</BR>
	<BR>
	<DD>&nbsp;&nbsp;For IPv4:
	<PRE>
.                       3600000         IN      NS      A.ROOT.NET.
A.ROOT.NET.             3600000                 A       192.168.1.20
	</PRE>
	<DD>&nbsp;&nbsp;For IPv6:
	<PRE>
.                       3600000         IN      NS      A.ROOT.NET.
A.ROOT.NET.             3600000                 AAAA    3ffe:501:ffff:101::20
	</PRE>
	<DD>Example of example.com zone file:<BR>
	<PRE>
$TTL    86400           ; TTL of 1 day
@ IN SOA NS1.example.com. root.example.com. (
	2005081600	; serial
	3600		; refresh every 1 hr
	900		; retry every 15 min
	604800		; expire after a week
	3600		; Minimum TTL of a 1 hr
)
;
	IN	NS	NS1.example.com.
NS1	IN	A	192.168.0.10
;
A	IN	A	192.168.1.10
	</PRE>
	<DD>Example of DNS server configuration for secondary:<BR>
	<PRE>
zone "sec.example.com" {
	type slave;
	masters {192.168.0.31;};
	file "s/sec.example.com";
};
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

    DNS Client1 (TN)             DNS Server1 (NUT)              DNS Server7 (TN)
        |                              |                              |
        |                              |                              |
        |                              |----------------------------->|
        |                              | 1. Standard query            |
        |                              |  QNAME = sec.example.com     |
        |                              |  QTYPE = SOA (0x0006)        |
        |                              |                              |
        |                              |<-----------------------------|
        |                              | 2. Standard query response   |
        |                              |  QNAME = sec.example.com     |
        |                              |  QTYPE = SOA (0x0006)        |
        |                              |  ANSWER Name                 |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Type                 |
        |                              |       = SOA (0x0006)         |
        |                              |  ANSWER TTL                  |
        |                              |       = 30                   |
        |                              |  ANSWER MNAME                |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Rname                |
        |                              |       = root.sec.example.com |
        |                              |  ANSWER SERIAL               |
        |                              |       = 1                    |
        |                              |  ANSWER REFRESH              |
        |                              |       = 180sec               |
        |                              |  ANSWER RETRY                |
        |                              |       = 30sec                |
        |                              |  ANSWER EXPIRE               |
        |                              |       = 360sec               |
        |                              |  ANSWER MINIMUM              |
        |                              |       = 30sec                |
        |                              |  AUTHORITY Name              |
        |                              |       = sec.example.com      |
        |                              |  AUTHORITY Type              |
        |                              |       = NS (0x0002)          |
        |                              |  AUTHORITY Name Server       |
        |                              |       = NS7.sec.example.com  |
        |                              |  ADDITIONAL Name             |
        |                              |       = NS7.sec.example.com  |
        |                              |  AUTHORITY Type              |
        |                              |       = A (0x0001)           |
        |                              |  AUTHORITY Address           |
        |                              |       = 192.168.0.31         |
        |                              |                              |
        |                              |----------------------------->|
        |                              | 3. Standard query (using TCP)|
        |                              |  QNAME = sec.example.com     |
        |                              |  QTYPE = AXFR (0x00FC)       |
        |                              |                              |
        |                              |<-----------------------------|
        |                              | 4. Standard query response   |
        |                              |    (using TCP)               |
        |                              |  QNAME = sec.example.com     |
        |                              |  QTYPE = AXFR (0x00FC)       |
        |                              |  ANSWER Name                 |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Type                 |
        |                              |       = SOA (0x0006)         |
        |                              |  ANSWER TTL                  |
        |                              |       = 30                   |
        |                              |  ANSWER MNAME                |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Rname                |
        |                              |       = root.sec.example.com |
        |                              |  ANSWER SERIAL               |
        |                              |       = 1                    |
        |                              |  ANSWER REFRESH              |
        |                              |       = 180sec               |
        |                              |  ANSWER RETRY                |
        |                              |       = 30sec                |
        |                              |  ANSWER EXPIRE               |
        |                              |       = 360sec               |
        |                              |  ANSWER MINIMUM              |
        |                              |       = 30sec                |
        |                              |                              |
        |                              |  ANSWER Name                 |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Type                 |
        |                              |       = NS (0x0002)          |
        |                              |  ANSWER Name                 |
        |                              |       = NS7.sec.example.com  |
        |                              |                              |
        |                              |  ANSWER Name                 |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Type                 |
        |                              |       = MX (0x000F)          |
        |                              |  ANSWER Name                 |
        |                              |       = NS7.sec.example.com  |
        |                              |                              |
        |                              |  ANSWER Name                 |
        |                              |       = CL1.sec.example.com  |
        |                              |  ANSWER Type                 |
        |                              |       = A (0x0001)           |
        |                              |  ANSWER Address              |
        |                              |       = 192.168.0.21         |
        |                              |                              |
        |                              |  ANSWER Name                 |
        |                              |       = CL1.sec.example.com  |
        |                              |  ANSWER Type                 |
        |                              |       = AAAA (0x001C)        |
        |                              |  ANSWER Address              |
        |                              |      = 3ffe:501:ffff:100::20 |
        |                              |                              |
        |                              |  ANSWER Name                 |
        |                              |       = NS7.sec.example.com  |
        |                              |  ANSWER Type                 |
        |                              |       = A (0x0001)           |
        |                              |  ANSWER Address              |
        |                              |       = 192.168.0.31         |
        |                              |                              |
        |                              |  ANSWER Name                 |
        |                              |       = NS7.sec.example.com  |
        |                              |  ANSWER Type                 |
        |                              |       = AAAA (0x001C)        |
        |                              |  ANSWER Address              |
        |                              |      = 3ffe:501:ffff:100::31 |
        |                              |                              |
        |                              |  ANSWER Name                 |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Type                 |
        |                              |       = SOA (0x0006)         |
        |                              |  ANSWER TTL                  |
        |                              |       = 30                   |
        |                              |  ANSWER MNAME                |
        |                              |       = sec.example.com      |
        |                              |  ANSWER Rname                |
        |                              |       = root.sec.example.com |
        |                              |  ANSWER SERIAL               |
        |                              |       = 1                    |
        |                              |  ANSWER REFRESH              |
        |                              |       = 180sec               |
        |                              |  ANSWER RETRY                |
        |                              |       = 30sec                |
        |                              |  ANSWER EXPIRE               |
        |                              |       = 360sec               |
        |                              |  ANSWER MINIMUM              |
        |                              |       = 30sec                |
        |                              |                              |
        |----------------------------->|                              |
        | 5. Send standard query       |                              |
        |  RD = 0                      |                              |
        |  QNAME = CL1.sec.example.com |                              |
        |  QTYPE = A                   |                              |
        |                              |                              |
        |<-----------------------------|                              |
        | 6. Standard query response   |                              |
        |  AA = 0                      |                              |
        |  RD = 0                      |                              |
        |  QNAME = CL1.sec.example.com |                              |
        |  QTYPE = A                   |                              |
        |  ANSWER Name                 |                              |
        |        = CL1.sec.example.com |                              |
        |  ANSWER Type                 |                              |
        |        = A (0x0001)          |                              |
        |  ANSWER Address              |                              |
        |        = 192.168.0.21        |                              |
        |                              |                              |
        |  AUTHORITY Name              |                              |
        |        = sec.example.com     |                              |
        |  AUTHORITY Type              |                              |
        |        = NS (0x0002)         |                              |
        |  AUTHORITY Name Server       |                              |
        |        = NS7.sec.example.com |                              |
        |                              |                              |
        |  ADDITIONAL Name             |                              |
        |        = NS7.sec.example.com |                              |
        |  ADDITIONAL Type             |                              |
        |        = A (0x0001)          |                              |
        |  ADDITIONAL Address          |                              |
        |        = 192.168.0.31        |                              |
        |                              |                              |
        |  ADDITIONAL Name             |                              |
        |        = NS7.sec.example.com |                              |
        |  ADDITIONAL Type             |                              |
        |        = AAAA (0x001C)       |                              |
        |  ADDITIONAL Address          |                              |
        |      = 3ffe:501:ffff:100::31 |                              |
        |                              |                              |
        |                              |                              |
        |                              | (REFRESH (3 minutes) interval|
        |                              | expired after sending zone   |
        |                              | information)                 |
        |                              |                              |
        |                              |----------------------------->|
        |                              | 7. Standard query            |
        |                              |   same as above No.1         |
        |                              |                              |
        |                              |            x <---------------|
        |                              | 8. Doesn't send standard     |
        |                              |   query response             |
        |                              |                              |
        |                              | (RETRY (30 sec) interval     |
        |                              | expired after sending        |
        |                              | previous query)              |
        |                              |                              |
        |                              |----------------------------->|
        |                              | 9. Standard query            |
        |                              |  same as above No.1          |
        |                              |  Repeat every RETRY seconds  | 
        |                              |                              |
        |                              | (EXPIRE (360 sec) interval   |
        |                              | passed after sending zone    |
        |                              | information)                 |
        |                              |                              |
        |                              |                              |
        |----------------------------->|                              |
        | 10. Send standard query      |                              |
        |  same as above No.5          |                              |
        |                              |                              |
        |<-----------------------------|                              |
        | 11. Standard query response  |                              |
        |  AA = 0                      |                              |
        |  RD = 0                      |                              |
        |  RCODE = 2 (Server failure)  |                              |
        |  QNAME = CL1.sec.example.com |                              |
        |  QTYPE = A                   |                              |
        |                              |                              |
        v                              v                              v

	1. DNS Server1 (NUT) transmits standard query QNAME = sec.example.com, 
	   Type = SOA to DNS Server7 (TN). (Judgment *1)
	2. DNS Server7 (TN) send standard query response with SOA RRs to DNS Server1 (NUT).

	3. DNS Server1 (NUT) transmits standard query with QNAME = sec.example.com, 
	   Type = AXFR using TCP to DNS Server7 (TN). (Judgment *3)
	4. DNS Server7 (TN) send standard query response including all RRs about sec.example.com zone 
	   using TCP to DNS Server1 (NUT).

	5. DNS Client1 (TN) send standard query QNAME = CL1.sec.example.com to DNS Server1 (NUT).
	6. DNS Server1 (NUT) transmits standard query response ANSWER Address = 192.168.0.21 
	   to DNS Client1 (TN). (Judgment *6)

	7. After REFRESH time expired, DNS Server1 (NUT) transmits standard query QNAME = sec.example.com,
	   Type = SOA to DNS Server7 (TN). (Judgment *7)
	8. DNS Server7 (TN) doesn't send standard query response to DNS Server1 (NUT).
	9. Then DNS Server1 (NUT) transmits standard query QNAME = sec.example.com to DNS Server7 (TN) 
	   every RETRY seconds. (Judgment *9)

	10. After EXPIRE time passed, DNS Client1 (TN) send standard query QNAME = CL1.sec.example.com 
	    to DNS Server1 (NUT).
	11. DNS Server1 (NUT) transmits error response RCODE = 2 (Server failure) 
	    to DNS Client1 (TN). (Judgment *11)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Server1 (NUT) to Server7 (TN) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV7_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server7 (TN) to Server1 (NUT)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>SV7_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>Value that NUT uses</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>Value that NUT uses</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="12">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>sec.example.com (Pointer 0xC00C)
			</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>33</TD>
		</TR>
		<TR>
			<TD>MNAME</TD>
			<TD>NS7.sec.example.com (NS7 + Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>RNAME</TD>
			<TD>root.sec.example.com (root + Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>SERIAL</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>REFRESH</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RETRY</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>EXPIRE</TD>
			<TD>600sec</TD>
		</TR>
		<TR>
			<TD>MINIMUM</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>sec.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC02D)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC02D)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.31</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC02D)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:100::31</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>3rd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Server1 (NUT) to Server7 (TN) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV7_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">TCP Header</TD>
			<TD>Src Port</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>AXFR (0x00FC)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>4th packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server7 (TN) to Server1 (NUT)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>SV7_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">TCP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>Value that NUT uses</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>Value that NUT uses</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>7</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>AXFR (0x00FC)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="12">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>sec.example.com (Pointer 0xC00C)
			</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>33</TD>
		</TR>
		<TR>
			<TD>MNAME</TD>
			<TD>NS7.sec.example.com (NS7 + Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>RNAME</TD>
			<TD>root.sec.example.com (root + Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>SERIAL</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>REFRESH</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RETRY</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>EXPIRE</TD>
			<TD>600sec</TD>
		</TR>
		<TR>
			<TD>MINIMUM</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>sec.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC02D)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>CL1.sec.example.com (CL1 + Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.21</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>CL1.sec.example.com (Pointer 0xC05C)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:100::21</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC02D)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.31</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC02D)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:100::31</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="12">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>sec.example.com (Pointer 0xC00C)
			</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>24</TD>
		</TR>
		<TR>
			<TD>MNAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC02D)</TD>
		</TR>
		<TR>
			<TD>RNAME</TD>
			<TD>root.sec.example.com (Pointer 0xC033)</TD>
		</TR>
		<TR>
			<TD>SERIAL</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>REFRESH</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RETRY</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>EXPIRE</TD>
			<TD>600sec</TD>
		</TR>
		<TR>
			<TD>MINIMUM</TD>
			<TD>30sec</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>5th packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (TN) to Server1 (NUT)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>1000</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>CL1.sec.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>6th packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (NUT) to Client1 (TN) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>1000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>
			CL1.sec.example.com
			</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>
			CL1.sec.example.com (Pointer 0xC00C)
			</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.21</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>sec.example.com (Pointer 0xC010)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>6</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS7.sec.example.com (NS7 + Pointer 0xC010)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC041)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.30</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS7.sec.example.com (Pointer 0xC041)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>30sec</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:100::31</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>7th packet.
	<DD><DD>same as No.1 packet.
	<BR>
	<DD>8th packet.
	<DD><DD>Doesn't send standard query response
	<BR>
	<DD>9th packet.
	<DD><DD>same as No.1 packet.
	<BR>
	<DD>10th packet.
	<DD><DD>same as No.5 packet, but ID=0x2000
	<BR>
	<BR>
	<DD>11th packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (NUT) to Client1 (TN) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>1000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x2000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD><B><I>RCODE</I></B></TD>
			<TD><B>2</B></TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>
			CL1.sec.example.com
			</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Server1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>CL1_NETZ</TD>
			<TD>DNS Client1's (TN) Net-z address</TD>
		</TR>
		<TR>
			<TD>SV7_NETZ</TD>
			<TD>DNS Server7's (TN) Net-z address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

        1. Received standard query with Type=SOA. 
        3. Received standard query with Type=AXFR using TCP
        6. Received standard query response including Answer address 192.168.0.21. 
        7. Received standard query with Type=SOA after REFRESH time expired.
        9. Received standard query with Type=SOA every RETRY seconds.
        11. Received error response including RCODE=2. 


=head1 TERMINATION

	None

=head1 REFERENCE

	RFC1034 DOMAIN NAMES - CONCEPTS AND FACILITIES
	4. NAME SERVERS
	4.3.5. Zone maintenance and transfers

	RFC1035 Domain Implementation and Specification
	6.3. Zone refresh and reload processing

=cut
