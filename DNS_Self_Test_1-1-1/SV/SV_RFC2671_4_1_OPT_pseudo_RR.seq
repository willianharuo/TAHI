#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/SV/SV_RFC2671_4_1_OPT_pseudo_RR.seq,v 1.2 2007/07/18 02:26:18 akisada Exp $
# $Id: SV_RFC2671_4_1_OPT_pseudo_RR.seq,v 1.2 2007/07/18 02:26:18 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# NUT configuration            #
#------------------------------#
my $NutConfig={ 
##mode
	                            'ModeRequiredTestMode' => 'nonrecursive',
	                            'ModeSetNamedConf' => 'yes',
	                            'ModeSetZoneFiles' => 'yes',
##named.conf
	                            'ConfOptEdnsUdpSize' => $NUT_EDNS0_UDP_SIZE,
	                            'ConfZone0Name' => 'example.com',
	                            'ConfZone0Type' => 'master',
	                            'ConfZone0AllowQuery' => 'any',
	                            'ConfZone0AllowTransfer' => 'any',
##zone
#SOA
	                            'ZoneZone0Name' => 'example.com',
	                            'ZoneZone0Ttl' => 86400,
	                            'ZoneZone0Type' => 'master',
	                            'ZoneZone0Rec0Name' => 'example.com.',
	                            'ZoneZone0Rec0Type' => 'SOA',
	                            'ZoneZone0Rec0Class' => 'IN',
	                            'ZoneZone0Rec0Ttl' => 86400,
	                            'ZoneZone0Rec0Mname' => 'NS1.example.com.',
	                            'ZoneZone0Rec0Rname' => 'root.example.com.',
	                            'ZoneZone0Rec0Serial' => 2005081600,
	                            'ZoneZone0Rec0Refresh' => 3600,
	                            'ZoneZone0Rec0Retry' => 900,
	                            'ZoneZone0Rec0Expire' => 604800,
	                            'ZoneZone0Rec0Minimum' => 3600,
#@  NS
	                            'ZoneZone0Rec1Name' => 'example.com.',
	                            'ZoneZone0Rec1Type' => 'NS',
	                            'ZoneZone0Rec1Class' => 'IN',
	                            'ZoneZone0Rec1Ttl' => 86400,
	                            'ZoneZone0Rec1Value' => 'NS1.example.com.',
#NS1 A
	                            'ZoneZone0Rec2Name' => 'NS1',
	                            'ZoneZone0Rec2Type' => 'A',
	                            'ZoneZone0Rec2Class' => 'IN',
	                            'ZoneZone0Rec2Ttl' => 86400,
	                            'ZoneZone0Rec2Value' => '192.168.0.10',
	                           };


for(my $i=0;$i < 32;$i++){
	my $ip = sprintf("3ffe:501:ffff:101::%02d",$i + 10);
	$NutConfig->{"ZoneZone0Rec" . ($i + 3) ."Name"} = 'A';
	$NutConfig->{"ZoneZone0Rec" . ($i + 3) ."Type"} = 'AAAA';
	$NutConfig->{"ZoneZone0Rec" . ($i + 3) ."Class"} = 'IN';
	$NutConfig->{"ZoneZone0Rec" . ($i + 3) ."Ttl"} = 86400;
	$NutConfig->{"ZoneZone0Rec" . ($i + 3) ."Value"} = $ip;
}

my $remoteRet = DNSRemote("setconfig.rmt",$NutConfig);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_CL_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

#--------------------
# DNS Server1
#--------------------
my @dns_session   = ();
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0,
                }
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 1st message()
#------------------
#------------------
# Client1(TN) -> NUT
#------------------
$gen_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 1,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => Gen_DNS_Name('A.example.com'),
        'qtype'  => 0x001c,                          #AAAA
        'qclass' => 0x0001,
};

$gen_dns_msg_0[0]->{'additional'}->[0] = {
        'name'     => Gen_DNS_Name(''),
        'type'     => 0x0029,                        #OPT
        'class'    => 1024,
        'rdlength' => 0,
        'rdata'    => '',
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 2nd message
#------------------
$exp_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => 1,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => undef,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 32,
        'nscount' => 1,
        'arcount' => undef,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'A.example.com.',
        'qtype'  => 0x001c,             #AAAA
        'qclass' => 0x0001,
};

$exp_dns_msg_0[0]->{'answer'}->[0] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::10',
};

$exp_dns_msg_0[0]->{'answer'}->[1] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::11',
};

$exp_dns_msg_0[0]->{'answer'}->[2] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::12',
};

$exp_dns_msg_0[0]->{'answer'}->[3] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::13',
};

$exp_dns_msg_0[0]->{'answer'}->[4] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::14',
};

$exp_dns_msg_0[0]->{'answer'}->[5] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::15',
};

$exp_dns_msg_0[0]->{'answer'}->[6] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::16',
};

$exp_dns_msg_0[0]->{'answer'}->[7] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::17',
};

$exp_dns_msg_0[0]->{'answer'}->[8] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::18',
};

$exp_dns_msg_0[0]->{'answer'}->[9] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::19',
};

$exp_dns_msg_0[0]->{'answer'}->[10] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::20',
};

$exp_dns_msg_0[0]->{'answer'}->[11] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::21',
};

$exp_dns_msg_0[0]->{'answer'}->[12] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::22',
};

$exp_dns_msg_0[0]->{'answer'}->[13] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::23',
};

$exp_dns_msg_0[0]->{'answer'}->[14] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::24',
};

$exp_dns_msg_0[0]->{'answer'}->[15] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::25',
};

$exp_dns_msg_0[0]->{'answer'}->[16] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::26',
};

$exp_dns_msg_0[0]->{'answer'}->[17] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::27',
};

$exp_dns_msg_0[0]->{'answer'}->[18] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::28',
};

$exp_dns_msg_0[0]->{'answer'}->[19] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::29',
};

$exp_dns_msg_0[0]->{'answer'}->[20] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::30',
};

$exp_dns_msg_0[0]->{'answer'}->[21] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::31',
};

$exp_dns_msg_0[0]->{'answer'}->[22] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::32',
};

$exp_dns_msg_0[0]->{'answer'}->[23] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::33',
};

$exp_dns_msg_0[0]->{'answer'}->[24] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::34',
};

$exp_dns_msg_0[0]->{'answer'}->[25] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::35',
};

$exp_dns_msg_0[0]->{'answer'}->[26] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::36',
};

$exp_dns_msg_0[0]->{'answer'}->[27] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::37',
};

$exp_dns_msg_0[0]->{'answer'}->[28] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::38',
};

$exp_dns_msg_0[0]->{'answer'}->[29] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::39',
};

$exp_dns_msg_0[0]->{'answer'}->[30] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::40',
};

$exp_dns_msg_0[0]->{'answer'}->[31] = {
        'name'     => 'A.example.com.',
        'type'     => 0x001c,                    #AAAA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 16,
        'rdata'    => '3ffe:501:ffff:101::41',
};

$exp_dns_msg_0[0]->{'authority'}->[0] = {
        'name'     => 'example.com.',
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 6,
        'rdata'    => 'NS1.example.com.',
};

$exp_dns_msg_0[0]->{'additional'}->[0] = {
        'name'     => 'NS1.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.0.10',
};

$exp_dns_msg_0[0]->{'additional'}->[1] = {
        'name'     => '',
        'type'     => 0x0029,    #OPT
        'class'    => $NUT_EDNS0_UDP_SIZE,
        'rdlength' => 0,
        'rdata'    => undef,
};

$JUDGE_OPT_RR = $TRUE;

################################
# start tests                  #
################################

my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# 1st packet (send)            #
#------------------------------#
$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 1st message\n"] );

#------------------------------#
# 2nd packet (receive@NS2)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 2nd message\n"] );

#------------------------------#
# Judgment (2nd packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (2nd packet)\n",
"2. Received standard query response including OPT pseudo-RR.\n",
        ]
);

my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["2nd packet PASS\n"] );

DNSExit($OK);
__END__

######################################################################

=head1 NAME

	SV_RFC2671_4_1_OPT_pseudo_RR - OPT pseudo-RR

=head1 VERIFICATION POINTS

	Verify that a NUT transmits correct message including OPT pseudo-RR

=begin html
	<UL>
	<DD><LI>OPT pseudo-RR format
	<PRE>
+-+-+-+-+-+-+-+-+
| NAME          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| TYPE                          | CLASS                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|EXTENDED-RCODE | VERSION       | Z                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RDLENGTH                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ -+-
| OPTION-CODE                   | OPTION-LENGTH                 |  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  | {attribute,value} pair
| OPTION-DATA ...                                                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ -+-
| OPTION-CODE                   | OPTION-LENGTH                 |  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  | {attribute,value} pair
| OPTION-DATA ...                                                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ -+-
| OPTION-CODE                   | OPTION-LENGTH                 |  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  | {attribute,value} pair
| OPTION-DATA ...                                                  |
+-+-+-+-+-                                                        -+-
                                                                   | ...
	</PRE>
	<DD><TABLE BORDER="0">
		<TBODY>
		<TR><TD><B>NAME :</B></TD>
		    <TD><B>empty (root domain)</B></TD></TR>
		<TR><TD><B>TYPE :</B></TD>
		    <TD><B>OPT (= 41)</B></TD></TR>
		<TR><TD><B>CLASS :</B></TD>
		    <TD><B>sender's UDP payload size</B></TD></TR>
		<TR><TD><B>EXTENDED-RCODE :</B></TD>
		    <TD><B>Forms upper 8 bits of extended 12-bit RCODE.</B><BR></TD></TR>
		<TR><TD><B>VERSION :</B></TD>
		    <TD><B>Indicates the implementation level of whoever sets it.</B></TD></TR>
		<TR><TD><B>Z :</B></TD>
		    <TD><B>0</B></TD></TR>
		<TR><TD><B>OPTION-CODE :</B></TD>
		    <TD><B>(Assigned by IANA.)</B></TD></TR>
		<TR><TD><B>OPTION-LENGTH :</B></TD>
		    <TD><B>Size (in octets) of OPTION-DATA.</B></TD></TR>
		<TR><TD><B>OPTION-DATA :</B></TD>
		    <TD><B>Varies per OPTION-CODE.</B></TD></TR>
		</TBODY>
	</TABLE>
	</UL>


=end html

=head1 TARGET

	Authoritative Server

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./SV_RFC2671_4_1_OPT_pseudo_RR.seq">SV_RFC2671_4_1_OPT_pseudo_RR.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<DD><LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
        AP Server1 (TN)
          |3ffe:501:ffff:101::10-3ffe:501:ffff:101::41
          |192.168.1.10
          |
Net-y   --+--------+-------------------------- 3ffe:501:ffff:101::/64 
                   |                           192.168.1/24
                   |
                   |
                 Router (TN)
                   |3ffe:501:ffff:100::1
                   |192.168.0.1
                   |
                   |
Net-z   --+--------+-----------------+-------- 3ffe:501:ffff:100::/64 
          |                          |          192.168.0/24
          |                          |
        DNS Server1 (NUT)            DNS Client1 (TN)
           3ffe:501:ffff:100::XXXX     3ffe:501:ffff:100::20 
           192.168.0.10                192.168.0.20
	<BR>
	XXXX: EUI64
	</PRE>
	<DD><LI><STRONG>Setup</STRONG></LI><BR>
	<BR>
	<DD>Set the DNS Server1's (NUT) address as above mentioned Network Topology.<BR>
	<DD>Set the DNS Server1's (NUT) EDNS UDP size to 1024.<BR>
	<DD>Configure the Server1's (NUT) zone file to response query from TN.<BR>
	<BR>
	<DD>Example of example.com zone file:<BR>
	<PRE>
$TTL    86400           ; TTL of 1 day
@ IN SOA NS1.example.com. root.example.com. (
	2005081600	; serial
	3600		; refresh every 1 hr
	900		; retry every 15 min
	604800		; expire after a week
	3600		; Minimum TTL of a 1 hr
)
;
	IN	NS	NS1.example.com.
NS1	IN	A	192.168.0.10
;
A	IN	AAAA	3ffe:501:ffff:101::10
		AAAA	3ffe:501:ffff:101::11
		AAAA	3ffe:501:ffff:101::12
		AAAA	3ffe:501:ffff:101::13
		AAAA	3ffe:501:ffff:101::14
		AAAA	3ffe:501:ffff:101::15
		AAAA	3ffe:501:ffff:101::16
		AAAA	3ffe:501:ffff:101::17
		AAAA	3ffe:501:ffff:101::18
		AAAA	3ffe:501:ffff:101::19
		AAAA	3ffe:501:ffff:101::20
		AAAA	3ffe:501:ffff:101::21
		AAAA	3ffe:501:ffff:101::22
		AAAA	3ffe:501:ffff:101::23
		AAAA	3ffe:501:ffff:101::24
		AAAA	3ffe:501:ffff:101::25
		AAAA	3ffe:501:ffff:101::26
		AAAA	3ffe:501:ffff:101::27
		AAAA	3ffe:501:ffff:101::28
		AAAA	3ffe:501:ffff:101::29
		AAAA	3ffe:501:ffff:101::30
		AAAA	3ffe:501:ffff:101::31
		AAAA	3ffe:501:ffff:101::32
		AAAA	3ffe:501:ffff:101::33
		AAAA	3ffe:501:ffff:101::34
		AAAA	3ffe:501:ffff:101::35
		AAAA	3ffe:501:ffff:101::36
		AAAA	3ffe:501:ffff:101::37
		AAAA	3ffe:501:ffff:101::38
		AAAA	3ffe:501:ffff:101::39
		AAAA	3ffe:501:ffff:101::40
		AAAA	3ffe:501:ffff:101::41
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

    DNS Client1 (TN)                       DNS Server1 (NUT)
        |                                      |
        |------------------------------------->|
        |   1. Send standard query             |
        |       QNAME=A.example.com            |
        |       QTYPE=AAAA                     |
        |       ADDITIONAL UDP payload size    |
        |        = 1024                        |
        |                                      |
        |<-------------------------------------|
        |   2. Standard query response         |
        |       AAAA=3ffe:501:ffff:101::10     |
        |        ...                           |
        |       AAAA=3ffe:501:ffff:101::41     |
        |       ADDITIONAL UDP payload size    |
        |        = 1024                        |
        |                                      |
        v                                      v

	1. TN send standard query QNAME=A.example.com, QTYPE=AAAA w/ EDNS0 to NUT.
	2. NUT reply query response w/ AAAA=3ffe:501:ffff:101::10-3ffe:501:ffff:101::41
	   w/ EDNS0 to TN (Judgment *2)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (TN) to Server1 (NUT) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>A.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="7">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>empty (root domain)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>OPT (0x0029)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>1024</TD>
		</TR>
		<TR>
			<TD>EXTENDED-RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>VERSION</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>0</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (NUT) to Client1 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>32</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>A.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>A.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:101::10</TD>
		</TR>
		<TR>
			<TD ALIGN="center">...</TD>
			<TD ALIGN="center">...</TD>
			<TD ALIGN="center">...</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>A.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>AAAA (0x001C)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>16</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>3ffe:501:ffff:101::41</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>example.com (Pointer 0xC00E)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>6</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS1.example.com (NS1 + Pointer 0xC00E)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS1.example.com (Pointer 0xC3AB)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.10</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="7">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>empty (root domain)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>OPT (0x0029)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>1024</TD>
		</TR>
		<TR>
			<TD>EXTENDED-RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>VERSION</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>0</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Server1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>CL1_NETZ</TD>
			<TD>DNS Client1's (TN) Net-z address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	2. Received standard query response including OPT pseudo-RR.

=head1 TERMINATION

	None

=head1 REFERENCE

	RFC1034 DOMAIN NAMES - CONCEPTS AND FACILITIES
	3.6 Resource Records

	RFC1035 DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION
	3.2.1 Format 

	RFC 2671 EDNS0
	4. OPT pseudo-RR

=cut
