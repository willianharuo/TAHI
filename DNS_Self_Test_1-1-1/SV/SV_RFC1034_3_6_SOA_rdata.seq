#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/SV/SV_RFC1034_3_6_SOA_rdata.seq,v 1.1.1.1 2006/06/02 05:15:43 akisada Exp $
# $Id: SV_RFC1034_3_6_SOA_rdata.seq,v 1.1.1.1 2006/06/02 05:15:43 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# NUT configuration            #
#------------------------------#
my $NutConfig={ 
##mode
	              'ModeRequiredTestMode' => 'nonrecursive',
	              'ModeSetNamedConf' => 'yes',
	              'ModeSetZoneFiles' => 'yes',
	              'ConfZone0Name' => 'example.com',
	              'ConfZone0Type' => 'master',
	              'ConfZone0AllowQuery' => 'any',
	              'ConfZone0AllowTransfer' => 'any',
##zone
#SOA
	              'ZoneZone0Name' => 'example.com',
	              'ZoneZone0Ttl' => 86400,
	              'ZoneZone0Type' => 'master',
	              'ZoneZone0Rec0Name' => 'example.com.',
	              'ZoneZone0Rec0Type' => 'SOA',
	              'ZoneZone0Rec0Class' => 'IN',
	              'ZoneZone0Rec0Ttl' => 86400,
	              'ZoneZone0Rec0Mname' => 'NS1.example.com.',
	              'ZoneZone0Rec0Rname' => 'root.example.com.',
	              'ZoneZone0Rec0Serial' => 2005081600,
	              'ZoneZone0Rec0Refresh' => 3600,
	              'ZoneZone0Rec0Retry' => 900,
	              'ZoneZone0Rec0Expire' => 604800,
	              'ZoneZone0Rec0Minimum' => 3600,
#@  NS
	              'ZoneZone0Rec1Name' => 'example.com.',
	              'ZoneZone0Rec1Type' => 'NS',
	              'ZoneZone0Rec1Class' => 'IN',
	              'ZoneZone0Rec1Ttl' => 86400,
	              'ZoneZone0Rec1Value' => 'NS1.example.com.',
#NS1 A
	              'ZoneZone0Rec2Name' => 'NS1',
	              'ZoneZone0Rec2Type' => 'A',
	              'ZoneZone0Rec2Class' => 'IN',
	              'ZoneZone0Rec2Ttl' => 86400,
	              'ZoneZone0Rec2Value' => '192.168.0.10',
	             };

my $remoteRet = DNSRemote("setconfig.rmt",$NutConfig);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_CL_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

#--------------------
# DNS Server1
#--------------------
my @dns_session   = ();
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0
                }
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 1st message()
#------------------
$gen_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => Gen_DNS_Name('example.com'),
        'qtype'  => 0x0006,                        #SOA
        'qclass' => 0x0001,
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 2nd message
#------------------
$exp_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => undef,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 1,
        'nscount' => 1,
        'arcount' => undef,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'example.com.',
        'qtype'  => 0x0006,           #SOA
        'qclass' => 0x0001,
};

$exp_dns_msg_0[0]->{'answer'}->[0] = {
        'name'     => 'example.com.',
        'type'     => 0x0006,           #SOA
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 33,
        'rdata'    => {
                'mname'   => 'NS1.example.com.',
                'rname'   => 'root.example.com.',
                'serial'  => '2005081600',
                'refresh' => '3600',
                'retry'   => '900',
                'expire'  => '604800',
                'minimum' => '3600'
        }
};

$exp_dns_msg_0[0]->{'authority'}->[0] = {
        'name'     => 'example.com.',
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 2,
        'rdata'    => 'NS1.example.com.'
};

$exp_dns_msg_0[0]->{'additional'}->[0] = {
        'name'     => 'NS1.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.0.10',
};

################################
# start tests                  #
################################

my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# 1st packet (send)            #
#------------------------------#
#Print_Message( "=", ["Send 1st message\n"] );

$ret = undef;
$ret = DNSSendRecv(
        1, 1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);
unless ( defined($ret) ) {
        DNSExit($FAIL);
}

#Print_Message( "=", ["Receive 2nd message\n"] );

#------------------------------#
# Judgment (2nd packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (2nd packet)\n",
"2. Received standard query response including SOA resource record.\n",
        ]
);
my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["2nd packet PASS\n"] );

DNSExit($OK);
__END__

######################################################################

=head1 NAME

	SV_RFC1034_3_6_SOA_rdata - Resource record of SOA

=head1 VERIFICATION POINTS

	Verify that a NUT transmits correct message including SOA resource record

=begin html
	<UL>
        <DD><LI>A &lt;domain-name&gt; have single SOA resource record.<BR>
        <DD>Header section field has the following value.<BR>
        <DD><DD><B>QR : 1</B><BR>
        <DD><DD><B>QDCOUNT : 1 </B><BR>
        <DD><DD><B>ANCOUNT : 1 </B><BR>
        <BR>
	<DD><LI>SOA RDATA format
	<PRE>
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
/                     MNAME                     /
/                                               /
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
/                     RNAME                     /
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    SERIAL                     |
|                                               |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    REFRESH                    |
|                                               |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                     RETRY                     |
|                                               |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    EXPIRE                     |
|                                               |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    MINIMUM                    |
|                                               |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	</PRE>
	<DD><TABLE BORDER="0">
		<TBODY>
		<TR>
			<TD VALIGN="top">
			<B>MNAME :</B>
			</TD>
			<TD>
			<B>The &lt;domain-name&gt; of the name server that was the <BR>
			original or primary source of data for this zone.</B>
			</TD>
		</TR>
		<TR>
			<TD VALIGN="top">
			<B>RNAME :</B>
			</TD>
			<TD>
			<B>The &lt;domain-name&gt; which specifies the mailbox of the<BR>
			person responsible for this zone.</B>
			</TD>
		</TR>
		<TR>
			<TD VALIGN="top">
			<B>SERIAL :</B>
			</TD>
			<TD>
			<B>The unsigned 32 bit version number of the original copy<BR>
			of the zone.  Zone transfers preserve this value.  This<BR>
			value wraps and should be compared using sequence space arithmetic
			</B>
			</TD>
		</TR>
		<TR>
			<TD VALIGN="top">
			<B>REFRESH :</B>
			</TD>
			<TD>
			<B>A 32 bit time interval before the zone should be refreshed.
			</B>
			</TD>
		</TR>
		<TR>
			<TD VALIGN="top">
			<B>RETRY :</B>
			</TD>
			<TD>
			<B>A 32 bit time interval that should elapse before a<BR>
			failed refresh should be retried.
			</B>
			</TD>
		</TR>
		<TR>
			<TD VALIGN="top">
			<B>EXPIRE :</B>
			</TD>
			<TD>
			<B>A 32 bit time value that specifies the upper limit on<BR>
			the time interval that can elapse before the zone is no<BR>
			longer authoritative.
			</B>
			</TD>
		</TR>
		</TBODY>
	</TABLE>
	<DD>All times are in units of seconds.
	</UL>

=end html

=head1 TARGET

	Authoritative Server

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./SV_RFC1034_3_6_SOA_rdata.seq">SV_RFC1034_3_6_SOA_rdata.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<DD><LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
        AP Server1 (TN)
          |3ffe:501:ffff:101::10
          |192.168.1.10
          |
Net-y   --+--------+-------------------------- 3ffe:501:ffff:101::/64 
                   |                           192.168.1/24
                   |
                   |
                 Router (TN)
                   |3ffe:501:ffff:100::1
                   |192.168.0.1
                   |
                   |
Net-z   --+--------+-----------------+-------- 3ffe:501:ffff:100::/64 
          |                          |          192.168.0/24
          |                          |
        DNS Server1 (NUT)            DNS Client1 (TN)
           3ffe:501:ffff:100::XXXX     3ffe:501:ffff:100::20 
           192.168.0.10                192.168.0.20
	<BR>
	XXXX: EUI64
	</PRE>
	<DD><LI><STRONG>Setup</STRONG></LI><BR>
	<BR>
	<DD>Set the DNS Server1's (NUT) address as above mentioned Network Topology.<BR>
	<DD>Configure the Server1's (NUT) zone file to response query from TN.<BR>
	<BR>
	<DD>Example of example.com zone file:<BR>
	<PRE>
$TTL    86400           ; TTL 1 day
@ IN SOA NS1.example.com. root.example.com. (
	2005081600	; Serial
	3600		; Refresh every 1 hr
	900		; Retry every 15 min
	604800		; Expire after a week
	3600		; Minimum TTL 1 hr
)
;
	IN	NS	NS1.example.com.
NS1	IN	A	192.168.0.10
;
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

    DNS Client1 (TN)                       DNS Server1 (NUT)
        |                                      |
        |------------------------------------->|
        |   1. Send standard query             |
        |       QNAME=example.com              |
        |       QTYPE=SOA                      |
        |                                      |
        |<-------------------------------------|
        |   2. Standard query response         |
        |       SOA=NS1.example.com            |
        |                                      |
        v                                      v

	1. TN send standard query QNAME=example.com, QTYPE=SOA to NUT.
	2. NUT reply query response w/ SOA=NS1.example.com to TN (Judgment *2)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (TN) to Server1 (NUT) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<td>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (NUT) to Client1 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="12">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>SOA (0x0006)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>33</TD>
		</TR>
		<TR>
			<TD>MNAME</TD>
			<TD>NS1.example.com (NS1 + Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>RNAME</TD>
			<TD>root.example.com (root + Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>SERIAL</TD>
			<TD>2005081600</TD>
		</TR>
		<TR>
			<TD>REFRESH</TD>
			<TD>1 hour</TD>
		</TR>
		<TR>
			<TD>RETRY</TD>
			<TD>15 minutes</TD>
		</TR>
		<TR>
			<TD>EXPIRE</TD>
			<TD>1 week</TD>
		</TR>
		<TR>
			<TD>MINIMUM</TD>
			<TD>1 hour</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>2</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS1.example.com (Pointer 0xC029)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS1.example.com (Pointer 0xC029)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.10</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Server1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>CL1_NETZ</TD>
			<TD>DNS Client1's (TN) Net-z address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	2. Received standard query response including SOA resource record.

=head1 TERMINATION

	None

=head1 REFERENCE

	RFC1034 DOMAIN NAMES - CONCEPTS AND FACILITIES
	3.6 Resource Records

	RFC1035 DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION
	3.2.1 Format 
	3.2.2 TYPE values 
	3.3.13 SOA RDATA format

=cut
