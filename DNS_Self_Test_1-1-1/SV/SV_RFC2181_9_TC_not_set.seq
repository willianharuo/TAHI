#!/usr/bin/perl
#
# Copyright (C) 2006 Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct-dns/dns/SV/SV_RFC2181_9_TC_not_set.seq,v 1.1.1.1 2006/06/02 05:15:48 akisada Exp $
# $Id: SV_RFC2181_9_TC_not_set.seq,v 1.1.1.1 2006/06/02 05:15:48 akisada Exp $
#
######################################################################

BEGIN {
        $kCommon::TestVersion = '$Name: REL_1_1_1 $';
        push( @INC, '/usr/local/koi/libdata' );
        push( @INC, '..' );
}

END {
}

# use strict;
use DNS;

#------------------------------#
# NUT configuration            #
#------------------------------#
my $NutConfig={ 
##mode
	                     'ModeRequiredTestMode' => 'nonrecursive',
	                     'ModeSetNamedConf' => 'yes',
	                     'ModeSetZoneFiles' => 'yes',
##named.conf
	                     'ConfZone0Name' => 'example.com',
	                     'ConfZone0Type' => 'master',
	                     'ConfZone0AllowQuery' => 'any',
	                     'ConfZone0AllowTransfer' => 'any',
##zone
#SOA
	                     'ZoneZone0Name' => 'example.com',
	                     'ZoneZone0Ttl' => 86400,
	                     'ZoneZone0Type' => 'master',
	                     'ZoneZone0Rec0Name' => 'example.com.',
	                     'ZoneZone0Rec0Type' => 'SOA',
	                     'ZoneZone0Rec0Class' => 'IN',
	                     'ZoneZone0Rec0Ttl' => 86400,
	                     'ZoneZone0Rec0Mname' => 'NS1.example.com.',
	                     'ZoneZone0Rec0Rname' => 'root.example.com.',
	                     'ZoneZone0Rec0Serial' => 2005081600,
	                     'ZoneZone0Rec0Refresh' => 3600,
	                     'ZoneZone0Rec0Retry' => 900,
	                     'ZoneZone0Rec0Expire' => 604800,
	                     'ZoneZone0Rec0Minimum' => 3600,
#@  NS
	                     'ZoneZone0Rec1Name' => 'example.com.',
	                     'ZoneZone0Rec1Type' => 'NS',
	                     'ZoneZone0Rec1Class' => 'IN',
	                     'ZoneZone0Rec1Ttl' => 86400,
	                     'ZoneZone0Rec1Value' => 'NS1.example.com.',
#NS1 A
	                     'ZoneZone0Rec2Name' => 'NS1',
	                     'ZoneZone0Rec2Type' => 'A',
	                     'ZoneZone0Rec2Class' => 'IN',
	                     'ZoneZone0Rec2Ttl' => 86400,
	                     'ZoneZone0Rec2Value' => '192.168.0.10',
#A A
	                     'ZoneZone0Rec3Name' => 'A',
	                     'ZoneZone0Rec3Type' => 'A',
	                     'ZoneZone0Rec3Class' => 'IN',
	                     'ZoneZone0Rec3Ttl' => 86400,
	                     'ZoneZone0Rec3Value' => '192.168.1.10',
	                    };


for(my $i=0;$i < 28;$i++){
	my $ip = sprintf("192.168.1.1%02d",$i);
	$NutConfig->{"ZoneZone0Rec" . ($i + 4) ."Name"} = 'B';
	$NutConfig->{"ZoneZone0Rec" . ($i + 4) ."Type"} = 'A';
	$NutConfig->{"ZoneZone0Rec" . ($i + 4) ."Class"} = 'IN';
	$NutConfig->{"ZoneZone0Rec" . ($i + 4) ."Ttl"} = 86400;
	$NutConfig->{"ZoneZone0Rec" . ($i + 4) ."Value"} = $ip;
}

my $remoteRet = DNSRemote("setconfig.rmt",$NutConfig);
unless ( defined($remoteRet) ) {
        Debug_Print("ERROR:DNSRemote\n");
        DNSExit($FAIL);
}

#------------------------------#
# configuration                #
#------------------------------#
my @dns_session_config = ();
my $dns_param          = { 'dns_session_config' => \@dns_session_config };

$dns_session_config[0] = {
        'TN_INTERFACE'   => 'Link0',
        'TN_ADDR'        => $TN_NET0_NODE2_ADDR,
        'TN_ADDR_PORT'   => $TN_CL_PORT,
        'TN_ADDR_PROTO'  => 'UDP',
        'TN_ADDR_FAMILY' => $ADDR_FAMILY,
        'NUT_ADDR'       => $NUT_ADDR_0,
        'NUT_ADDR_PORT'  => $NUT_SV_PORT,
};

#--------------------
# DNS Server1
#--------------------
my @dns_session   = ();
my @gen_dns_msg_0 = ();
my @exp_dns_msg_0 = ();

$dns_session[0] = {
        'socket_ref'      => undef,
        'dns_one_session' => [
                {
                        'gen_dns_msg' => \@gen_dns_msg_0,
                        'dec_dns_msg' => undef,
                        'exp_dns_msg' => \@exp_dns_msg_0,
                }
        ]
};

#--------------------------
# Send packet definition
#--------------------------
#------------------
# 1st message()
#------------------
#------------------
# Client1(TN) -> NUT
#------------------
$gen_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 0,
        'opcode'  => 0,
        'aa'      => 0,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => 0,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 0,
        'nscount' => 0,
        'arcount' => 0,
};

$gen_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => Gen_DNS_Name('B.example.com'),
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

#--------------------------
# Expect packet definition
#--------------------------
#------------------
# 2nd message
#------------------
$exp_dns_msg_0[0]->{'header'} = {
        'id'      => 0x1000,
        'qr'      => 1,
        'opcode'  => 0,
        'aa'      => undef,
        'tc'      => 0,
        'rd'      => 1,
        'ra'      => undef,
        'z'       => 0,
        'rcode'   => 0,
        'qdcount' => 1,
        'ancount' => 28,
        'nscount' => 1,
        'arcount' => undef,
};

$exp_dns_msg_0[0]->{'question'}->[0] = {
        'qname'  => 'B.example.com.',
        'qtype'  => 0x0001,
        'qclass' => 0x0001,
};

$exp_dns_msg_0[0]->{'answer'}->[0] = {
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.100',
};

$exp_dns_msg_0[0]->{'answer'}->[1] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.101',
};

$exp_dns_msg_0[0]->{'answer'}->[2] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.102',
};

$exp_dns_msg_0[0]->{'answer'}->[3] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.103',
};

$exp_dns_msg_0[0]->{'answer'}->[4] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.104',
};

$exp_dns_msg_0[0]->{'answer'}->[5] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.105',
};

$exp_dns_msg_0[0]->{'answer'}->[6] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.106',
};

$exp_dns_msg_0[0]->{'answer'}->[7] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.107',
};

$exp_dns_msg_0[0]->{'answer'}->[8] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.108',
};

$exp_dns_msg_0[0]->{'answer'}->[9] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.109',
};

$exp_dns_msg_0[0]->{'answer'}->[10] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.110',
};

$exp_dns_msg_0[0]->{'answer'}->[11] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.111',
};

$exp_dns_msg_0[0]->{'answer'}->[12] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.112',
};

$exp_dns_msg_0[0]->{'answer'}->[13] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.113',
};

$exp_dns_msg_0[0]->{'answer'}->[14] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.114',
};

$exp_dns_msg_0[0]->{'answer'}->[15] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.115',
};

$exp_dns_msg_0[0]->{'answer'}->[16] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.116',
};

$exp_dns_msg_0[0]->{'answer'}->[17] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.117',
};

$exp_dns_msg_0[0]->{'answer'}->[18] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.118',
};

$exp_dns_msg_0[0]->{'answer'}->[19] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.119',
};

$exp_dns_msg_0[0]->{'answer'}->[20] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.120',
};

$exp_dns_msg_0[0]->{'answer'}->[21] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.121',
};

$exp_dns_msg_0[0]->{'answer'}->[22] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.122',
};

$exp_dns_msg_0[0]->{'answer'}->[23] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.123',
};

$exp_dns_msg_0[0]->{'answer'}->[24] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.124',
};

$exp_dns_msg_0[0]->{'answer'}->[25] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.125',
};

$exp_dns_msg_0[0]->{'answer'}->[26] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.126',
};

$exp_dns_msg_0[0]->{'answer'}->[27] = {    # 2nd packet answer
        'name'     => 'B.example.com.',
        'type'     => 0x0001,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 4,
        'rdata'    => '192.168.1.127',
};

$exp_dns_msg_0[0]->{'authority'}->[0] = {
        'name'     => 'example.com.',
        'type'     => 0x0002,
        'class'    => 0x0001,
        'ttl'      => 86400,
        'rdlength' => 6,
        'rdata'    => 'NS1.example.com.'
};

################################
# start tests                  #
################################

my $ret = DNSStartConnect( $dns_param, \@dns_session );
unless ( defined($ret) ) {
        Debug_Print("ERROR:DNSStartConnect\n");
        DNSExit($FAIL);
}

#------------------------------#
# 1st packet (send)            #
#------------------------------#
$ret = undef;
$ret = DNSSend(
        1,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't send DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Send 1st message\n"] );

#------------------------------#
# 2nd packet (receive@NS2)     #
#------------------------------#
$ret = undef;
$ret = DNSRecv(
        1, 60,
        $dns_session[0]->{'socket_ref'},
        $dns_session[0]->{'dns_one_session'}->[0]
);

unless ( defined($ret) ) {
        Debug_Print("ERROR: Can't receive DNS message\n");
        DNSExit($FAIL);
}
#Print_Message( "=", ["Receive 2nd message\n"] );

#------------------------------#
# Judgment (2nd packet)        #
#------------------------------#
Print_Message(
        "#",
        [
                "Judgment (2nd packet)\n",
"2. Received standard query response w/ A=192.168.1.100 - 192.168.1.127 that include Authority section (TC bit is not set).\n",
        ]
);

my $recv_data = $dns_session[0]->{'dns_one_session'}->[0]->{'dec_dns_msg'}->[0];

$ret = undef;
$ret = JudgeDNSMsg( $recv_data, $exp_dns_msg_0[0] );

unless ( defined($ret) ) {
        DNSExit($FAIL);
}

Print_Message( "=", ["2nd packet PASS\n"] );

DNSExit($OK);
__END__

######################################################################

=head1 NAME

	SV_RFC2181_9_TC_not_set - Case of the TC header bit is not set 

=head1 VERIFICATION POINTS

	Verify that a NUT does not set TC bit for results of additional section processing.

=begin html
	<UL>
	<li>The TC bit should not be set merely because some extra information
	could have been included, but there was insufficient room.  This
	includes the results of additional section processing.  In such cases
	the entire RRSet that will not fit in the response should be omitted,
	and the reply sent as is, with the TC bit clear.
	</li>
	</ul> 

=end html

=head1 TARGET

	Authoritative Server

=head1 SYNOPSIS

=begin html
<PRE>
	<A HREF="./SV_RFC2181_9_TC_not_set.seq">SV_RFC2181_9_TC_not_set.seq</A> [-tooloption ...]: KOI tool option
	See also <A HREF="../DNSConfig.pm">DNSConfig.pm</A>
</PRE>

=end html

=head1 INITIALIZATION

=begin html
	<UL>
	<DD><LI><STRONG>Network Topology</STRONG></LI> 
	<PRE>
        AP Server1 (TN)
          |3ffe:501:ffff:101::10
          |192.168.1.10
          |
Net-y   --+--------+-------------------------- 3ffe:501:ffff:101::/64 
                   |                           192.168.1/24
                   |
                   |
                 Router (TN)
                   |3ffe:501:ffff:100::1
                   |192.168.0.1
                   |
                   |
Net-z   --+--------+-----------------+-------- 3ffe:501:ffff:100::/64 
          |                          |          192.168.0/24
          |                          |
        DNS Server1 (NUT)            DNS Client1 (TN)
           3ffe:501:ffff:100::XXXX     3ffe:501:ffff:100::20 
           192.168.0.10                192.168.0.20
	<BR>
	XXXX: EUI64
	</PRE>
	<DD><LI><STRONG>Setup</STRONG></LI><BR>
	<BR>
	<DD>Set the DNS Server1's (NUT) address as above mentioned Network Topology.<BR>
	<DD>Configure the Server1's (NUT) zone file to response query from TN.<BR>
	<BR>
	<DD>Example of example.com zone file:<BR>
	<PRE>
$TTL    86400           ; TTL of 1 day
@ IN SOA NS1.example.com. root.example.com. (
	2005081600	; serial
	3600		; refresh every 1 hr
	900		; retry every 15 min
	604800		; expire after a week
	3600		; Minimum TTL of a 1 hr
)
;
	IN	NS	NS1.example.com.
NS1	IN	A	192.168.0.10
;
A	IN	A	192.168.1.10
B	IN	A	192.168.1.100
	IN	A	192.168.1.101
	IN	A	192.168.1.102
	IN	A	192.168.1.103
	IN	A	192.168.1.104
	IN	A	192.168.1.105
	IN	A	192.168.1.106
	IN	A	192.168.1.107
	IN	A	192.168.1.108
	IN	A	192.168.1.109
	IN	A	192.168.1.110
	IN	A	192.168.1.111
	IN	A	192.168.1.112
	IN	A	192.168.1.113
	IN	A	192.168.1.114
	IN	A	192.168.1.115
	IN	A	192.168.1.116
	IN	A	192.168.1.117
	IN	A	192.168.1.118
	IN	A	192.168.1.119
	IN	A	192.168.1.120
	IN	A	192.168.1.121
	IN	A	192.168.1.122
	IN	A	192.168.1.123
	IN	A	192.168.1.124
	IN	A	192.168.1.125
	IN	A	192.168.1.126
	IN	A	192.168.1.127
	</PRE>
	</UL>

=end html

=head1 TEST PROCEDURE

	This test sequence is following.

    DNS Client1 (TN)                       DNS Server1 (NUT)
        |                                      |
        |------------------------------------->|
        |   1. Send standard query             |
        |       QNAME=B.example.com            |
        |       QTYPE=A                        |
        |                                      |
        |<-------------------------------------|
        |   2. Standard query response         |
        |       (TC bit is not set)            |
        |       QNAME=B.example.com            |
        |       QTYPE=A                        |
        |       Answer=192.168.1.100           |
        |          to  192.168.1.127           |
        |       AUTHORITY Name=example.org     |
        |       AUTHORITY Name Server          |
        |           = NS1.example.org          |
        |                                      |
        v                                      v

	1. TN send standard query QNAME=B.example.com, QTYPE=A to NUT.
	2. NUT reply query response w/ A=192.168.1.100 - 192.168.1.127 to TN (Judgment *2)

=begin html
	<UL>
	<DD><LI>Packet Description</LI><BR>
	<BR>
	<DD>1st packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query from DNS Client1 (TN) to Server1 (NUT) </CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>B.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		</TBODY>
	</TABLE>
	<BR>
	<DD>2nd packet.
	<P></P>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD COLSPAN="3">
			<CENTER>Standard query response from DNS Server1 (NUT) to Client1 (TN)</CENTER>
			</TD>
		</TR>
		<TR>
			<TD ROWSPAN="2">IP Header</TD>
			<TD>Source Address</TD>
			<TD>NUT_NETZ</TD>
		</TR>
		<TR>
			<TD>Destination Address</TD>
			<TD>CL1_NETZ</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="2">UDP Header</TD>
			<TD>Src Port</TD>
			<TD>53</TD>
		</TR>
		<TR>
			<TD>Dst Port</TD>
			<TD>2000</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="13">DNS Header</TD>
			<TD>ID</TD>
			<TD>0x1000</TD>
		</TR>
		<TR>
			<TD>QR</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>OPCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>AA</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>TC</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RD</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>RA</TD>
			<TD>ANY</TD>
		</TR>
		<TR>
			<TD>Z</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>RCODE</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>QDCOUNT</TD>
			<TD>1</TD>
		</TR>
		<TR>
			<TD>ANCOUNT</TD>
			<TD>30</TD>
		</TR>
		<TR>
			<TD>NSCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD>ARCOUNT</TD>
			<TD>0</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="3">DNS Question section</TD>
			<TD>QNAME</TD>
			<TD>B.example.com</TD>
		</TR>
		<TR>
			<TD>QTYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>QCLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>B.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.100</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section<BR> X 28<BR>ADDRESS 192.168.1.101 - 192.168.1.126</TD>
			<TD>NAME</TD>
			<TD>B.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>****</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Answer section</TD>
			<TD>NAME</TD>
			<TD>B.example.com (Pointer 0xC00C)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.1.127</TD>
		</TR>
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Authority section</TD>
			<TD>NAME</TD>
			<TD>example.com (Pointer 0xC00E)</TD>
		</TR>
		<TR>
			<TD>TYPE</TD>
			<TD>NS (0x0002)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>6</TD>
		</TR>
		<TR>
			<TD>NSDNAME</TD>
			<TD>NS1.example.com (NS1 + Pointer 0xC00E)</TD>
		</TR>
<!--
		<TR>
			<TD COLSPAN="1" ROWSPAN="6">DNS Additional section</TD>
			<TD>NAME</TD>
			<TD>NS1.example.com (Pointer 0xC03B)</TD>
		</TR>
		<TR>
			<TD>TYPE<BR>
			</TD>
			<TD>A (0x0001)</TD>
		</TR>
		<TR>
			<TD>CLASS</TD>
			<TD>IN (0x0001)</TD>
		</TR>
		<TR>
			<TD>TTL</TD>
			<TD>1 day (86400)</TD>
		</TR>
		<TR>
			<TD>RDLENGTH</TD>
			<TD>4</TD>
		</TR>
		<TR>
			<TD>ADDRESS</TD>
			<TD>192.168.0.10</TD>
		</TR>
-->
		</TBODY>
	</TABLE>
	<BR>
	<BR>
	<DD>Exp.
	<BR>
	<DD><TABLE BORDER="1">
		<TBODY>
		<TR>
			<TD>NUT_NETZ</TD>
			<TD>DNS Server1's (NUT) Net-z address</TD>
		</TR>
		<TR>
			<TD>CL1_NETZ</TD>
			<TD>DNS Client1's (TN) Net-z address</TD>
		</TR>
		</TBODY>
	</TABLE>
	</UL>

=end html

=head1 JUDGMENT

	2. Received standard query response w/ A=192.168.1.100 - 192.168.1.127 that include Authority section (TC bit is not set).

=head1 TERMINATION

	None

=head1 REFERENCE

        RFC2181 Clarifications to the DNS Specification
        9. The TC (truncated) header bit

=cut
